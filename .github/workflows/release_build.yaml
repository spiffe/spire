name: Release Build
on:
  push:
    tags:
      - 'v[0-9].[0-9]+.[0-9]+'
env:
  GO_VERSION: 1.18.1
jobs:
  cache-deps:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup dep cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Pull go deps
        run: go mod download

  lint:
    runs-on: ubuntu-18.04
    needs: cache-deps
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Setup build tool cache
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-tools-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tools-
      - name: Lint
        run: make lint
      - name: Tidy check
        run: make tidy-check
      - name: Generate check
        run: make generate-check
      - name: Shell check
        run: shellcheck .github/workflows/scripts/*.sh

  unit-test:
    strategy:
      matrix:
        OS: [ubuntu-18.04, macos-latest]
    runs-on: ${{ matrix.OS }}
    needs: cache-deps
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Run unit tests
        run: ./.github/workflows/scripts/run_unit_tests.sh

  unit-test-race-detector:
    name: unit-test (linux with race detection)
    runs-on: ubuntu-18.04
    needs: cache-deps
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Run unit tests
        run: ./.github/workflows/scripts/run_unit_tests_under_race_detector.sh

  artifacts:
    runs-on: ubuntu-18.04
    needs: [cache-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Load cached build tools
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-tools-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tools-
      - name: Build artifacts
        run: ./.github/workflows/scripts/build_artifacts.sh
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: ./artifacts/

  images:
    runs-on: ubuntu-18.04
    needs: [cache-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Load cached build tools
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-tools-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tools-
      - name: Build images
        run: make images
      - name: Export images
        run: docker save spire-server:latest-local spire-agent:latest-local k8s-workload-registrar:latest-local oidc-discovery-provider:latest-local | gzip > images.tar.gz
      - name: Archive images
        uses: actions/upload-artifact@v2
        with:
          name: images
          path: images.tar.gz

  scratch-images:
    runs-on: ubuntu-18.04
    needs: [cache-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Load cached build tools
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-tools-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tools-
      - name: Build scratch images
        run: make scratch-images
      - name: Export scratch images
        run: docker save spire-server-scratch:latest-local spire-agent-scratch:latest-local k8s-workload-registrar-scratch:latest-local oidc-discovery-provider-scratch:latest-local | gzip > scratch-images.tar.gz
      - name: Archive scratch images
        uses: actions/upload-artifact@v2
        with:
          name: scratch-images
          path: scratch-images.tar.gz

  integration:
    runs-on: ubuntu-18.04
    needs: [cache-deps, images, scratch-images]
    strategy:
      fail-fast: false
      matrix:
        num_runners: [5]
        runner_id: [1, 2, 3, 4, 5]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # The "upgrade" integration test needs the history to ensure
          # that the version number in the source code has been bumped as
          # expected. This action does not fetch tags unless we supply a
          # fetch depth of zero.
          fetch-depth: 0
      # Even though we've just checked out the code, checkout@v2 has a bug
      # where it overwrites the local annotated tag, dropping the annotation.
      # The "upgrade" integration test is designed to only consider annotated
      # tags as version tags. We don't really want to soften this stance, so
      # instead we'll re-fetch the tags.
      #
      # See https://github.com/actions/checkout/issues/290
      - name: Fix tag annotations
        run: git fetch --tags --force
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Load cached deps
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Load cached build tools
        uses: actions/cache@v2
        with:
          path: .build
          key: ${{ runner.os }}-tools-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tools-
      - name: Download archived images
        uses: actions/download-artifact@v2
        with:
          name: images
          path: .
      - name: Download archived scratch images
        uses: actions/download-artifact@v2
        with:
          name: scratch-images
          path: .
      - name: Load archived images
        run: zcat images.tar.gz | docker load
      - name: Load archived scratch images
        run: zcat scratch-images.tar.gz | docker load
      - name: Run integration tests
        env:
          NUM_RUNNERS: ${{ matrix.num_runners }}
          THIS_RUNNER: ${{ matrix.runner_id }}
          TERM: dumb
          # We don't need to specify CICD_TARGET_BRANCH since the upgrade
          # integration test will detect the annotated tag for version checking.
          # CICD_TARGET_BRANCH:
        run: ./.github/workflows/scripts/split.sh | xargs ./test/integration/test.sh

  publish-artifacts:
    runs-on: ubuntu-18.04
    needs: [lint, unit-test, unit-test-race-detector, artifacts, integration]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download archived artifacts
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: ./artifacts/
      - name: Create Release
        env:
          # GH_REPO is required for older releases of `gh`. Until we're
          # reasonably confident that that the gh release is new enough,
          # set GH_REPO to the repository to create the release in.
          #
          # See https://github.com/cli/cli/issues/3556
          GH_REPO: ${{ github.repository }} 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Create the release using the version number as the title
        run: gh release create "${GITHUB_REF#refs/tags/}" ./artifacts/*.tar.gz ./artifacts/*.txt --title "${GITHUB_REF#refs/tags/}"

  publish-images:
    runs-on: ubuntu-18.04
    needs: [lint, unit-test, unit-test-race-detector, artifacts, integration]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download archived images
        uses: actions/download-artifact@v2
        with:
          name: images
          path: .
      - name: Download archived scratch images
        uses: actions/download-artifact@v2
        with:
          name: scratch-images
          path: .
      - name: Load archived images
        run: zcat images.tar.gz | docker load
      - name: Load archived scratch images
        run: zcat scratch-images.tar.gz | docker load
      - name: Log in to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY }}
      # Push the images to GCR using the version number (without the "v" prefix).
      - name: Push images
        run: ./.github/workflows/scripts/push-images.sh "${GITHUB_REF#refs/tags/v}"
      - name: Log in to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Push the images to GHCR using the version number (without the "v" prefix).
      - name: Push images
        run: ./.github/workflows/scripts/push-scratch-images.sh "${GITHUB_REF#refs/tags/v}"
