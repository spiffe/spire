# This is the SPIRE Server configuration file including all possible configuration
# options.

# server: Contains core configuration parameters.
server {
    # bind_address: IP address or DNS name of the SPIRE server.
    # Default: 0.0.0.0.
    bind_address = "127.0.0.1"

    # bind_port: HTTP Port number of the SPIRE server. Default: 8081.
    bind_port = "8081"

    # ca_key_type: The key type used for the server CA,
    # <rsa-2048|rsa-4096|ec-p256|ec-p384>. Default: ec-p256 (Both X509 and JWT).
    # ca_key_type = "ec-p256"

    # ca_subject: The Subject that CA certificates should use.
    ca_subject = {
        # country: Array of Country values.
        country = ["US"],

        # organization: Array of Organization values.
        organization = ["SPIFFE"],

        # common_name: The CommonName value.
        common_name = "",
    }

    # ca_ttl: The default CA/signing key TTL. Default: 24h.
    # ca_ttl = "24h"

    # data_dir: A directory the server can use for its runtime.
    data_dir = "./.data"

    # federation: Use this to configure the bundle endpoint provided by this server
    # and/or the bundle endpoints to federate with.
    federation {
        # bundle_endpoint: Configuration for this server's bundle endpoint.
        bundle_endpoint {
            # address: IP address where this server will listen for HTTP requests.
            address = "0.0.0.0"

            # port: TCP port number where this server will listen for HTTP requests.
            port = 8443

            # acme: Automated Certificate Management Environment configuration section.
            acme {
                # directory_url: Directory endpoint. Default: https://acme-v02.api.letsencrypt.org/directory
                # directory_url = "https://acme-v02.api.letsencrypt.org/directory"

                # domain_name: Domain for which the certificate manager tries to retrieve
                # new certificates.
                domain_name = "example.org"

                # email: Contact email address. This is used by CAs, such as Let's Encrypt,
                # to notify about problems with issued certificates.
                email = "some@mail.com"

                # tos_accepted: ACME Terms of Service acceptance. If not true, and the
                # provider requires acceptance, then certificate retrieval will fail.
                # Default: false.
                # tos_accepted = false
            }
        }

        # federates_with "<trust domain>": configures the address of a bundle endpoint used to
        # get a trust bundle for "<trust domain>". This section can be repeated per trust domain.
        federates_with "domain1.test" {
            # bundle_endpoint: configuration of other server's bundle endpoint.
            bundle_endpoint {
                # address: IP or DNS name of the bundle endpoint that provides the trust
                # bundle to federate with `"<trust domain>"`.
                address = "1.2.3.4"

                # port: Port number of the bundle endpoint. Default: 443
                # port = 443

                # spiffe_id: Expected SPIFFE ID of the bundle endpoint server. This
                # is ignored if use_web_pki is true. Default: SPIRE Server SPIFFE ID
                # within the `"<trust domain>"`.
                # spiffe_id = ""

                # use_web_pki: If true, indicates that this server must use Web PKI to
                # authenticate the bundle endpoint, otherwise SPIFFE authentication is used.
                # Default: false.
                # use_web_pki = false
            }
        }
    }

    # jwt_issuer: The issuer claim used when minting JWT-SVIDs.
    # jwt_issuer = ""

    # log_file: File to write logs to
    # log_file = ""

    # log_level: Sets the logging level <DEBUG|INFO|WARN|ERROR>. Default: INFO.
    # log_level = "INFO"

    # Format of logs, <text|json>. Default: text.
    # log_format = "text"

    # ratelimit: Holds rate limiting configurations.
    # ratelimit = {
    #     # Controls whether or not node attestation is rate limited to one
    #     # attempt per-second per-IP. Default: true.
    #     attestation = true
    # }

    # registration_uds_path: Location to bind the registration API socket.
    # Default: /tmp/spire-registration.sock.
    # registration_uds_path = "/tmp/spire-registration.sock"

    # default_svid_ttl: The default SVID TTL. Default: 1h.
    # default_svid_ttl = "1h"

    # trust_domain: The trust domain that this server belongs to.
    trust_domain = "example.org"
}

# plugins: Contains the configuration for each plugin.
# Each nested object has the following format:
#
#     PluginType "plugin_name" {
#
#         # plugin_cmd: Path to the plugin implementation binary (optional, not
#         # needed for built-ins)
#         plugin_cmd = <string>
#
#         # plugin_checksum: An optional sha256 of the plugin binary (optional,
#         # not needed for built-ins)
#         plugin_checksum = <string>
#
#         # plugin_data: Plugin-specific data
#         plugin_data {
#             ...configuration options...
#         }
#
#         # enabled: Enable or disable the plugin (enabled by default)
#         enabled = [true | false]
#     }
plugins {
    # DataStore "sql": An sql database storage for SQLite, PostgreSQL and MySQL
    # databases for the SPIRE datastore.
    DataStore "sql" {
        plugin_data {
            # database_type: database type, <sqlite3|postgres|mysql>
            database_type = "sqlite3"

            # connection_string: database specific connection string. The format
            # depends on the value specified for database_type.
            connection_string = "./.data/datastore.sqlite3"

            # ro_connection_string: read only connection. The formatted string
            # takes the same form as connection_string. This option is not
            # applicable for SQLite3.
            # ro_connection_string = ""

            # root_ca_path: Path to Root CA bundle (MySQL only)
            # root_ca_path = ""

            # client_cert_path: Path to client certificate (MySQL only)
            # client_cert_path = ""

            # client_key_path: Path to private key for client certificate (MySQL only)
            # client_key_path = ""

            # max_open_conns: The maximum number of open db connections. Default: unlimited.
            # max_open_conns = 0

            # max_idle_conns: The maximum number of idle connections in the pool. Default: 2.
            # max_idle_conns = 2

            # conn_max_lifetime: The maximum amount of time a connection may be
            # reused. Default: unlimited.
            # conn_max_lifetime = 0

            # disable_migration: True to disable auto-migration functionality. Use
            # of this flag allows finer control over when datastore migrations
            # occur and coordination of the migration of a datastore shared with a
            # SPIRE Server cluster. Only available for databases from SPIRE Code
            # version 0.9.0 or later.
            # disable_migration = false
        }
    }

    # KeyManager "disk": A disk-based key manager for signing SVIDs.
    # KeyManager "disk" {
    #     plugin_data {
    #         # keys_path: Path to the keys file on disk.
    #         # keys_path = "/opt/spire/data/server/keys.json"
    #     }
    # }

    # KeyManager "memory": A key manager for signing SVIDs which only stores
    # keys in memory and does not actually persist them anywhere.
    KeyManager "memory" {
        plugin_data {}
    }

    # NodeAttestor "aws_iid": A node attestor which attests agent identity
    # using an AWS Instance Identity Document.
    # NodeAttestor "aws_iid" {
    #     plugin_data {
    #         # access_key_id: AWS access key id. Default: value of
    #         # AWS_ACCESS_KEY_ID environment variable.
    #         # access_key_id = ""

    #         # secret_access_key: AWS secret access key. Default: value of
    #         # AWS_SECRET_ACCESS_KEY environment variable.
    #         # secret_access_key = ""

    #         # skip_block_device: Skip anti-tampering mechanism which checks to
    #         # make sure that the underlying root volume has not been detached
    #         # prior to attestation. Default: false
    #         # skip_block_device = false
    #     }
    # }

    # NodeAttestor "azure_msi": A node attestor which attests agent identity
    # using an Azure MSI token.
    # NodeAttestor "azure_msi" {
    #     plugin_data {
    #         # tenants: A map of tenants, keyed by tenant ID, that are
    #         # authorized for attestation. Tokens for unspecified tenants are
    #         # rejected.
    #         # tenants = {
    #             # "<tenant ID>" = {
    #                 # resource_id: The resource ID (or audience) for the
    #                 # tenant's MSI token. Tokens for a different resource
    #                 # ID are rejected. Default: https://management.azure.com/
    #                 # resource_id = "https://management.azure.com/"
    #             # }
    #         # }
    #     }
    # }

    # NodeAttestor "gcp_iit": A node attestor which attests agent identity
    # using a GCP Instance Identity Token.
    # NodeAttestor "gcp_iit" {
    #     plugin_data {
    #         # projectid_whitelist: List of whitelisted ProjectIDs from which
    #         # nodes can be attested.
    #         # projectid_whitelist = ["project-123"]

    #         # use_instance_metadata: If true, instance metadata is fetched from
    #         # the Google Compute Engine API and used to augment the node
    #         # selectors produced by the plugin. Default: false.
    #         # use_instance_metadata = false

    #         # service_account_file: Path to the service account file used to
    #         # authenticate with the Google Compute Engine API.
    #         # service_account_file = ""

    #         # allowed_label_keys: Instance label keys considered for selectors.
    #         # allowed_label_keys = []

    #         # allowed_metadata_keys: Instance metadata keys considered for
    #         # selectors.
    #         # allowed_metadata_keys = []

    #         # max_metadata_value_size: Sets the maximum metadata value size
    #         # considered by the plugin for selectors. Default: 128.
    #         # max_metadata_value_size = 128
    #     }
    # }

    # NodeAttestor "join_token": A node attestor which validates agents
    # attesting with server-generated join tokens.
    NodeAttestor "join_token" {
        plugin_data {}
    }

    # NodeAttestor "k8s_psat": A node attestor which attests agent identity
    # using a Kubernetes Projected Service Account token.
    # NodeAttestor "k8s_psat" {
    #     plugin_data {
    #         # clusters: A map of clusters, keyed by an arbitrary ID, that are
    #         # authorized for attestation.
    #         # clusters = {
    #             # "<arbitrary ID>" = {
    #                 # service_account_whitelist: A list of service account names,
    #                 # qualified by namespace (for example, "default:blog" or
    #                 # "production:web") to allow for node attestation. Attestation
    #                 # will be rejected for tokens bound to service accounts that
    #                 # aren't in the whitelist.
    #                 # service_account_whitelist = []

    #                 # audience: Audience for token validation. If it is set to an
    #                 # empty array ([]), Kubernetes API server audience is used.
    #                 # Default: ["spire-server"].
    #                 # audience = ["spire-server"]

    #                 # kube_config_file: Path to a k8s configuration file for API
    #                 # Server authentication. A kubernetes configuration file must
    #                 # be specified if SPIRE server runs outside of the k8s cluster.
    #                 # If empty, SPIRE server is assumed to be running inside the
    #                 # cluster and in-cluster configuration is used.	Default: "".
    #                 # kube_config_file = ""

    #                 # allowed_node_label_keys: Node label keys considered for
    #                 # selectors.
    #                 # allowed_node_label_keys = []

    #                 # allowed_pod_label_keys: Pod label keys considered for selectors.
    #                 # allowed_pod_label_keys = []
    #             # }
    #         # }
    #     }
    # }

    # NodeAttestor "k8s_sat": A node attestor which attests agent identity
    # using a Kubernetes Service Account token.
    # NodeAttestor "k8s_sat" {
    #     plugin_data {
    #         # clusters: A map of clusters, keyed by an arbitrary ID, that are
    #         # authorized for attestation.
    #         # clusters = {
    #             # "<arbitrary ID>" = {
    #                 # service_account_whitelist: A list of service account names,
    #                 # qualified by namespace (for example, "default:blog" or
    #                 # "production:web") to allow for node attestation. Attestation
    #                 # will be rejected for tokens bound to service accounts that
    #                 # aren't in the whitelist.
    #                 # service_account_whitelist = []

    #                 # use_token_review_api_validation: Specifies how the service
    #                 # account token is validated. If false, validation is done
    #                 # locally using the provided key. If true, validation is done
    #                 # using token review API. Default: false.
    #                 # use_token_review_api_validation = false

    #                 # service_account_key_file: It is only used if
    #                 # use_token_review_api_validation is set to false. Path on disk
    #                 # to a PEM encoded file containing public keys used in
    #                 # validating tokens for that cluster. RSA and ECDSA keys are
    #                 # supported. For RSA, X509 certificates, PKCS1, and PKIX encoded
    #                 # public keys are accepted. For ECDSA, X509 certificates, and
    #                 # PKIX encoded public keys are accepted.
    #                 # service_account_key_file = ""

    #                 # kube_config_file: It is only used if
    #                 # use_token_review_api_validation is set to true. Path to a k8s
    #                 # configuration file for API Server authentication. A kubernetes
    #                 # configuration file must be specified if SPIRE server runs
    #                 # outside of the k8s cluster. If empty, SPIRE server is assumed
    #                 # to be running inside the cluster and in-cluster configuration
    #                 # is used. Default: "".
    #                 # kube_config_file = ""
    #     }
    # }

    # NodeAttestor "sshpop": A node attestor which attests agent identity
    # using an existing ssh certificate.
    # NodeAttestor "sshpop" {
    #     plugin_data {
    #         # cert_authorities: A list of trusted CAs in ssh authorized_keys format.
    #         # cert_authorities = []

    #         # cert_authorities_path: A file that contains a list of trusted CAs in
    #         # ssh authorized_keys format.
    #         # cert_authorities_path = ""
    #     }
    # }

    # NodeAttestor "x509pop": A node attestor which attests agent identity
    # using an existing X.509 certificate.
    # NodeAttestor "x509pop" {
    #     plugin_data {
    #         # ca_bundle_path: The path to the trusted CA bundle on disk. The file
    #         # must contain one or more PEM blocks forming the set of trusted root
    #         # CA's for chain-of-trust verification.
    #         # ca_bundle_path = ""
    #     }
    # }

    # NodeResolver "aws_iid": A node resolver which extends the aws_iid node
    # attestor plugin to support selecting nodes based on additional properties
    # (such as Security Group ID).
    # NodeResolver "aws_iid" {
    #     plugin_data {
    #         # access_key_id: AWS access key id. Default: value of
    #         # AWS_ACCESS_KEY_ID environment variable.
    #         # access_key_id = ""

    #         # secret_access_key: AWS secret access key. Default: value of
    #         # AWS_SECRET_ACCESS_KEY environment variable.
    #         # secret_access_key = ""
    #     }
    # }

    # NodeResolver "azure_msi": A node resolver which extends the azure_msi
    # node attestor plugin to support selecting nodes based on additional
    # properties (such as Network Security Group).
    # NodeResolver "azure_msi" {
    #     plugin_data {
    #         # use_msi: Whether or not to use MSI to authenticate to Azure services.
    #         # If true, the tenants map must be empty. Default: false.
    #         # use_msi = false

    #         # tenants: A map of tenants, keyed by tenant ID. use_msi must be
    #         # false if this value is set.
    #         # tenants = {
    #             # "<tenant ID>" = {
    #                 # subscription_id: The subscription the tenant resides in.
    #                 # subscription_id = ""

    #                 # app_id: The application id.
    #                 # app_id = ""

    #                 # app_secret: The application secret.
    #                 # app_secret = ""
    #             # }
    #         # }
    #     }
    # }

    # NodeResolver "noop": It is mandatory to have at least one node resolver
    # plugin configured. This one is a no-op.
    NodeResolver "noop" {
        plugin_data {}
    }

    # Notifier "gcs_bundle": A notifier that pushes the latest trust bundle
    # contents into an object in Google Cloud Storage.
    # Notifier "gcs_bundle" {
    #     plugin_data {
    #         # bucket: The bucket containing the object.
    #         # bucket = ""

    #         # object_path: The path to the object within the bucket.
    #         # object_path = ""

    #         # service_account_file: Path to the service account credentials file.
    #         # service_account_file = ""
    #     }
    # }

    # Notifier "k8sbundle": A notifier that pushes the latest trust bundle
    # contents into a Kubernetes ConfigMap.
    # Notifier "k8sbundle" {
    #     plugin_data {
    #         # namespace: The namespace containing the ConfigMap. Default: spire.
    #         # namespace = "spire"

    #         # config_map: The name of the ConfigMap. Default: spire-bundle.
    #         # config_map = "spire-bundle"

    #         # config_map_key: The key within the ConfigMap for the bundle. Default: bundle.crt.
    #         # config_map_key = "bundle.crt"

    #         # kube_config_file_path: The path on disk to the kubeconfig
    #         # containing configuration to enable interaction with the
    #         # Kubernetes API server. If unset, it is assumed the notifier
    #         # is in-cluster and in-cluster credentials will be used.
    #         # kube_config_file_path = ""
    #     }
    # }

    # UpstreamAuthority "disk": Uses a CA loaded from disk to sign SPIRE server
    # intermediate certificates.
    UpstreamAuthority "disk" {
        plugin_data {
            # key_file_path: Path to the "upstream" CA key file. Key files must
            # contain a single PEM encoded key. The supported key types are EC
            # (ASN.1 or PKCS8 encoded) or RSA (PKCS1 or PKCS8 encoded).
            key_file_path = "./conf/server/dummy_upstream_ca.key"

            # cert_file_path: If SPIRE is using a self-signed CA, cert_file_path
            # should specify the path to a a single PEM encoded certificate
            # representing the upstream CA certificate. If not self-signed,
            # cert_file_path should specify the path to a file that must contain
            # one or more certificates necessary to establish a valid certificate
            # chain up the root certificates defined in bundle_file_path.
            cert_file_path = "./conf/server/dummy_upstream_ca.crt"

            # bundle_file_path: If SPIRE is using a self-signed CA, bundle_file_path
            # can be left unset. If not self-signed, then bundle_file_path should
            # be the path to a file that must contain one or more certificates
            # representing the upstream root certificates and the file at
            # cert_file_path contains one or more certificates necessary to chain up
            # the the root certificates in bundle_file_path (where the first
            # certificate in cert_file_path is the upstream CA certificate).
            # bundle_file_path = ""
        }
    }

    # UpstreamAuthority "aws_pca": Uses a Private Certificate Authority from
    # AWS Certificate Manager to sign SPIRE server intermediate certificates.
    # UpstreamAuthority "aws_pca" {
    #     plugin_data {
    #         # region: AWS Region to use.
    #         # region = ""

    #         # certificate_authority_arn: ARN of the "upstream" CA certificate.
    #         # certificate_authority_arn = ""

    #         # ca_signing_template_arn (Optional): ARN of the signing template
    #         # to use for the server's CA. Defaults to a signing template for
    #         # end-entity certificates only.
    #         # ca_signing_template_arn = ""


    #         # signing_algorithm (Optional): Signing algorithm to use for the
    #         # server's CA. Defaults to the CA's default.
    #         # signing_algorithm = ""

    #         # assume_role_arn (Optional): ARN of an IAM role to assume.
    #         # assume_role_arn = ""

    #         # endpoint (Optional): Endpoint as hostname or fully-qualified
    #         # URI that overrides the default endpoint.
    #         # endpoint = ""
    #     }
    # }

    # UpstreamAuthority "awssecret": Uses a CA loaded from AWS SecretsManager
    # to sign SPIRE server intermediate certificates.
    # UpstreamAuthority "awssecret" {
    #     plugin_data {
    #         # region: AWS Region that the AWS Secrets Manager is running in.
    #         # region = ""

    #         # cert_file_arn: ARN of the "upstream" CA certificate.
    #         # cert_file_arn = ""

    #         # key_file_arn: ARN of the "upstream" CA key file.
    #         # key_file_arn = ""

    #         # access_key_id: AWS access key ID.
    #         # access_key_id = ""

    #         # secret_access_key: AWS secret access key.
    #         # secret_access_key = ""

    #         # secret_token: AWS secret token.
    #         # secret_token = ""

    #         # assume_role_arn: ARN of role to assume.
    #         # assume_role_arn = ""
    #     }
    # }

    # UpstreamAuthority "vault": Uses a PKI Secret Engine from HashiCorp Vault
    # to sign SPIRE server intermediate certificates.
    # UpstreamAuthority "vault" {
    #     plugin_data {
    #         # vault_addr: The URL of the Vault server.
    #         # Default: ${VAULT_ADDR}.
    #         # vault_addr = ""

    #         # pki_mount_point: Name of the mount point where PKI secret engine is mounted.
    #         # Default: pki.
    #         # pki_mount_point = ""

    #         # ca_cert_path: Path to a CA certificate file used to verify
    #         # the Vault server certificate. Only PEM format is supported.
    #         # Default: ${VAULT_CACERT}.
    #         # ca_cert_path = ""

    #         # insecure_skip_verify: If true, vault client accepts any server certificates.
    #         # Default: false.
    #         # insecure_skip_verify = false

    #         # cert_auth: Configuration for the Client Certificate authentication method.
    #         # cert_auth {
    #             # cert_auth_mount_point: Name of the mount point
    #             # where TLS certificate auth method is mounted. Default: cert.
    #             # cert_auth_mount_point = ""

    #             # cert_auth_role_name: Name of the Vault role
    #             # If given, the plugin authenticates against only the named role.
    #             # Default to trying all roles.
    #             # cert_auth_role_name = ""

    #             # client_cert_path: Path to a client certificate file.
    #             # Only PEM format is supported. Default: ${VAULT_CLIENT_CERT}.
    #             # client_cert_path = ""

    #             # client_key_path: Path to a client private key file.
    #             # Only PEM format is supported. Default: ${VAULT_CLIENT_KEY}.
    #             # client_key_path  = ""
    #         # }

    #         # token_auth: Configuration for the Token authentication method.
    #         # token_auth {
    #             # token: Token string to set into "X-Vault-Token" header.
    #             # Default: ${VAULT_TOKEN}.
    #             # token = ""
    #         # }

    #         # approle_auth: Configuration for the AppRole authentication method.
    #         # approle_auth {
    #             # approle_auth_mount_point: Name of the mount point
    #             # where the AppRole auth method is mounted. Default: approle.
    #             # approle_auth_mount_point = ""

    #             # approle_id: An identifier of AppRole. Default: ${VAULT_APPROLE_ID}.
    #             # approle_id = ""

    #             # approle_secret_id: A credential of AppRole. Default: ${VAULT_APPROLE_SECRET_ID}.
    #             # approle_secret_id = ""
    #         # }
    #     }
    # }

    # UpstreamAuthority "spire": Uses an upstream SPIRE server in the same
    # trust domain to obtain intermediate signing certificates for SPIRE server.
    # UpstreamAuthority "spire" {
    #     plugin_data {
    #         # server_address: IP address or DNS name of the upstream SPIRE server
    #         # in the same trust domain.
    #         # server_address = ""

    #         # server_port: Port number of the upstream SPIRE server in the same
    #         # trust domain.
    #         # server_port = ""

    #         # workload_api_socket: Path to the workload API socket.
    #         # workload_api_socket = ""
    #     }
    # }
}

# telemetry: If telemetry is desired use this section to configure the
# available metrics collectors.
# telemetry {
#     Prometheus {
#         # host: Prometheus server host.
#         # host = ""

#         # port: Prometheus server port.
#         port = 9988
#     }

#     DogStatsd = [
#         # List of DogStatsd addresses.
#         { address = "localhost:8125" },
#         { address = "collector.example.org:1337" },
#     ]

#     Statsd = [
#         # List of Statsd addresses.
#         { address = "localhost:1337" },
#         { address = "collector.example.org:8125" },
#     ]

#     M3 = [
#         # List of M3 configurations.
#         { address = "localhost:9000" env = "dev" },
#         { address = "collector.example.org:9000" env = "prod" },
#     ]

#     InMem {
#         # enabled: Enable this collector. Default: true.
#         # enabled = true
#     }
# }

# health_checks: If health checking is desired use this section to configure
# and expose an additional server endpoint for such purpose.
# health_checks {
#     # listener_enabled: Enables health checks endpoint.
#     listener_enabled = true

#     # bind_address: IP address or DNS name of the health checks endpoint. Default: localhost.
#     # bind_address = "localhost"

#     # bind_port: HTTP Port number of the health checks endpoint. Default: 80.
#     # bind_port = "80"

#     # live_path: HTTP resource path for checking server liveness. Default: /live.
#     # live_path = "/live"

#     # ready_path: HTTP resource path for checking server readiness. Default: /ready.
#     # ready_path = "/ready"
# }
