// Code generated by MockGen. DO NOT EDIT.
// Source: attestation.go

package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/spiffe/spire/pkg/common"
	nodeattestor "github.com/spiffe/spire/pkg/server/nodeattestor"
)

// MockAttestation is a mock of Attestation interface
type MockAttestation struct {
	ctrl     *gomock.Controller
	recorder *MockAttestationMockRecorder
}

// MockAttestationMockRecorder is the mock recorder for MockAttestation
type MockAttestationMockRecorder struct {
	mock *MockAttestation
}

// NewMockAttestation creates a new mock instance
func NewMockAttestation(ctrl *gomock.Controller) *MockAttestation {
	mock := &MockAttestation{ctrl: ctrl}
	mock.recorder = &MockAttestationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAttestation) EXPECT() *MockAttestationMockRecorder {
	return _m.recorder
}

// IsAttested mocks base method
func (_m *MockAttestation) IsAttested(baseSpiffeID string) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsAttested", baseSpiffeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAttested indicates an expected call of IsAttested
func (_mr *MockAttestationMockRecorder) IsAttested(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsAttested", reflect.TypeOf((*MockAttestation)(nil).IsAttested), arg0)
}

// Attest mocks base method
func (_m *MockAttestation) Attest(attestedData *common.AttestedData, attestedBefore bool) (*nodeattestor.AttestResponse, error) {
	ret := _m.ctrl.Call(_m, "Attest", attestedData, attestedBefore)
	ret0, _ := ret[0].(*nodeattestor.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// attest indicates an expected call of attest
func (_mr *MockAttestationMockRecorder) Attest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Attest", reflect.TypeOf((*MockAttestation)(nil).Attest), arg0, arg1)
}

// CreateEntry mocks base method
func (_m *MockAttestation) CreateEntry(attestationType string, baseSpiffeID string, cert []byte) error {
	ret := _m.ctrl.Call(_m, "CreateEntry", attestationType, baseSpiffeID, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEntry indicates an expected call of CreateEntry
func (_mr *MockAttestationMockRecorder) CreateEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateEntry", reflect.TypeOf((*MockAttestation)(nil).CreateEntry), arg0, arg1, arg2)
}

// UpdateEntry mocks base method
func (_m *MockAttestation) UpdateEntry(baseSpiffeID string, cert []byte) error {
	ret := _m.ctrl.Call(_m, "UpdateEntry", baseSpiffeID, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntry indicates an expected call of UpdateEntry
func (_mr *MockAttestationMockRecorder) UpdateEntry(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "UpdateEntry", reflect.TypeOf((*MockAttestation)(nil).UpdateEntry), arg0, arg1)
}
