// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/services (interfaces: Registration)

package services

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/spiffe/spire/pkg/common"
	reflect "reflect"
)

// MockRegistration is a mock of Registration interface
type MockRegistration struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationMockRecorder
}

// MockRegistrationMockRecorder is the mock recorder for MockRegistration
type MockRegistrationMockRecorder struct {
	mock *MockRegistration
}

// NewMockRegistration creates a new mock instance
func NewMockRegistration(ctrl *gomock.Controller) *MockRegistration {
	mock := &MockRegistration{ctrl: ctrl}
	mock.recorder = &MockRegistrationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRegistration) EXPECT() *MockRegistrationMockRecorder {
	return _m.recorder
}

// CreateEntry mocks base method
func (_m *MockRegistration) CreateEntry(_param0 *common.RegistrationEntry) (string, error) {
	ret := _m.ctrl.Call(_m, "CreateEntry", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntry indicates an expected call of CreateEntry
func (_mr *MockRegistrationMockRecorder) CreateEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "CreateEntry", reflect.TypeOf((*MockRegistration)(nil).CreateEntry), arg0)
}

// FetchEntry mocks base method
func (_m *MockRegistration) FetchEntry(_param0 string) (*common.RegistrationEntry, error) {
	ret := _m.ctrl.Call(_m, "FetchEntry", _param0)
	ret0, _ := ret[0].(*common.RegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchEntry indicates an expected call of FetchEntry
func (_mr *MockRegistrationMockRecorder) FetchEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchEntry", reflect.TypeOf((*MockRegistration)(nil).FetchEntry), arg0)
}

// ListEntryByParentSpiffeID mocks base method
func (_m *MockRegistration) ListEntryByParentSpiffeID(_param0 string) ([]*common.RegistrationEntry, error) {
	ret := _m.ctrl.Call(_m, "ListEntryByParentSpiffeID", _param0)
	ret0, _ := ret[0].([]*common.RegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntryByParentSpiffeID indicates an expected call of ListEntryByParentSpiffeID
func (_mr *MockRegistrationMockRecorder) ListEntryByParentSpiffeID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListEntryByParentSpiffeID", reflect.TypeOf((*MockRegistration)(nil).ListEntryByParentSpiffeID), arg0)
}

// ListEntryBySelector mocks base method
func (_m *MockRegistration) ListEntryBySelector(_param0 *common.Selector) ([]*common.RegistrationEntry, error) {
	ret := _m.ctrl.Call(_m, "ListEntryBySelector", _param0)
	ret0, _ := ret[0].([]*common.RegistrationEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntryBySelector indicates an expected call of ListEntryBySelector
func (_mr *MockRegistrationMockRecorder) ListEntryBySelector(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ListEntryBySelector", reflect.TypeOf((*MockRegistration)(nil).ListEntryBySelector), arg0)
}
