// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration.proto

/*
Package control_plane_proto is a generated protocol buffer package.

It is generated from these files:
	registration.proto

It has these top-level messages:
	Empty
	Selector
	RegisteredEntry
	RegisteredEntries
	RegisteredEntryID
	ParentID
	SpiffeID
	UpdateEntryRequest
	FederatedBundle
	CreateFederatedBundleRequest
	ListFederatedBundlesReply
	FederatedSpiffeID
*/
package control_plane_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_api1 "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// http from public import google/api/annotations.proto
var E_Http = google_api1.E_Http

// *Represents an empty message
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *A type which describes the conditions under which a registration entry is matched.
type Selector struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Selector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Selector) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// *This is a curated record that the Control Plane uses to set up and manage the various registered nodes and workloads that are controlled by it.
type RegisteredEntry struct {
	Selectors   []*Selector `protobuf:"bytes,1,rep,name=selectors" json:"selectors,omitempty"`
	ParentId    string      `protobuf:"bytes,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	SpiffeId    string      `protobuf:"bytes,3,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	Ttl         int32       `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	FbSpiffeIds []string    `protobuf:"bytes,5,rep,name=fb_spiffe_ids,json=fbSpiffeIds" json:"fb_spiffe_ids,omitempty"`
}

func (m *RegisteredEntry) Reset()                    { *m = RegisteredEntry{} }
func (m *RegisteredEntry) String() string            { return proto.CompactTextString(m) }
func (*RegisteredEntry) ProtoMessage()               {}
func (*RegisteredEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisteredEntry) GetSelectors() []*Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *RegisteredEntry) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *RegisteredEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *RegisteredEntry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RegisteredEntry) GetFbSpiffeIds() []string {
	if m != nil {
		return m.FbSpiffeIds
	}
	return nil
}

// *A list of registered entries.
type RegisteredEntries struct {
	Entries []*RegisteredEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *RegisteredEntries) Reset()                    { *m = RegisteredEntries{} }
func (m *RegisteredEntries) String() string            { return proto.CompactTextString(m) }
func (*RegisteredEntries) ProtoMessage()               {}
func (*RegisteredEntries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisteredEntries) GetEntries() []*RegisteredEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// *A type that represents the id of an entry.
type RegisteredEntryID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RegisteredEntryID) Reset()                    { *m = RegisteredEntryID{} }
func (m *RegisteredEntryID) String() string            { return proto.CompactTextString(m) }
func (*RegisteredEntryID) ProtoMessage()               {}
func (*RegisteredEntryID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisteredEntryID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *A type that represents a parent Id.
type ParentID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ParentID) Reset()                    { *m = ParentID{} }
func (m *ParentID) String() string            { return proto.CompactTextString(m) }
func (*ParentID) ProtoMessage()               {}
func (*ParentID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ParentID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *A type that represents a SPIFFE Id.
type SpiffeID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *SpiffeID) Reset()                    { *m = SpiffeID{} }
func (m *SpiffeID) String() string            { return proto.CompactTextString(m) }
func (*SpiffeID) ProtoMessage()               {}
func (*SpiffeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SpiffeID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *A type with the id with want to update plus values to modify.
type UpdateEntryRequest struct {
	Id    string           `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Entry *RegisteredEntry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *UpdateEntryRequest) Reset()                    { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()               {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateEntryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEntryRequest) GetEntry() *RegisteredEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// *A CA bundle for a different Trust Domain than the one used and managed by the Control Plane.
type FederatedBundle struct {
	SpiffeId        string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	FederatedBundle []byte `protobuf:"bytes,2,opt,name=federated_bundle,json=federatedBundle,proto3" json:"federated_bundle,omitempty"`
	Ttl             int32  `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *FederatedBundle) Reset()                    { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string            { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()               {}
func (*FederatedBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FederatedBundle) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetFederatedBundle() []byte {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

func (m *FederatedBundle) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// *It represents a request with a FederatedBundle to create.
type CreateFederatedBundleRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federated_bundle,json=federatedBundle" json:"federated_bundle,omitempty"`
}

func (m *CreateFederatedBundleRequest) Reset()                    { *m = CreateFederatedBundleRequest{} }
func (m *CreateFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedBundleRequest) ProtoMessage()               {}
func (*CreateFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateFederatedBundleRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// *It represents a reply with a list of FederatedBundle.
type ListFederatedBundlesReply struct {
	Bundles []*FederatedBundle `protobuf:"bytes,1,rep,name=bundles" json:"bundles,omitempty"`
}

func (m *ListFederatedBundlesReply) Reset()                    { *m = ListFederatedBundlesReply{} }
func (m *ListFederatedBundlesReply) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedBundlesReply) ProtoMessage()               {}
func (*ListFederatedBundlesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListFederatedBundlesReply) GetBundles() []*FederatedBundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

// *A type that represents a Federated SPIFFE Id.
type FederatedSpiffeID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FederatedSpiffeID) Reset()                    { *m = FederatedSpiffeID{} }
func (m *FederatedSpiffeID) String() string            { return proto.CompactTextString(m) }
func (*FederatedSpiffeID) ProtoMessage()               {}
func (*FederatedSpiffeID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FederatedSpiffeID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "control_plane_proto.Empty")
	proto.RegisterType((*Selector)(nil), "control_plane_proto.Selector")
	proto.RegisterType((*RegisteredEntry)(nil), "control_plane_proto.RegisteredEntry")
	proto.RegisterType((*RegisteredEntries)(nil), "control_plane_proto.RegisteredEntries")
	proto.RegisterType((*RegisteredEntryID)(nil), "control_plane_proto.RegisteredEntryID")
	proto.RegisterType((*ParentID)(nil), "control_plane_proto.ParentID")
	proto.RegisterType((*SpiffeID)(nil), "control_plane_proto.SpiffeID")
	proto.RegisterType((*UpdateEntryRequest)(nil), "control_plane_proto.UpdateEntryRequest")
	proto.RegisterType((*FederatedBundle)(nil), "control_plane_proto.FederatedBundle")
	proto.RegisterType((*CreateFederatedBundleRequest)(nil), "control_plane_proto.CreateFederatedBundleRequest")
	proto.RegisterType((*ListFederatedBundlesReply)(nil), "control_plane_proto.ListFederatedBundlesReply")
	proto.RegisterType((*FederatedSpiffeID)(nil), "control_plane_proto.FederatedSpiffeID")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registration service

type RegistrationClient interface {
	// /Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(ctx context.Context, in *RegisteredEntry, opts ...grpc.CallOption) (*RegisteredEntryID, error)
	// /Deletes an entry and returns the deleted entry.
	DeleteEntry(ctx context.Context, in *RegisteredEntryID, opts ...grpc.CallOption) (*RegisteredEntry, error)
	// /Retrieve a specific registered entry.
	FetchEntry(ctx context.Context, in *RegisteredEntryID, opts ...grpc.CallOption) (*RegisteredEntry, error)
	// /Updates a specific registered entry.
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*RegisteredEntry, error)
	// /Returns all the Entries associated with the ParentID value.
	ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*RegisteredEntries, error)
	// /Returns all the entries associated with a selector value.
	ListBySelector(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*RegisteredEntries, error)
	// /Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*RegisteredEntries, error)
	// /Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(ctx context.Context, in *CreateFederatedBundleRequest, opts ...grpc.CallOption) (*Empty, error)
	// /Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFederatedBundlesReply, error)
	// /Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*Empty, error)
	// /Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(ctx context.Context, in *FederatedSpiffeID, opts ...grpc.CallOption) (*Empty, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateEntry(ctx context.Context, in *RegisteredEntry, opts ...grpc.CallOption) (*RegisteredEntryID, error) {
	out := new(RegisteredEntryID)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/CreateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteEntry(ctx context.Context, in *RegisteredEntryID, opts ...grpc.CallOption) (*RegisteredEntry, error) {
	out := new(RegisteredEntry)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/DeleteEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntry(ctx context.Context, in *RegisteredEntryID, opts ...grpc.CallOption) (*RegisteredEntry, error) {
	out := new(RegisteredEntry)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/FetchEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*RegisteredEntry, error) {
	out := new(RegisteredEntry)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*RegisteredEntries, error) {
	out := new(RegisteredEntries)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/ListByParentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelector(ctx context.Context, in *Selector, opts ...grpc.CallOption) (*RegisteredEntries, error) {
	out := new(RegisteredEntries)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/ListBySelector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*RegisteredEntries, error) {
	out := new(RegisteredEntries)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/ListBySpiffeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *CreateFederatedBundleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/CreateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFederatedBundlesReply, error) {
	out := new(ListFederatedBundlesReply)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/ListFederatedBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/UpdateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteFederatedBundle(ctx context.Context, in *FederatedSpiffeID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/control_plane_proto.Registration/DeleteFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registration service

type RegistrationServer interface {
	// /Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(context.Context, *RegisteredEntry) (*RegisteredEntryID, error)
	// /Deletes an entry and returns the deleted entry.
	DeleteEntry(context.Context, *RegisteredEntryID) (*RegisteredEntry, error)
	// /Retrieve a specific registered entry.
	FetchEntry(context.Context, *RegisteredEntryID) (*RegisteredEntry, error)
	// /Updates a specific registered entry.
	UpdateEntry(context.Context, *UpdateEntryRequest) (*RegisteredEntry, error)
	// /Returns all the Entries associated with the ParentID value.
	ListByParentID(context.Context, *ParentID) (*RegisteredEntries, error)
	// /Returns all the entries associated with a selector value.
	ListBySelector(context.Context, *Selector) (*RegisteredEntries, error)
	// /Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(context.Context, *SpiffeID) (*RegisteredEntries, error)
	// /Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(context.Context, *CreateFederatedBundleRequest) (*Empty, error)
	// /Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(context.Context, *Empty) (*ListFederatedBundlesReply, error)
	// /Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(context.Context, *FederatedBundle) (*Empty, error)
	// /Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(context.Context, *FederatedSpiffeID) (*Empty, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntry(ctx, req.(*RegisteredEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteEntry(ctx, req.(*RegisteredEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/FetchEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntry(ctx, req.(*RegisteredEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/ListByParentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListByParentID(ctx, req.(*ParentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/ListBySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelector(ctx, req.(*Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySpiffeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpiffeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/ListBySpiffeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, req.(*SpiffeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*CreateFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/ListFederatedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/UpdateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedSpiffeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.Registration/DeleteFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, req.(*FederatedSpiffeID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "control_plane_proto.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _Registration_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Registration_DeleteEntry_Handler,
		},
		{
			MethodName: "FetchEntry",
			Handler:    _Registration_FetchEntry_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Registration_UpdateEntry_Handler,
		},
		{
			MethodName: "ListByParentID",
			Handler:    _Registration_ListByParentID_Handler,
		},
		{
			MethodName: "ListBySelector",
			Handler:    _Registration_ListBySelector_Handler,
		},
		{
			MethodName: "ListBySpiffeID",
			Handler:    _Registration_ListBySpiffeID_Handler,
		},
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
		{
			MethodName: "ListFederatedBundles",
			Handler:    _Registration_ListFederatedBundles_Handler,
		},
		{
			MethodName: "UpdateFederatedBundle",
			Handler:    _Registration_UpdateFederatedBundle_Handler,
		},
		{
			MethodName: "DeleteFederatedBundle",
			Handler:    _Registration_DeleteFederatedBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0x9d, 0x34, 0x6d, 0x32, 0x6e, 0x9b, 0x76, 0xdb, 0x48, 0xf9, 0x4d, 0x91, 0xa2, 0x05,
	0x95, 0xd0, 0x43, 0x22, 0x0a, 0xa7, 0x22, 0x71, 0x28, 0x69, 0xa5, 0x48, 0x48, 0x54, 0x8e, 0x10,
	0x42, 0x3d, 0x04, 0x27, 0x1e, 0x07, 0xab, 0xc6, 0x36, 0xf6, 0x06, 0xc9, 0x42, 0x5c, 0x78, 0x05,
	0xde, 0x87, 0x97, 0xe0, 0xc4, 0x9d, 0x07, 0x41, 0xde, 0xb5, 0x4d, 0xbb, 0xdd, 0x58, 0x06, 0x89,
	0xdb, 0x7a, 0x67, 0xe7, 0xfb, 0xbe, 0xd9, 0x6f, 0x67, 0x0c, 0x24, 0xc2, 0x85, 0x1b, 0xb3, 0xc8,
	0x62, 0x6e, 0xe0, 0x0f, 0xc2, 0x28, 0x60, 0x01, 0xd9, 0x9b, 0x07, 0x3e, 0x8b, 0x02, 0x6f, 0x1a,
	0x7a, 0x96, 0x8f, 0x53, 0xbe, 0x69, 0x1c, 0x2c, 0x82, 0x60, 0xe1, 0xe1, 0xd0, 0x0a, 0xdd, 0xa1,
	0xe5, 0xfb, 0x01, 0xe3, 0x19, 0xb1, 0x48, 0xa1, 0x1b, 0xd0, 0x38, 0x7b, 0x1f, 0xb2, 0x84, 0x3e,
	0x81, 0xe6, 0x04, 0x3d, 0x9c, 0xb3, 0x20, 0x22, 0x04, 0xd6, 0x58, 0x12, 0x62, 0x57, 0xeb, 0x69,
	0xfd, 0x96, 0xc9, 0xd7, 0x64, 0x1f, 0x1a, 0x1f, 0x2d, 0x6f, 0x89, 0xdd, 0x1a, 0xdf, 0x14, 0x1f,
	0xf4, 0x9b, 0x06, 0x6d, 0x93, 0x0b, 0xc1, 0x08, 0xed, 0x33, 0x9f, 0x45, 0x09, 0x79, 0x0a, 0xad,
	0x38, 0x43, 0x8a, 0xbb, 0x5a, 0xaf, 0xde, 0xd7, 0x8f, 0xef, 0x0e, 0x14, 0xca, 0x06, 0x39, 0x9f,
	0xf9, 0xfb, 0x3c, 0xb9, 0x03, 0xad, 0xd0, 0x8a, 0xd0, 0x67, 0x53, 0xd7, 0xce, 0xa8, 0x9a, 0x62,
	0x63, 0x6c, 0xa7, 0xc1, 0x38, 0x74, 0x1d, 0x07, 0xd3, 0x60, 0x5d, 0x04, 0xc5, 0xc6, 0xd8, 0x26,
	0x3b, 0x50, 0x67, 0xcc, 0xeb, 0xae, 0xf5, 0xb4, 0x7e, 0xc3, 0x4c, 0x97, 0x84, 0xc2, 0x96, 0x33,
	0x9b, 0x16, 0x19, 0x71, 0xb7, 0xd1, 0xab, 0xf7, 0x5b, 0xa6, 0xee, 0xcc, 0x26, 0x59, 0x52, 0x4c,
	0x27, 0xb0, 0x7b, 0x53, 0xbf, 0x8b, 0x31, 0x79, 0x06, 0x1b, 0x28, 0x96, 0x99, 0xfe, 0xfb, 0x4a,
	0xfd, 0x52, 0xe1, 0x66, 0x9e, 0x44, 0xef, 0xc9, 0xa0, 0xc9, 0x78, 0x44, 0xb6, 0xa1, 0xe6, 0xda,
	0xd9, 0x95, 0xd6, 0x5c, 0x9b, 0x1a, 0xd0, 0xbc, 0x10, 0x85, 0x29, 0x63, 0x99, 0xc4, 0xdb, 0xb1,
	0xb7, 0x40, 0x5e, 0x85, 0xb6, 0xc5, 0x50, 0x90, 0xe2, 0x87, 0x25, 0xc6, 0x4c, 0x3e, 0x45, 0x4e,
	0xa0, 0x91, 0xaa, 0x49, 0xf8, 0x1d, 0x56, 0x2d, 0x40, 0xa4, 0xd0, 0x2b, 0x68, 0x9f, 0xa3, 0x8d,
	0x91, 0xc5, 0xd0, 0x3e, 0x5d, 0xfa, 0xb6, 0x87, 0x37, 0x6f, 0x5e, 0x93, 0x6e, 0xfe, 0x21, 0xec,
	0x38, 0xf9, 0xf9, 0xe9, 0x8c, 0x27, 0x70, 0xda, 0x4d, 0xb3, 0xed, 0x48, 0x38, 0x99, 0x49, 0xf5,
	0xc2, 0x24, 0x1a, 0xc0, 0xc1, 0xf3, 0x08, 0x2d, 0x86, 0x12, 0x65, 0x5e, 0xd8, 0x4b, 0x05, 0xb8,
	0x56, 0x52, 0x93, 0x0c, 0x23, 0x4b, 0xa0, 0x97, 0xf0, 0xff, 0x0b, 0x37, 0x66, 0xd2, 0xb9, 0xd8,
	0xc4, 0xd0, 0x4b, 0x52, 0xe7, 0x05, 0x47, 0xb9, 0xf3, 0x32, 0x49, 0x9e, 0x94, 0x3a, 0x5f, 0xc4,
	0x56, 0x39, 0x78, 0xfc, 0xa3, 0x09, 0x9b, 0xe6, 0xb5, 0xee, 0x25, 0x3e, 0xe8, 0xe2, 0x0e, 0x44,
	0x03, 0x55, 0x32, 0xcb, 0x38, 0xac, 0x72, 0x6a, 0x3c, 0xa2, 0xbb, 0x5f, 0xbe, 0xff, 0xfc, 0x5a,
	0xd3, 0xe9, 0xfa, 0x90, 0xbb, 0x7b, 0xa2, 0x1d, 0x91, 0x2b, 0xd0, 0x47, 0xe8, 0x61, 0xce, 0x57,
	0x11, 0xc9, 0xa8, 0xa4, 0x8b, 0x6e, 0x73, 0xbe, 0xe6, 0x51, 0xc6, 0x47, 0x02, 0x80, 0x73, 0x64,
	0xf3, 0x77, 0xff, 0x82, 0x6b, 0x8f, 0x73, 0x6d, 0x11, 0x5d, 0x70, 0x0d, 0x3f, 0xb9, 0xf6, 0x67,
	0xe2, 0x81, 0x7e, 0xad, 0x41, 0xc8, 0x03, 0x25, 0xd2, 0xed, 0x16, 0xfa, 0xb3, 0xf2, 0x8c, 0xbc,
	0xbc, 0xd7, 0xb0, 0x9d, 0x3e, 0xa7, 0xd3, 0xa4, 0x68, 0x66, 0xf5, 0xb0, 0xcb, 0xc3, 0x95, 0x7c,
	0x4b, 0x87, 0x50, 0x01, 0x5c, 0x8c, 0xe5, 0xf2, 0x29, 0xfa, 0x17, 0xc0, 0xf9, 0x03, 0x5d, 0x01,
	0x9c, 0x85, 0x2b, 0x03, 0x3b, 0xd0, 0x51, 0xb6, 0x32, 0x79, 0xa4, 0x04, 0x28, 0x6b, 0x7b, 0xc3,
	0x50, 0xa6, 0xf0, 0x5f, 0x15, 0x99, 0xc1, 0xbe, 0xaa, 0x83, 0x49, 0x49, 0x8e, 0x31, 0x50, 0xc6,
	0x56, 0x0f, 0x82, 0x37, 0xd0, 0x11, 0x4f, 0x44, 0xae, 0xa5, 0xd2, 0x40, 0x28, 0x95, 0x7f, 0x09,
	0x1d, 0xd1, 0x7d, 0x32, 0xf4, 0x61, 0x39, 0x74, 0xe1, 0x47, 0x09, 0xf8, 0xc5, 0x7f, 0xb3, 0x75,
	0xfe, 0xf9, 0xf8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0xb5, 0x3b, 0x7d, 0x21, 0x08, 0x00,
	0x00,
}