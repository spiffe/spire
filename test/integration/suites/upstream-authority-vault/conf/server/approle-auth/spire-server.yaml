apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      trust_domain = "example.org"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      default_x509_svid_ttl = "1h"
      ca_ttl = "12h"
      ca_subject {
        country = ["US"]
        organization = ["SPIFFE"]
        common_name = ""
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            "example-cluster" = {
              service_account_allow_list = ["spire:spire-agent"]
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }
    
      UpstreamAuthority "vault" {
        plugin_data {
          vault_addr="https://vault.vault.svc:8200/"
          ca_cert_path="/run/spire/vault/vault_ca.pem"
          pki_mount_point="pki_int"
          approle_auth {}
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          # This plugin updates the bundle.crt value in the spire:spire-bundle
          # ConfigMap by default, so no additional configuration is necessary.
        }
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }

---

# This is the Deployment for the SPIRE server. It waits for SPIRE database to
# initialize and uses the SPIRE healthcheck command for liveness/readiness
# probes.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spire-server
  namespace: spire
  labels:
    app: spire-server
spec:
  template:
    spec:
      containers:
        - name: spire-server
          env:
            - name: VAULT_APPROLE_ID
              valueFrom:
                secretKeyRef:
                  name: vault-credential
                  key: approle_id
            - name: VAULT_APPROLE_SECRET_ID
              valueFrom:
                secretKeyRef:
                  name: vault-credential
                  key: secret_id
