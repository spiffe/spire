// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/server/ca (interfaces: ServerCA)

// Package mock_ca is a generated GoMock package.
package mock_ca

import (
	context "context"
	x509 "crypto/x509"
	gomock "github.com/golang/mock/gomock"
	node "github.com/spiffe/spire/proto/spire/api/node"
	reflect "reflect"
	time "time"
)

// MockServerCA is a mock of ServerCA interface
type MockServerCA struct {
	ctrl     *gomock.Controller
	recorder *MockServerCAMockRecorder
}

// MockServerCAMockRecorder is the mock recorder for MockServerCA
type MockServerCAMockRecorder struct {
	mock *MockServerCA
}

// NewMockServerCA creates a new mock instance
func NewMockServerCA(ctrl *gomock.Controller) *MockServerCA {
	mock := &MockServerCA{ctrl: ctrl}
	mock.recorder = &MockServerCAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerCA) EXPECT() *MockServerCAMockRecorder {
	return m.recorder
}

// SignJWTSVID mocks base method
func (m *MockServerCA) SignJWTSVID(arg0 context.Context, arg1 *node.JSR) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignJWTSVID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJWTSVID indicates an expected call of SignJWTSVID
func (mr *MockServerCAMockRecorder) SignJWTSVID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJWTSVID", reflect.TypeOf((*MockServerCA)(nil).SignJWTSVID), arg0, arg1)
}

// SignX509CASVID mocks base method
func (m *MockServerCA) SignX509CASVID(arg0 context.Context, arg1 []byte, arg2 time.Duration) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignX509CASVID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignX509CASVID indicates an expected call of SignX509CASVID
func (mr *MockServerCAMockRecorder) SignX509CASVID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignX509CASVID", reflect.TypeOf((*MockServerCA)(nil).SignX509CASVID), arg0, arg1, arg2)
}

// SignX509SVID mocks base method
func (m *MockServerCA) SignX509SVID(arg0 context.Context, arg1 []byte, arg2 time.Duration) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignX509SVID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignX509SVID indicates an expected call of SignX509SVID
func (mr *MockServerCAMockRecorder) SignX509SVID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignX509SVID", reflect.TypeOf((*MockServerCA)(nil).SignX509SVID), arg0, arg1, arg2)
}
