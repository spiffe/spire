// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/agent/manager (interfaces: Manager)

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	gomock "github.com/golang/mock/gomock"
	go_observer "github.com/imkira/go-observer"
	cache "github.com/spiffe/spire/pkg/agent/manager/cache"
	common "github.com/spiffe/spire/proto/common"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// BundleSubscribe mocks base method
func (m *MockManager) BundleSubscribe() go_observer.Stream {
	ret := m.ctrl.Call(m, "BundleSubscribe")
	ret0, _ := ret[0].(go_observer.Stream)
	return ret0
}

// BundleSubscribe indicates an expected call of BundleSubscribe
func (mr *MockManagerMockRecorder) BundleSubscribe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BundleSubscribe", reflect.TypeOf((*MockManager)(nil).BundleSubscribe))
}

// Err mocks base method
func (m *MockManager) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockManagerMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockManager)(nil).Err))
}

// MatchingEntries mocks base method
func (m *MockManager) MatchingEntries(arg0 []*common.Selector) []*cache.Entry {
	ret := m.ctrl.Call(m, "MatchingEntries", arg0)
	ret0, _ := ret[0].([]*cache.Entry)
	return ret0
}

// MatchingEntries indicates an expected call of MatchingEntries
func (mr *MockManagerMockRecorder) MatchingEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchingEntries", reflect.TypeOf((*MockManager)(nil).MatchingEntries), arg0)
}

// NewSubscriber mocks base method
func (m *MockManager) NewSubscriber(arg0 cache.Selectors) cache.Subscriber {
	ret := m.ctrl.Call(m, "NewSubscriber", arg0)
	ret0, _ := ret[0].(cache.Subscriber)
	return ret0
}

// NewSubscriber indicates an expected call of NewSubscriber
func (mr *MockManagerMockRecorder) NewSubscriber(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSubscriber", reflect.TypeOf((*MockManager)(nil).NewSubscriber), arg0)
}

// SVIDSubscribe mocks base method
func (m *MockManager) SVIDSubscribe() go_observer.Stream {
	ret := m.ctrl.Call(m, "SVIDSubscribe")
	ret0, _ := ret[0].(go_observer.Stream)
	return ret0
}

// SVIDSubscribe indicates an expected call of SVIDSubscribe
func (mr *MockManagerMockRecorder) SVIDSubscribe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SVIDSubscribe", reflect.TypeOf((*MockManager)(nil).SVIDSubscribe))
}

// Shutdown mocks base method
func (m *MockManager) Shutdown() {
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockManagerMockRecorder) Shutdown() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockManager)(nil).Shutdown))
}

// Start mocks base method
func (m *MockManager) Start() error {
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockManagerMockRecorder) Start() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start))
}

// Stopped mocks base method
func (m *MockManager) Stopped() <-chan struct{} {
	ret := m.ctrl.Call(m, "Stopped")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Stopped indicates an expected call of Stopped
func (mr *MockManagerMockRecorder) Stopped() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stopped", reflect.TypeOf((*MockManager)(nil).Stopped))
}
