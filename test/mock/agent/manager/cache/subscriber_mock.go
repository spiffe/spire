// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/agent/manager/cache (interfaces: Subscriber)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	gomock "github.com/golang/mock/gomock"
	cache "github.com/spiffe/spire/pkg/agent/manager/cache"
	reflect "reflect"
)

// MockSubscriber is a mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Finish mocks base method
func (m *MockSubscriber) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish
func (mr *MockSubscriberMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockSubscriber)(nil).Finish))
}

// Updates mocks base method
func (m *MockSubscriber) Updates() <-chan *cache.WorkloadUpdate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates")
	ret0, _ := ret[0].(<-chan *cache.WorkloadUpdate)
	return ret0
}

// Updates indicates an expected call of Updates
func (mr *MockSubscriberMockRecorder) Updates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockSubscriber)(nil).Updates))
}
