// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/agent/manager/cache (interfaces: Cache)

package mock_cache

import (
	gomock "github.com/golang/mock/gomock"
	cache "github.com/spiffe/spire/pkg/agent/manager/cache"
	common "github.com/spiffe/spire/proto/common"
	reflect "reflect"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCache) EXPECT() *MockCacheMockRecorder {
	return _m.recorder
}

// DeleteEntries mocks base method
func (_m *MockCache) DeleteEntries(_param0 *common.RegistrationEntry) int {
	ret := _m.ctrl.Call(_m, "DeleteEntries", _param0)
	ret0, _ := ret[0].(int)
	return ret0
}

// DeleteEntries indicates an expected call of DeleteEntries
func (_mr *MockCacheMockRecorder) DeleteEntries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteEntries", reflect.TypeOf((*MockCache)(nil).DeleteEntries), arg0)
}

// DeleteEntry mocks base method
func (_m *MockCache) DeleteEntry(_param0 *common.RegistrationEntry) bool {
	ret := _m.ctrl.Call(_m, "DeleteEntry", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry
func (_mr *MockCacheMockRecorder) DeleteEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "DeleteEntry", reflect.TypeOf((*MockCache)(nil).DeleteEntry), arg0)
}

// Entries mocks base method
func (_m *MockCache) Entries() chan cache.Entry {
	ret := _m.ctrl.Call(_m, "Entries")
	ret0, _ := ret[0].(chan cache.Entry)
	return ret0
}

// Entries indicates an expected call of Entries
func (_mr *MockCacheMockRecorder) Entries() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Entries", reflect.TypeOf((*MockCache)(nil).Entries))
}

// Entry mocks base method
func (_m *MockCache) Entry(_param0 *common.RegistrationEntry) *cache.Entry {
	ret := _m.ctrl.Call(_m, "Entry", _param0)
	ret0, _ := ret[0].(*cache.Entry)
	return ret0
}

// Entry indicates an expected call of Entry
func (_mr *MockCacheMockRecorder) Entry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Entry", reflect.TypeOf((*MockCache)(nil).Entry), arg0)
}

// IsEmpty mocks base method
func (_m *MockCache) IsEmpty() bool {
	ret := _m.ctrl.Call(_m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (_mr *MockCacheMockRecorder) IsEmpty() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IsEmpty", reflect.TypeOf((*MockCache)(nil).IsEmpty))
}

// SetEntry mocks base method
func (_m *MockCache) SetEntry(_param0 *cache.Entry) {
	_m.ctrl.Call(_m, "SetEntry", _param0)
}

// SetEntry indicates an expected call of SetEntry
func (_mr *MockCacheMockRecorder) SetEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEntry", reflect.TypeOf((*MockCache)(nil).SetEntry), arg0)
}
