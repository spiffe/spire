// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/agent/manager/cache (interfaces: Cache)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	x509 "crypto/x509"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_observer "github.com/imkira/go-observer"
	cache "github.com/spiffe/spire/pkg/agent/manager/cache"
	common "github.com/spiffe/spire/proto/common"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Bundle mocks base method
func (m *MockCache) Bundle() []*x509.Certificate {
	ret := m.ctrl.Call(m, "Bundle")
	ret0, _ := ret[0].([]*x509.Certificate)
	return ret0
}

// Bundle indicates an expected call of Bundle
func (mr *MockCacheMockRecorder) Bundle() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bundle", reflect.TypeOf((*MockCache)(nil).Bundle))
}

// DeleteEntry mocks base method
func (m *MockCache) DeleteEntry(arg0 *common.RegistrationEntry) bool {
	ret := m.ctrl.Call(m, "DeleteEntry", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry
func (mr *MockCacheMockRecorder) DeleteEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockCache)(nil).DeleteEntry), arg0)
}

// Entries mocks base method
func (m *MockCache) Entries() []*cache.Entry {
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].([]*cache.Entry)
	return ret0
}

// Entries indicates an expected call of Entries
func (mr *MockCacheMockRecorder) Entries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockCache)(nil).Entries))
}

// Entry mocks base method
func (m *MockCache) Entry(arg0 *common.RegistrationEntry) *cache.Entry {
	ret := m.ctrl.Call(m, "Entry", arg0)
	ret0, _ := ret[0].(*cache.Entry)
	return ret0
}

// Entry indicates an expected call of Entry
func (mr *MockCacheMockRecorder) Entry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockCache)(nil).Entry), arg0)
}

// IsEmpty mocks base method
func (m *MockCache) IsEmpty() bool {
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockCacheMockRecorder) IsEmpty() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockCache)(nil).IsEmpty))
}

// SetBundle mocks base method
func (m *MockCache) SetBundle(arg0 []*x509.Certificate) {
	m.ctrl.Call(m, "SetBundle", arg0)
}

// SetBundle indicates an expected call of SetBundle
func (mr *MockCacheMockRecorder) SetBundle(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBundle", reflect.TypeOf((*MockCache)(nil).SetBundle), arg0)
}

// SetEntry mocks base method
func (m *MockCache) SetEntry(arg0 *cache.Entry) {
	m.ctrl.Call(m, "SetEntry", arg0)
}

// SetEntry indicates an expected call of SetEntry
func (mr *MockCacheMockRecorder) SetEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntry", reflect.TypeOf((*MockCache)(nil).SetEntry), arg0)
}

// Subscribe mocks base method
func (m *MockCache) Subscribe(arg0 cache.Selectors) cache.Subscriber {
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(cache.Subscriber)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockCacheMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCache)(nil).Subscribe), arg0)
}

// SubscribeToBundleChanges mocks base method
func (m *MockCache) SubscribeToBundleChanges() go_observer.Stream {
	ret := m.ctrl.Call(m, "SubscribeToBundleChanges")
	ret0, _ := ret[0].(go_observer.Stream)
	return ret0
}

// SubscribeToBundleChanges indicates an expected call of SubscribeToBundleChanges
func (mr *MockCacheMockRecorder) SubscribeToBundleChanges() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToBundleChanges", reflect.TypeOf((*MockCache)(nil).SubscribeToBundleChanges))
}
