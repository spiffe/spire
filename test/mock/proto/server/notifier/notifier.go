// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/spire/server/notifier (interfaces: Notifier,Plugin)

// Package mock_notifier is a generated GoMock package.
package mock_notifier

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	notifier "github.com/spiffe/spire/proto/spire/server/notifier"
	reflect "reflect"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Notify mocks base method
func (m *MockNotifier) Notify(arg0 context.Context, arg1 *notifier.NotifyRequest) (*notifier.NotifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(*notifier.NotifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify
func (mr *MockNotifierMockRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotifier)(nil).Notify), arg0, arg1)
}

// NotifyAndAdvise mocks base method
func (m *MockNotifier) NotifyAndAdvise(arg0 context.Context, arg1 *notifier.NotifyAndAdviseRequest) (*notifier.NotifyAndAdviseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAndAdvise", arg0, arg1)
	ret0, _ := ret[0].(*notifier.NotifyAndAdviseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyAndAdvise indicates an expected call of NotifyAndAdvise
func (mr *MockNotifierMockRecorder) NotifyAndAdvise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAndAdvise", reflect.TypeOf((*MockNotifier)(nil).NotifyAndAdvise), arg0, arg1)
}

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockPlugin) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockPluginMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockPlugin)(nil).Configure), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockPlugin) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockPluginMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockPlugin)(nil).GetPluginInfo), arg0, arg1)
}

// Notify mocks base method
func (m *MockPlugin) Notify(arg0 context.Context, arg1 *notifier.NotifyRequest) (*notifier.NotifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0, arg1)
	ret0, _ := ret[0].(*notifier.NotifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify
func (mr *MockPluginMockRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockPlugin)(nil).Notify), arg0, arg1)
}

// NotifyAndAdvise mocks base method
func (m *MockPlugin) NotifyAndAdvise(arg0 context.Context, arg1 *notifier.NotifyAndAdviseRequest) (*notifier.NotifyAndAdviseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAndAdvise", arg0, arg1)
	ret0, _ := ret[0].(*notifier.NotifyAndAdviseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyAndAdvise indicates an expected call of NotifyAndAdvise
func (mr *MockPluginMockRecorder) NotifyAndAdvise(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAndAdvise", reflect.TypeOf((*MockPlugin)(nil).NotifyAndAdvise), arg0, arg1)
}
