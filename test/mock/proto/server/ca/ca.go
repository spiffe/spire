// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/server/ca (interfaces: ServerCA,Plugin)

// Package mock_ca is a generated GoMock package.
package mock_ca

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	ca "github.com/spiffe/spire/proto/server/ca"
	reflect "reflect"
)

// MockServerCA is a mock of ServerCA interface
type MockServerCA struct {
	ctrl     *gomock.Controller
	recorder *MockServerCAMockRecorder
}

// MockServerCAMockRecorder is the mock recorder for MockServerCA
type MockServerCAMockRecorder struct {
	mock *MockServerCA
}

// NewMockServerCA creates a new mock instance
func NewMockServerCA(ctrl *gomock.Controller) *MockServerCA {
	mock := &MockServerCA{ctrl: ctrl}
	mock.recorder = &MockServerCAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerCA) EXPECT() *MockServerCAMockRecorder {
	return m.recorder
}

// GenerateCsr mocks base method
func (m *MockServerCA) GenerateCsr(arg0 context.Context, arg1 *ca.GenerateCsrRequest) (*ca.GenerateCsrResponse, error) {
	ret := m.ctrl.Call(m, "GenerateCsr", arg0, arg1)
	ret0, _ := ret[0].(*ca.GenerateCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCsr indicates an expected call of GenerateCsr
func (mr *MockServerCAMockRecorder) GenerateCsr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCsr", reflect.TypeOf((*MockServerCA)(nil).GenerateCsr), arg0, arg1)
}

// LoadCertificate mocks base method
func (m *MockServerCA) LoadCertificate(arg0 context.Context, arg1 *ca.LoadCertificateRequest) (*ca.LoadCertificateResponse, error) {
	ret := m.ctrl.Call(m, "LoadCertificate", arg0, arg1)
	ret0, _ := ret[0].(*ca.LoadCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCertificate indicates an expected call of LoadCertificate
func (mr *MockServerCAMockRecorder) LoadCertificate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCertificate", reflect.TypeOf((*MockServerCA)(nil).LoadCertificate), arg0, arg1)
}

// SignJwtSvid mocks base method
func (m *MockServerCA) SignJwtSvid(arg0 context.Context, arg1 *ca.SignJwtSvidRequest) (*ca.SignJwtSvidResponse, error) {
	ret := m.ctrl.Call(m, "SignJwtSvid", arg0, arg1)
	ret0, _ := ret[0].(*ca.SignJwtSvidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJwtSvid indicates an expected call of SignJwtSvid
func (mr *MockServerCAMockRecorder) SignJwtSvid(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJwtSvid", reflect.TypeOf((*MockServerCA)(nil).SignJwtSvid), arg0, arg1)
}

// SignX509SvidCsr mocks base method
func (m *MockServerCA) SignX509SvidCsr(arg0 context.Context, arg1 *ca.SignX509SvidCsrRequest) (*ca.SignX509SvidCsrResponse, error) {
	ret := m.ctrl.Call(m, "SignX509SvidCsr", arg0, arg1)
	ret0, _ := ret[0].(*ca.SignX509SvidCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignX509SvidCsr indicates an expected call of SignX509SvidCsr
func (mr *MockServerCAMockRecorder) SignX509SvidCsr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignX509SvidCsr", reflect.TypeOf((*MockServerCA)(nil).SignX509SvidCsr), arg0, arg1)
}

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockPlugin) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockPluginMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockPlugin)(nil).Configure), arg0, arg1)
}

// GenerateCsr mocks base method
func (m *MockPlugin) GenerateCsr(arg0 context.Context, arg1 *ca.GenerateCsrRequest) (*ca.GenerateCsrResponse, error) {
	ret := m.ctrl.Call(m, "GenerateCsr", arg0, arg1)
	ret0, _ := ret[0].(*ca.GenerateCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCsr indicates an expected call of GenerateCsr
func (mr *MockPluginMockRecorder) GenerateCsr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCsr", reflect.TypeOf((*MockPlugin)(nil).GenerateCsr), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockPlugin) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockPluginMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockPlugin)(nil).GetPluginInfo), arg0, arg1)
}

// LoadCertificate mocks base method
func (m *MockPlugin) LoadCertificate(arg0 context.Context, arg1 *ca.LoadCertificateRequest) (*ca.LoadCertificateResponse, error) {
	ret := m.ctrl.Call(m, "LoadCertificate", arg0, arg1)
	ret0, _ := ret[0].(*ca.LoadCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCertificate indicates an expected call of LoadCertificate
func (mr *MockPluginMockRecorder) LoadCertificate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCertificate", reflect.TypeOf((*MockPlugin)(nil).LoadCertificate), arg0, arg1)
}

// SignJwtSvid mocks base method
func (m *MockPlugin) SignJwtSvid(arg0 context.Context, arg1 *ca.SignJwtSvidRequest) (*ca.SignJwtSvidResponse, error) {
	ret := m.ctrl.Call(m, "SignJwtSvid", arg0, arg1)
	ret0, _ := ret[0].(*ca.SignJwtSvidResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignJwtSvid indicates an expected call of SignJwtSvid
func (mr *MockPluginMockRecorder) SignJwtSvid(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignJwtSvid", reflect.TypeOf((*MockPlugin)(nil).SignJwtSvid), arg0, arg1)
}

// SignX509SvidCsr mocks base method
func (m *MockPlugin) SignX509SvidCsr(arg0 context.Context, arg1 *ca.SignX509SvidCsrRequest) (*ca.SignX509SvidCsrResponse, error) {
	ret := m.ctrl.Call(m, "SignX509SvidCsr", arg0, arg1)
	ret0, _ := ret[0].(*ca.SignX509SvidCsrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignX509SvidCsr indicates an expected call of SignX509SvidCsr
func (mr *MockPluginMockRecorder) SignX509SvidCsr(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignX509SvidCsr", reflect.TypeOf((*MockPlugin)(nil).SignX509SvidCsr), arg0, arg1)
}
