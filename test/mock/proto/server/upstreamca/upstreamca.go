// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/spire/server/upstreamca (interfaces: UpstreamCA,UpstreamCAServer)

// Package mock_upstreamca is a generated GoMock package.
package mock_upstreamca

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	upstreamca "github.com/spiffe/spire/proto/spire/server/upstreamca"
	reflect "reflect"
)

// MockUpstreamCA is a mock of UpstreamCA interface
type MockUpstreamCA struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamCAMockRecorder
}

// MockUpstreamCAMockRecorder is the mock recorder for MockUpstreamCA
type MockUpstreamCAMockRecorder struct {
	mock *MockUpstreamCA
}

// NewMockUpstreamCA creates a new mock instance
func NewMockUpstreamCA(ctrl *gomock.Controller) *MockUpstreamCA {
	mock := &MockUpstreamCA{ctrl: ctrl}
	mock.recorder = &MockUpstreamCAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstreamCA) EXPECT() *MockUpstreamCAMockRecorder {
	return m.recorder
}

// SubmitCSR mocks base method
func (m *MockUpstreamCA) SubmitCSR(arg0 context.Context, arg1 *upstreamca.SubmitCSRRequest) (*upstreamca.SubmitCSRResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitCSR", arg0, arg1)
	ret0, _ := ret[0].(*upstreamca.SubmitCSRResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitCSR indicates an expected call of SubmitCSR
func (mr *MockUpstreamCAMockRecorder) SubmitCSR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCSR", reflect.TypeOf((*MockUpstreamCA)(nil).SubmitCSR), arg0, arg1)
}

// MockUpstreamCAServer is a mock of UpstreamCAServer interface
type MockUpstreamCAServer struct {
	ctrl     *gomock.Controller
	recorder *MockUpstreamCAServerMockRecorder
}

// MockUpstreamCAServerMockRecorder is the mock recorder for MockUpstreamCAServer
type MockUpstreamCAServerMockRecorder struct {
	mock *MockUpstreamCAServer
}

// NewMockUpstreamCAServer creates a new mock instance
func NewMockUpstreamCAServer(ctrl *gomock.Controller) *MockUpstreamCAServer {
	mock := &MockUpstreamCAServer{ctrl: ctrl}
	mock.recorder = &MockUpstreamCAServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpstreamCAServer) EXPECT() *MockUpstreamCAServerMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockUpstreamCAServer) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockUpstreamCAServerMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockUpstreamCAServer)(nil).Configure), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockUpstreamCAServer) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockUpstreamCAServerMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockUpstreamCAServer)(nil).GetPluginInfo), arg0, arg1)
}

// SubmitCSR mocks base method
func (m *MockUpstreamCAServer) SubmitCSR(arg0 context.Context, arg1 *upstreamca.SubmitCSRRequest) (*upstreamca.SubmitCSRResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitCSR", arg0, arg1)
	ret0, _ := ret[0].(*upstreamca.SubmitCSRResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitCSR indicates an expected call of SubmitCSR
func (mr *MockUpstreamCAServerMockRecorder) SubmitCSR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitCSR", reflect.TypeOf((*MockUpstreamCAServer)(nil).SubmitCSR), arg0, arg1)
}
