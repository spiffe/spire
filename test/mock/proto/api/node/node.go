// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/api/node (interfaces: NodeClient,Node_FetchSVIDClient,NodeServer,Node_FetchSVIDServer)

// Package mock_node is a generated GoMock package.
package mock_node

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	node "github.com/spiffe/spire/proto/api/node"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// FetchBaseSVID mocks base method
func (m *MockNodeClient) FetchBaseSVID(arg0 context.Context, arg1 *node.FetchBaseSVIDRequest, arg2 ...grpc.CallOption) (*node.FetchBaseSVIDResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchBaseSVID", varargs...)
	ret0, _ := ret[0].(*node.FetchBaseSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBaseSVID indicates an expected call of FetchBaseSVID
func (mr *MockNodeClientMockRecorder) FetchBaseSVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBaseSVID", reflect.TypeOf((*MockNodeClient)(nil).FetchBaseSVID), varargs...)
}

// FetchFederatedBundle mocks base method
func (m *MockNodeClient) FetchFederatedBundle(arg0 context.Context, arg1 *node.FetchFederatedBundleRequest, arg2 ...grpc.CallOption) (*node.FetchFederatedBundleResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchFederatedBundle", varargs...)
	ret0, _ := ret[0].(*node.FetchFederatedBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFederatedBundle indicates an expected call of FetchFederatedBundle
func (mr *MockNodeClientMockRecorder) FetchFederatedBundle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFederatedBundle", reflect.TypeOf((*MockNodeClient)(nil).FetchFederatedBundle), varargs...)
}

// FetchSVID mocks base method
func (m *MockNodeClient) FetchSVID(arg0 context.Context, arg1 ...grpc.CallOption) (node.Node_FetchSVIDClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchSVID", varargs...)
	ret0, _ := ret[0].(node.Node_FetchSVIDClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSVID indicates an expected call of FetchSVID
func (mr *MockNodeClientMockRecorder) FetchSVID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSVID", reflect.TypeOf((*MockNodeClient)(nil).FetchSVID), varargs...)
}

// MockNode_FetchSVIDClient is a mock of Node_FetchSVIDClient interface
type MockNode_FetchSVIDClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_FetchSVIDClientMockRecorder
}

// MockNode_FetchSVIDClientMockRecorder is the mock recorder for MockNode_FetchSVIDClient
type MockNode_FetchSVIDClientMockRecorder struct {
	mock *MockNode_FetchSVIDClient
}

// NewMockNode_FetchSVIDClient creates a new mock instance
func NewMockNode_FetchSVIDClient(ctrl *gomock.Controller) *MockNode_FetchSVIDClient {
	mock := &MockNode_FetchSVIDClient{ctrl: ctrl}
	mock.recorder = &MockNode_FetchSVIDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_FetchSVIDClient) EXPECT() *MockNode_FetchSVIDClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNode_FetchSVIDClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNode_FetchSVIDClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNode_FetchSVIDClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_FetchSVIDClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).Context))
}

// Header mocks base method
func (m *MockNode_FetchSVIDClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockNode_FetchSVIDClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).Header))
}

// Recv mocks base method
func (m *MockNode_FetchSVIDClient) Recv() (*node.FetchSVIDResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*node.FetchSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_FetchSVIDClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_FetchSVIDClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_FetchSVIDClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_FetchSVIDClient) Send(arg0 *node.FetchSVIDRequest) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_FetchSVIDClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockNode_FetchSVIDClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_FetchSVIDClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockNode_FetchSVIDClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockNode_FetchSVIDClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_FetchSVIDClient)(nil).Trailer))
}

// MockNodeServer is a mock of NodeServer interface
type MockNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeServerMockRecorder
}

// MockNodeServerMockRecorder is the mock recorder for MockNodeServer
type MockNodeServerMockRecorder struct {
	mock *MockNodeServer
}

// NewMockNodeServer creates a new mock instance
func NewMockNodeServer(ctrl *gomock.Controller) *MockNodeServer {
	mock := &MockNodeServer{ctrl: ctrl}
	mock.recorder = &MockNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeServer) EXPECT() *MockNodeServerMockRecorder {
	return m.recorder
}

// FetchBaseSVID mocks base method
func (m *MockNodeServer) FetchBaseSVID(arg0 context.Context, arg1 *node.FetchBaseSVIDRequest) (*node.FetchBaseSVIDResponse, error) {
	ret := m.ctrl.Call(m, "FetchBaseSVID", arg0, arg1)
	ret0, _ := ret[0].(*node.FetchBaseSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBaseSVID indicates an expected call of FetchBaseSVID
func (mr *MockNodeServerMockRecorder) FetchBaseSVID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBaseSVID", reflect.TypeOf((*MockNodeServer)(nil).FetchBaseSVID), arg0, arg1)
}

// FetchFederatedBundle mocks base method
func (m *MockNodeServer) FetchFederatedBundle(arg0 context.Context, arg1 *node.FetchFederatedBundleRequest) (*node.FetchFederatedBundleResponse, error) {
	ret := m.ctrl.Call(m, "FetchFederatedBundle", arg0, arg1)
	ret0, _ := ret[0].(*node.FetchFederatedBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFederatedBundle indicates an expected call of FetchFederatedBundle
func (mr *MockNodeServerMockRecorder) FetchFederatedBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFederatedBundle", reflect.TypeOf((*MockNodeServer)(nil).FetchFederatedBundle), arg0, arg1)
}

// FetchSVID mocks base method
func (m *MockNodeServer) FetchSVID(arg0 node.Node_FetchSVIDServer) error {
	ret := m.ctrl.Call(m, "FetchSVID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchSVID indicates an expected call of FetchSVID
func (mr *MockNodeServerMockRecorder) FetchSVID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSVID", reflect.TypeOf((*MockNodeServer)(nil).FetchSVID), arg0)
}

// MockNode_FetchSVIDServer is a mock of Node_FetchSVIDServer interface
type MockNode_FetchSVIDServer struct {
	ctrl     *gomock.Controller
	recorder *MockNode_FetchSVIDServerMockRecorder
}

// MockNode_FetchSVIDServerMockRecorder is the mock recorder for MockNode_FetchSVIDServer
type MockNode_FetchSVIDServerMockRecorder struct {
	mock *MockNode_FetchSVIDServer
}

// NewMockNode_FetchSVIDServer creates a new mock instance
func NewMockNode_FetchSVIDServer(ctrl *gomock.Controller) *MockNode_FetchSVIDServer {
	mock := &MockNode_FetchSVIDServer{ctrl: ctrl}
	mock.recorder = &MockNode_FetchSVIDServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_FetchSVIDServer) EXPECT() *MockNode_FetchSVIDServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockNode_FetchSVIDServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_FetchSVIDServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).Context))
}

// Recv mocks base method
func (m *MockNode_FetchSVIDServer) Recv() (*node.FetchSVIDRequest, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*node.FetchSVIDRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_FetchSVIDServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_FetchSVIDServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_FetchSVIDServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_FetchSVIDServer) Send(arg0 *node.FetchSVIDResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_FetchSVIDServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockNode_FetchSVIDServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockNode_FetchSVIDServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockNode_FetchSVIDServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_FetchSVIDServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockNode_FetchSVIDServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockNode_FetchSVIDServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockNode_FetchSVIDServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockNode_FetchSVIDServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNode_FetchSVIDServer)(nil).SetTrailer), arg0)
}
