// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/spire/api/node (interfaces: NodeClient,Node_AttestClient,Node_AttestServer,Node_FetchX509SVIDClient,NodeServer,Node_FetchX509SVIDServer)

// Package mock_node is a generated GoMock package.
package mock_node

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	node "github.com/spiffe/spire/proto/spire/api/node"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// Attest mocks base method
func (m *MockNodeClient) Attest(arg0 context.Context, arg1 ...grpc.CallOption) (node.Node_AttestClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attest", varargs...)
	ret0, _ := ret[0].(node.Node_AttestClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attest indicates an expected call of Attest
func (mr *MockNodeClientMockRecorder) Attest(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attest", reflect.TypeOf((*MockNodeClient)(nil).Attest), varargs...)
}

// FetchJWTSVID mocks base method
func (m *MockNodeClient) FetchJWTSVID(arg0 context.Context, arg1 *node.FetchJWTSVIDRequest, arg2 ...grpc.CallOption) (*node.FetchJWTSVIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchJWTSVID", varargs...)
	ret0, _ := ret[0].(*node.FetchJWTSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJWTSVID indicates an expected call of FetchJWTSVID
func (mr *MockNodeClientMockRecorder) FetchJWTSVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJWTSVID", reflect.TypeOf((*MockNodeClient)(nil).FetchJWTSVID), varargs...)
}

// FetchX509CASVID mocks base method
func (m *MockNodeClient) FetchX509CASVID(arg0 context.Context, arg1 *node.FetchX509CASVIDRequest, arg2 ...grpc.CallOption) (*node.FetchX509CASVIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchX509CASVID", varargs...)
	ret0, _ := ret[0].(*node.FetchX509CASVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchX509CASVID indicates an expected call of FetchX509CASVID
func (mr *MockNodeClientMockRecorder) FetchX509CASVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchX509CASVID", reflect.TypeOf((*MockNodeClient)(nil).FetchX509CASVID), varargs...)
}

// FetchX509SVID mocks base method
func (m *MockNodeClient) FetchX509SVID(arg0 context.Context, arg1 ...grpc.CallOption) (node.Node_FetchX509SVIDClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchX509SVID", varargs...)
	ret0, _ := ret[0].(node.Node_FetchX509SVIDClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchX509SVID indicates an expected call of FetchX509SVID
func (mr *MockNodeClientMockRecorder) FetchX509SVID(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchX509SVID", reflect.TypeOf((*MockNodeClient)(nil).FetchX509SVID), varargs...)
}

// MockNode_AttestClient is a mock of Node_AttestClient interface
type MockNode_AttestClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_AttestClientMockRecorder
}

// MockNode_AttestClientMockRecorder is the mock recorder for MockNode_AttestClient
type MockNode_AttestClientMockRecorder struct {
	mock *MockNode_AttestClient
}

// NewMockNode_AttestClient creates a new mock instance
func NewMockNode_AttestClient(ctrl *gomock.Controller) *MockNode_AttestClient {
	mock := &MockNode_AttestClient{ctrl: ctrl}
	mock.recorder = &MockNode_AttestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_AttestClient) EXPECT() *MockNode_AttestClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNode_AttestClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNode_AttestClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_AttestClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNode_AttestClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_AttestClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_AttestClient)(nil).Context))
}

// Header mocks base method
func (m *MockNode_AttestClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockNode_AttestClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_AttestClient)(nil).Header))
}

// Recv mocks base method
func (m *MockNode_AttestClient) Recv() (*node.AttestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*node.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_AttestClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_AttestClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_AttestClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_AttestClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_AttestClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_AttestClient) Send(arg0 *node.AttestRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_AttestClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_AttestClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockNode_AttestClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_AttestClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_AttestClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockNode_AttestClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockNode_AttestClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_AttestClient)(nil).Trailer))
}

// MockNode_AttestServer is a mock of Node_AttestServer interface
type MockNode_AttestServer struct {
	ctrl     *gomock.Controller
	recorder *MockNode_AttestServerMockRecorder
}

// MockNode_AttestServerMockRecorder is the mock recorder for MockNode_AttestServer
type MockNode_AttestServerMockRecorder struct {
	mock *MockNode_AttestServer
}

// NewMockNode_AttestServer creates a new mock instance
func NewMockNode_AttestServer(ctrl *gomock.Controller) *MockNode_AttestServer {
	mock := &MockNode_AttestServer{ctrl: ctrl}
	mock.recorder = &MockNode_AttestServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_AttestServer) EXPECT() *MockNode_AttestServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockNode_AttestServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_AttestServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_AttestServer)(nil).Context))
}

// Recv mocks base method
func (m *MockNode_AttestServer) Recv() (*node.AttestRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*node.AttestRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_AttestServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_AttestServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_AttestServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_AttestServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_AttestServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_AttestServer) Send(arg0 *node.AttestResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_AttestServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_AttestServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockNode_AttestServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockNode_AttestServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNode_AttestServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockNode_AttestServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_AttestServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_AttestServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockNode_AttestServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockNode_AttestServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNode_AttestServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockNode_AttestServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockNode_AttestServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNode_AttestServer)(nil).SetTrailer), arg0)
}

// MockNode_FetchX509SVIDClient is a mock of Node_FetchX509SVIDClient interface
type MockNode_FetchX509SVIDClient struct {
	ctrl     *gomock.Controller
	recorder *MockNode_FetchX509SVIDClientMockRecorder
}

// MockNode_FetchX509SVIDClientMockRecorder is the mock recorder for MockNode_FetchX509SVIDClient
type MockNode_FetchX509SVIDClientMockRecorder struct {
	mock *MockNode_FetchX509SVIDClient
}

// NewMockNode_FetchX509SVIDClient creates a new mock instance
func NewMockNode_FetchX509SVIDClient(ctrl *gomock.Controller) *MockNode_FetchX509SVIDClient {
	mock := &MockNode_FetchX509SVIDClient{ctrl: ctrl}
	mock.recorder = &MockNode_FetchX509SVIDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_FetchX509SVIDClient) EXPECT() *MockNode_FetchX509SVIDClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockNode_FetchX509SVIDClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockNode_FetchX509SVIDClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockNode_FetchX509SVIDClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_FetchX509SVIDClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).Context))
}

// Header mocks base method
func (m *MockNode_FetchX509SVIDClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockNode_FetchX509SVIDClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).Header))
}

// Recv mocks base method
func (m *MockNode_FetchX509SVIDClient) Recv() (*node.FetchX509SVIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*node.FetchX509SVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_FetchX509SVIDClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_FetchX509SVIDClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_FetchX509SVIDClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_FetchX509SVIDClient) Send(arg0 *node.FetchX509SVIDRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_FetchX509SVIDClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockNode_FetchX509SVIDClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_FetchX509SVIDClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockNode_FetchX509SVIDClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockNode_FetchX509SVIDClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNode_FetchX509SVIDClient)(nil).Trailer))
}

// MockNodeServer is a mock of NodeServer interface
type MockNodeServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeServerMockRecorder
}

// MockNodeServerMockRecorder is the mock recorder for MockNodeServer
type MockNodeServerMockRecorder struct {
	mock *MockNodeServer
}

// NewMockNodeServer creates a new mock instance
func NewMockNodeServer(ctrl *gomock.Controller) *MockNodeServer {
	mock := &MockNodeServer{ctrl: ctrl}
	mock.recorder = &MockNodeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeServer) EXPECT() *MockNodeServerMockRecorder {
	return m.recorder
}

// Attest mocks base method
func (m *MockNodeServer) Attest(arg0 node.Node_AttestServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attest indicates an expected call of Attest
func (mr *MockNodeServerMockRecorder) Attest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attest", reflect.TypeOf((*MockNodeServer)(nil).Attest), arg0)
}

// FetchJWTSVID mocks base method
func (m *MockNodeServer) FetchJWTSVID(arg0 context.Context, arg1 *node.FetchJWTSVIDRequest) (*node.FetchJWTSVIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchJWTSVID", arg0, arg1)
	ret0, _ := ret[0].(*node.FetchJWTSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJWTSVID indicates an expected call of FetchJWTSVID
func (mr *MockNodeServerMockRecorder) FetchJWTSVID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJWTSVID", reflect.TypeOf((*MockNodeServer)(nil).FetchJWTSVID), arg0, arg1)
}

// FetchX509CASVID mocks base method
func (m *MockNodeServer) FetchX509CASVID(arg0 context.Context, arg1 *node.FetchX509CASVIDRequest) (*node.FetchX509CASVIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchX509CASVID", arg0, arg1)
	ret0, _ := ret[0].(*node.FetchX509CASVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchX509CASVID indicates an expected call of FetchX509CASVID
func (mr *MockNodeServerMockRecorder) FetchX509CASVID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchX509CASVID", reflect.TypeOf((*MockNodeServer)(nil).FetchX509CASVID), arg0, arg1)
}

// FetchX509SVID mocks base method
func (m *MockNodeServer) FetchX509SVID(arg0 node.Node_FetchX509SVIDServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchX509SVID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchX509SVID indicates an expected call of FetchX509SVID
func (mr *MockNodeServerMockRecorder) FetchX509SVID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchX509SVID", reflect.TypeOf((*MockNodeServer)(nil).FetchX509SVID), arg0)
}

// MockNode_FetchX509SVIDServer is a mock of Node_FetchX509SVIDServer interface
type MockNode_FetchX509SVIDServer struct {
	ctrl     *gomock.Controller
	recorder *MockNode_FetchX509SVIDServerMockRecorder
}

// MockNode_FetchX509SVIDServerMockRecorder is the mock recorder for MockNode_FetchX509SVIDServer
type MockNode_FetchX509SVIDServerMockRecorder struct {
	mock *MockNode_FetchX509SVIDServer
}

// NewMockNode_FetchX509SVIDServer creates a new mock instance
func NewMockNode_FetchX509SVIDServer(ctrl *gomock.Controller) *MockNode_FetchX509SVIDServer {
	mock := &MockNode_FetchX509SVIDServer{ctrl: ctrl}
	mock.recorder = &MockNode_FetchX509SVIDServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNode_FetchX509SVIDServer) EXPECT() *MockNode_FetchX509SVIDServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockNode_FetchX509SVIDServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockNode_FetchX509SVIDServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).Context))
}

// Recv mocks base method
func (m *MockNode_FetchX509SVIDServer) Recv() (*node.FetchX509SVIDRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*node.FetchX509SVIDRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockNode_FetchX509SVIDServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockNode_FetchX509SVIDServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockNode_FetchX509SVIDServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockNode_FetchX509SVIDServer) Send(arg0 *node.FetchX509SVIDResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNode_FetchX509SVIDServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockNode_FetchX509SVIDServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockNode_FetchX509SVIDServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockNode_FetchX509SVIDServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockNode_FetchX509SVIDServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockNode_FetchX509SVIDServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockNode_FetchX509SVIDServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockNode_FetchX509SVIDServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockNode_FetchX509SVIDServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNode_FetchX509SVIDServer)(nil).SetTrailer), arg0)
}
