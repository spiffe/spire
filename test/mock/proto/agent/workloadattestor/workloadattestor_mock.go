// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/spire/agent/workloadattestor (interfaces: WorkloadAttestor,WorkloadAttestorServer)

// Package mock_workloadattestor is a generated GoMock package.
package mock_workloadattestor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	workloadattestor "github.com/spiffe/spire/proto/spire/agent/workloadattestor"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	reflect "reflect"
)

// MockWorkloadAttestor is a mock of WorkloadAttestor interface
type MockWorkloadAttestor struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadAttestorMockRecorder
}

// MockWorkloadAttestorMockRecorder is the mock recorder for MockWorkloadAttestor
type MockWorkloadAttestorMockRecorder struct {
	mock *MockWorkloadAttestor
}

// NewMockWorkloadAttestor creates a new mock instance
func NewMockWorkloadAttestor(ctrl *gomock.Controller) *MockWorkloadAttestor {
	mock := &MockWorkloadAttestor{ctrl: ctrl}
	mock.recorder = &MockWorkloadAttestorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkloadAttestor) EXPECT() *MockWorkloadAttestorMockRecorder {
	return m.recorder
}

// Attest mocks base method
func (m *MockWorkloadAttestor) Attest(arg0 context.Context, arg1 *workloadattestor.AttestRequest) (*workloadattestor.AttestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attest", arg0, arg1)
	ret0, _ := ret[0].(*workloadattestor.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attest indicates an expected call of Attest
func (mr *MockWorkloadAttestorMockRecorder) Attest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attest", reflect.TypeOf((*MockWorkloadAttestor)(nil).Attest), arg0, arg1)
}

// MockWorkloadAttestorServer is a mock of WorkloadAttestorServer interface
type MockWorkloadAttestorServer struct {
	ctrl     *gomock.Controller
	recorder *MockWorkloadAttestorServerMockRecorder
}

// MockWorkloadAttestorServerMockRecorder is the mock recorder for MockWorkloadAttestorServer
type MockWorkloadAttestorServerMockRecorder struct {
	mock *MockWorkloadAttestorServer
}

// NewMockWorkloadAttestorServer creates a new mock instance
func NewMockWorkloadAttestorServer(ctrl *gomock.Controller) *MockWorkloadAttestorServer {
	mock := &MockWorkloadAttestorServer{ctrl: ctrl}
	mock.recorder = &MockWorkloadAttestorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkloadAttestorServer) EXPECT() *MockWorkloadAttestorServerMockRecorder {
	return m.recorder
}

// Attest mocks base method
func (m *MockWorkloadAttestorServer) Attest(arg0 context.Context, arg1 *workloadattestor.AttestRequest) (*workloadattestor.AttestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attest", arg0, arg1)
	ret0, _ := ret[0].(*workloadattestor.AttestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attest indicates an expected call of Attest
func (mr *MockWorkloadAttestorServerMockRecorder) Attest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attest", reflect.TypeOf((*MockWorkloadAttestorServer)(nil).Attest), arg0, arg1)
}

// Configure mocks base method
func (m *MockWorkloadAttestorServer) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockWorkloadAttestorServerMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockWorkloadAttestorServer)(nil).Configure), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockWorkloadAttestorServer) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockWorkloadAttestorServerMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockWorkloadAttestorServer)(nil).GetPluginInfo), arg0, arg1)
}
