// Code generated by go-bindata.
// sources:
// _migrations/000-initial.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000InitialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x41\x6f\x9b\x4e\x10\xc5\xef\xfb\x29\xe6\x08\x12\x87\xfc\xff\xea\xad\x4a\x24\x4c\x27\x31\x8a\xbd\xa4\xeb\x75\x9b\x9c\x10\xc9\x8e\x2b\x24\x82\xd1\xb2\x8e\x92\x6f\x5f\x79\xb7\xc5\x60\xaf\x29\x4a\xaa\x72\x33\x7e\xb3\x33\xf3\x7e\xcb\x4b\x04\xc6\x12\x41\xc6\xb3\x05\xc2\x86\x14\xe9\xc2\x90\xca\x1f\x77\xb5\xaa\xa8\x85\x80\x01\x94\x0a\xba\x27\xe5\x12\x6f\x50\x00\xcf\x24\xf0\xf5\x62\x01\x77\x22\x5d\xc6\xe2\x01\x6e\xf1\x01\xe2\xb5\xcc\x52\x9e\x08\x5c\x22\x97\x11\x03\x68\x9b\x72\xb3\xa1\xdc\x1e\xf0\x2d\x16\xc9\x3c\x16\xc1\x7f\x17\xff\x7f\x0a\xbb\xfa\x88\x31\x00\xd7\xcc\x35\x98\x2d\xb2\x59\xef\x5f\x00\x63\xaa\x7e\x77\x18\x96\x3e\x69\xb2\xf3\x16\x06\x40\xa6\x4b\x5c\xc9\x78\x79\x37\xa8\xdf\x35\xea\x0f\x0a\x45\x15\x9d\x28\xec\xe9\xc9\x1c\x93\xdb\xc0\x98\xea\xea\xf2\x22\x64\xe1\x67\xc6\x7e\xd9\xb5\xe6\xe9\xd7\x35\x42\xca\xbf\xe0\x3d\x94\xea\x35\x3f\x71\x2e\xef\x76\x67\x00\x19\x3f\xb5\x36\xe8\x04\x21\x03\xf8\x3e\x47\x81\xfd\x49\xd2\x95\x9d\xef\xd0\xd2\x11\x2a\x8c\xa1\x76\x2f\xa9\xb7\x8a\x72\xaa\x8d\x2e\x3d\x94\x3e\xc2\x69\x94\x94\x2a\x4c\x91\x9b\xb7\xc6\xc1\x92\x78\x2f\x5d\xbb\xbe\x9d\x2d\xe9\xb2\xa8\xf2\x7a\xf7\xfc\x48\xfa\x8c\x86\x5e\x9b\x52\x53\x6b\x2d\xf7\x63\x39\x62\x3b\x85\xee\x14\xbe\x3d\xcd\x28\x4f\xaf\xcf\xc7\x4c\xbd\xa2\xf7\x71\xb5\x27\x68\x6a\xb7\xd5\x0b\xe9\xfc\xb9\x68\x46\xd8\x7e\x08\xee\x18\x5d\x07\xd6\x12\xeb\xfb\xf7\x52\x54\x3b\x3a\x7e\x7d\xc2\x67\x12\xa0\x49\x84\xfc\x88\x9c\x4f\x9a\x7e\x94\xad\x21\x4d\x6a\x60\xd0\xd1\xeb\x37\xb7\xed\x60\xe4\xbe\x49\x43\x5b\xce\x39\x02\xd0\x14\x9a\x6a\x33\xae\x39\xe4\x93\x4d\xa7\xee\xf9\xa7\x57\x99\xed\x7f\x76\x69\x05\x57\x97\x30\xcc\x2b\x67\x5e\x4b\x15\x3d\x99\xad\x9e\xec\x59\xf4\xfb\x52\xbc\xf3\x4e\xfc\xf5\x45\x6d\x8f\xfe\x6d\x0f\x3c\x5b\x44\x76\xe6\xc8\xcd\x18\xee\x4f\xbb\xce\x04\xa6\x37\x7c\x5f\xe1\x2b\x08\x41\xe0\x35\x0a\xe4\x09\xae\x3c\x37\xcc\x5b\x32\x9a\x1e\x67\xbf\x66\x9b\x9d\xb9\x1d\xcc\x45\xc8\x59\xe5\x21\x46\x22\xbb\x8d\x5b\x66\x34\x51\x7e\x06\x00\x00\xff\xff\x9d\x62\x96\x70\xcb\x07\x00\x00")

func _000InitialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000InitialUpSql,
		"000-initial.up.sql",
	)
}

func _000InitialUpSql() (*asset, error) {
	bytes, err := _000InitialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000-initial.up.sql", size: 1995, mode: os.FileMode(436), modTime: time.Unix(1503101180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000-initial.up.sql": _000InitialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000-initial.up.sql": &bintree{_000InitialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
