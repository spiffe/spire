// Code generated by go-bindata.
// sources:
// _migrations/000-initial.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000InitialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xd1\x4f\xdb\x30\x10\xc6\xdf\xfd\x57\xdc\x63\x23\xe5\x81\x4d\x7b\x9b\x40\x0a\xd9\x41\x23\x5a\x97\xb9\xee\x06\x4f\x56\xc0\xd7\x29\x5b\x48\x23\xc7\x45\xf4\xbf\x9f\x6a\x6f\xa9\xd3\xa6\x59\x05\xd3\x96\x27\x48\xbf\xf3\x9d\xbf\xdf\xe9\x4b\x2a\x30\x91\x08\x32\xb9\x9c\x20\x2c\x49\x93\xc9\x2d\x69\xf5\xb0\xae\x74\x49\x0d\x8c\x18\x40\xa1\xa1\x7d\x32\x2e\xf1\x1a\x05\xf0\x99\x04\xbe\x98\x4c\xe0\x56\x64\xd3\x44\xdc\xc3\x0d\xde\x43\xb2\x90\xb3\x8c\xa7\x02\xa7\xc8\x65\xcc\x00\x9a\xba\x58\x2e\x49\xb9\x03\xbe\x24\x22\x1d\x27\x62\xf4\xee\xec\xfd\x87\xa8\xad\x8f\x19\x03\xf0\xcd\x7c\x83\xcb\xc9\xec\x32\xf8\x15\xc0\xda\x32\xec\x0e\xdd\xd2\x47\x43\x6e\xde\xdc\x02\xc8\x6c\x8a\x73\x99\x4c\x6f\x3b\xf5\xeb\x5a\xff\x41\xa1\xa9\xa4\x03\x85\x3b\x3d\x1d\x63\x7a\x33\xb2\xb6\xbc\x38\x3f\x8b\x58\xf4\x91\xb1\x5f\x76\x2d\x78\xf6\x79\x81\x90\xf1\x4f\x78\x07\x85\x7e\x51\x07\xce\xa9\xf6\xee\x0c\x60\xc6\x0f\xad\x1d\xb5\x82\x88\x01\x7c\x1d\xa3\xc0\x70\x92\x6c\xee\xe6\xdb\xb5\xf4\x84\x72\x6b\xa9\xd9\x4a\xaa\x95\x26\x45\x95\x35\x45\x0f\xa5\xb7\x70\x1a\x24\xa5\x73\x9b\x2b\xbb\xa9\x3d\x2c\x89\x77\xd2\xb7\x0b\xed\x6c\xc8\x14\x79\xa9\xaa\xf5\xd3\x03\x99\x23\x1a\x7a\xa9\x0b\x43\x8d\xb3\xbc\x1f\xcb\x1e\xdb\x53\xe8\x9e\xc2\x37\xd0\x0c\xf2\xec\xf5\x79\x9f\x69\xaf\xe8\x75\x5c\xdd\x09\x86\x9a\x55\xf9\x4c\x46\x3d\xe5\xf5\x00\xdb\x37\xc1\x1d\xa2\xeb\xc1\x3a\x62\xa1\x7f\xcf\x79\xb9\xa6\xfd\xd7\x07\x7c\x4e\x02\x74\x12\xa1\x7e\x44\xde\x27\x43\xdf\x8a\xc6\x92\x21\xdd\x31\x68\xef\xf5\xc6\xdf\xb6\x33\x72\x68\x52\xd7\x96\x63\x8e\x00\xd4\xb9\xa1\xca\x0e\x6b\x76\xf9\xe4\xd2\xa9\x7d\xfe\xe9\x2a\xb3\xed\xbf\x6d\x5a\xc1\xc5\x39\x74\xf3\xca\x9b\xd7\x50\x49\x8f\x76\x65\x4e\xf6\x2c\xfe\xbd\x14\xaf\xdc\x89\xbf\x7e\x51\xd7\x23\xdc\xf6\x51\xcf\x2d\x62\x37\x73\xec\x67\x8c\xb6\xa7\x5d\xcd\x04\x66\xd7\x7c\x5b\xd1\x57\x10\x81\xc0\x2b\x14\xc8\x53\x9c\xf7\x6c\x58\x6f\xc9\xa1\xbb\xdf\x57\x45\xa5\xec\xea\x07\x55\xde\x5f\xf7\x67\xbb\x0e\x83\xbb\xe8\xe2\x70\x13\x7e\xe5\x42\x2f\xfe\x67\x0e\x1e\xcd\x25\xf7\x15\x50\xce\x62\x1f\x86\x47\x95\xbb\x40\x8c\x1d\x17\x8f\x65\x30\x1b\x7f\x06\x00\x00\xff\xff\x75\x38\xc8\x37\x95\x08\x00\x00")

func _000InitialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000InitialUpSql,
		"000-initial.up.sql",
	)
}

func _000InitialUpSql() (*asset, error) {
	bytes, err := _000InitialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000-initial.up.sql", size: 2197, mode: os.FileMode(420), modTime: time.Unix(1506717350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000-initial.up.sql": _000InitialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000-initial.up.sql": {_000InitialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
