// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bootstrapper.proto

package bootstrapper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/spire/proto/common"
import plugin "github.com/spiffe/spire/proto/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishBundleRequest struct {
	Bundle               *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PublishBundleRequest) Reset()         { *m = PublishBundleRequest{} }
func (m *PublishBundleRequest) String() string { return proto.CompactTextString(m) }
func (*PublishBundleRequest) ProtoMessage()    {}
func (*PublishBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bootstrapper_18ef1d0e5147784a, []int{0}
}
func (m *PublishBundleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishBundleRequest.Unmarshal(m, b)
}
func (m *PublishBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishBundleRequest.Marshal(b, m, deterministic)
}
func (dst *PublishBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishBundleRequest.Merge(dst, src)
}
func (m *PublishBundleRequest) XXX_Size() int {
	return xxx_messageInfo_PublishBundleRequest.Size(m)
}
func (m *PublishBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishBundleRequest proto.InternalMessageInfo

func (m *PublishBundleRequest) GetBundle() *common.Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

type PublishBundleResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishBundleResponse) Reset()         { *m = PublishBundleResponse{} }
func (m *PublishBundleResponse) String() string { return proto.CompactTextString(m) }
func (*PublishBundleResponse) ProtoMessage()    {}
func (*PublishBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bootstrapper_18ef1d0e5147784a, []int{1}
}
func (m *PublishBundleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishBundleResponse.Unmarshal(m, b)
}
func (m *PublishBundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishBundleResponse.Marshal(b, m, deterministic)
}
func (dst *PublishBundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishBundleResponse.Merge(dst, src)
}
func (m *PublishBundleResponse) XXX_Size() int {
	return xxx_messageInfo_PublishBundleResponse.Size(m)
}
func (m *PublishBundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishBundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishBundleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PublishBundleRequest)(nil), "spire.server.bootstrapper.PublishBundleRequest")
	proto.RegisterType((*PublishBundleResponse)(nil), "spire.server.bootstrapper.PublishBundleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BootstrapperClient is the client API for Bootstrapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BootstrapperClient interface {
	// PublishBundle is used by SPIRE to facilitate a read-modify-write cycle
	// for publishing the trust bundle for bootstrapping. In an HA deployment,
	// multiple SPIRE servers would be actively involved in publishing the
	// bundle. As such it is important for bootstrappers to support conflict
	// resolution. The publishing flow is as follows:
	//
	// 1) SPIRE opens a PublishBundle stream and waits to receive a response
	// from Bootstrapper.
	//
	// 2) Bootstrapper does whatever it needs to do to successfully detect a
	// conflict publishing the bundle (.e.g. reading the version number of the
	// currently published bundle).  Once it is prepared to do the update, it
	// sends a response to SPIRE.
	//
	// 3) SPIRE fetches the latest bundle and sends it to Bootstrapper and
	// awaits a response.
	//
	// 4) Bootstrapper attempts to publish the bundle. If successful, it closes
	// the stream. SPIRE receives the EOF as a signal that publishing is
	// complete. On conflict, Bootstrapper sends a response back to SPIRE. The
	// process is repeated starting at step #3.
	PublishBundle(ctx context.Context, opts ...grpc.CallOption) (Bootstrapper_PublishBundleClient, error)
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type bootstrapperClient struct {
	cc *grpc.ClientConn
}

func NewBootstrapperClient(cc *grpc.ClientConn) BootstrapperClient {
	return &bootstrapperClient{cc}
}

func (c *bootstrapperClient) PublishBundle(ctx context.Context, opts ...grpc.CallOption) (Bootstrapper_PublishBundleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bootstrapper_serviceDesc.Streams[0], "/spire.server.bootstrapper.Bootstrapper/PublishBundle", opts...)
	if err != nil {
		return nil, err
	}
	x := &bootstrapperPublishBundleClient{stream}
	return x, nil
}

type Bootstrapper_PublishBundleClient interface {
	Send(*PublishBundleRequest) error
	Recv() (*PublishBundleResponse, error)
	grpc.ClientStream
}

type bootstrapperPublishBundleClient struct {
	grpc.ClientStream
}

func (x *bootstrapperPublishBundleClient) Send(m *PublishBundleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bootstrapperPublishBundleClient) Recv() (*PublishBundleResponse, error) {
	m := new(PublishBundleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bootstrapperClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.server.bootstrapper.Bootstrapper/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapperClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.bootstrapper.Bootstrapper/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapperServer is the server API for Bootstrapper service.
type BootstrapperServer interface {
	// PublishBundle is used by SPIRE to facilitate a read-modify-write cycle
	// for publishing the trust bundle for bootstrapping. In an HA deployment,
	// multiple SPIRE servers would be actively involved in publishing the
	// bundle. As such it is important for bootstrappers to support conflict
	// resolution. The publishing flow is as follows:
	//
	// 1) SPIRE opens a PublishBundle stream and waits to receive a response
	// from Bootstrapper.
	//
	// 2) Bootstrapper does whatever it needs to do to successfully detect a
	// conflict publishing the bundle (.e.g. reading the version number of the
	// currently published bundle).  Once it is prepared to do the update, it
	// sends a response to SPIRE.
	//
	// 3) SPIRE fetches the latest bundle and sends it to Bootstrapper and
	// awaits a response.
	//
	// 4) Bootstrapper attempts to publish the bundle. If successful, it closes
	// the stream. SPIRE receives the EOF as a signal that publishing is
	// complete. On conflict, Bootstrapper sends a response back to SPIRE. The
	// process is repeated starting at step #3.
	PublishBundle(Bootstrapper_PublishBundleServer) error
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterBootstrapperServer(s *grpc.Server, srv BootstrapperServer) {
	s.RegisterService(&_Bootstrapper_serviceDesc, srv)
}

func _Bootstrapper_PublishBundle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BootstrapperServer).PublishBundle(&bootstrapperPublishBundleServer{stream})
}

type Bootstrapper_PublishBundleServer interface {
	Send(*PublishBundleResponse) error
	Recv() (*PublishBundleRequest, error)
	grpc.ServerStream
}

type bootstrapperPublishBundleServer struct {
	grpc.ServerStream
}

func (x *bootstrapperPublishBundleServer) Send(m *PublishBundleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bootstrapperPublishBundleServer) Recv() (*PublishBundleRequest, error) {
	m := new(PublishBundleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bootstrapper_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.bootstrapper.Bootstrapper/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bootstrapper_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapperServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.bootstrapper.Bootstrapper/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapperServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bootstrapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.bootstrapper.Bootstrapper",
	HandlerType: (*BootstrapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _Bootstrapper_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _Bootstrapper_GetPluginInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishBundle",
			Handler:       _Bootstrapper_PublishBundle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bootstrapper.proto",
}

func init() { proto.RegisterFile("bootstrapper.proto", fileDescriptor_bootstrapper_18ef1d0e5147784a) }

var fileDescriptor_bootstrapper_18ef1d0e5147784a = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x59, 0x0f, 0x05, 0x63, 0xeb, 0x21, 0x54, 0xd4, 0x3d, 0x49, 0x41, 0xa9, 0x22, 0xd9,
	0x5a, 0x2f, 0x9e, 0x57, 0x41, 0xbc, 0x15, 0x8f, 0xbd, 0x99, 0x3a, 0xd9, 0x06, 0x76, 0x33, 0x31,
	0x7f, 0xfa, 0x21, 0xfd, 0x54, 0x42, 0x92, 0x95, 0x5d, 0xa9, 0x74, 0x4f, 0x03, 0x99, 0xdf, 0x9b,
	0x37, 0x6f, 0x42, 0x28, 0x47, 0x74, 0xd6, 0x99, 0x0f, 0xad, 0xc1, 0x30, 0x6d, 0xd0, 0x21, 0xbd,
	0xb4, 0x5a, 0x1a, 0x60, 0x16, 0xcc, 0x0e, 0x0c, 0xeb, 0x02, 0xf9, 0x43, 0x25, 0xdd, 0xd6, 0x73,
	0xb6, 0xc1, 0xa6, 0xb0, 0x5a, 0x0a, 0x01, 0x45, 0x80, 0x8b, 0xa0, 0x2c, 0x36, 0xd8, 0x34, 0xa8,
	0x52, 0x89, 0xd3, 0xf2, 0xa7, 0x41, 0x12, 0x5d, 0xfb, 0x4a, 0xb6, 0x25, 0x2a, 0x67, 0x2f, 0x64,
	0xba, 0xf2, 0xbc, 0x96, 0x76, 0x5b, 0x7a, 0xf5, 0x59, 0xc3, 0x3b, 0x7c, 0x79, 0xb0, 0x8e, 0xde,
	0x93, 0x11, 0x0f, 0x0f, 0x17, 0xd9, 0x55, 0x36, 0x3f, 0x59, 0x4e, 0x59, 0x5c, 0x38, 0xd9, 0x26,
	0x38, 0x31, 0xb3, 0x73, 0x72, 0xf6, 0x67, 0x8a, 0xd5, 0xa8, 0x2c, 0x2c, 0xbf, 0x8f, 0xc8, 0xb8,
	0xec, 0x84, 0xa3, 0x3b, 0x32, 0xe9, 0x91, 0xb4, 0x60, 0xff, 0x5e, 0x82, 0xed, 0xdb, 0x2c, 0x5f,
	0x0c, 0x17, 0xc4, 0x25, 0xe6, 0xd9, 0x22, 0xa3, 0x6b, 0x72, 0xfc, 0x8c, 0x4a, 0xc8, 0xca, 0x1b,
	0xa0, 0xd7, 0xfd, 0x30, 0xe9, 0x20, 0xbf, 0xfd, 0xd6, 0xe9, 0xe6, 0x10, 0x16, 0xe7, 0x53, 0x41,
	0x26, 0xaf, 0xe0, 0x56, 0xa1, 0xfd, 0xa6, 0x04, 0xd2, 0xdb, 0xbd, 0xc2, 0x1e, 0xd3, 0x7a, 0xdc,
	0x0d, 0x41, 0xa3, 0x4f, 0x79, 0xba, 0x1e, 0x77, 0xd3, 0xf2, 0x51, 0xf8, 0xc2, 0xc7, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe0, 0x05, 0x28, 0x65, 0x60, 0x02, 0x00, 0x00,
}
