// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ca.proto

package ca

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import plugin "github.com/spiffe/spire/proto/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureRequest = plugin.ConfigureRequest

// ConfigureResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureResponse = plugin.ConfigureResponse

// GetPluginInfoRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoRequest = plugin.GetPluginInfoRequest

// GetPluginInfoResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoResponse = plugin.GetPluginInfoResponse

// * Represents a request with a certificate signing request.
type SignX509SvidCsrRequest struct {
	// * Certificate signing request.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// * TTL
	Ttl                  int32    `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignX509SvidCsrRequest) Reset()         { *m = SignX509SvidCsrRequest{} }
func (m *SignX509SvidCsrRequest) String() string { return proto.CompactTextString(m) }
func (*SignX509SvidCsrRequest) ProtoMessage()    {}
func (*SignX509SvidCsrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{0}
}
func (m *SignX509SvidCsrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignX509SvidCsrRequest.Unmarshal(m, b)
}
func (m *SignX509SvidCsrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignX509SvidCsrRequest.Marshal(b, m, deterministic)
}
func (dst *SignX509SvidCsrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignX509SvidCsrRequest.Merge(dst, src)
}
func (m *SignX509SvidCsrRequest) XXX_Size() int {
	return xxx_messageInfo_SignX509SvidCsrRequest.Size(m)
}
func (m *SignX509SvidCsrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignX509SvidCsrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignX509SvidCsrRequest proto.InternalMessageInfo

func (m *SignX509SvidCsrRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func (m *SignX509SvidCsrRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// * Represents a response with a signed certificate.
type SignX509SvidCsrResponse struct {
	// * Signed certificate.
	SignedCertificate    []byte   `protobuf:"bytes,1,opt,name=signed_certificate,json=signedCertificate,proto3" json:"signed_certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignX509SvidCsrResponse) Reset()         { *m = SignX509SvidCsrResponse{} }
func (m *SignX509SvidCsrResponse) String() string { return proto.CompactTextString(m) }
func (*SignX509SvidCsrResponse) ProtoMessage()    {}
func (*SignX509SvidCsrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{1}
}
func (m *SignX509SvidCsrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignX509SvidCsrResponse.Unmarshal(m, b)
}
func (m *SignX509SvidCsrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignX509SvidCsrResponse.Marshal(b, m, deterministic)
}
func (dst *SignX509SvidCsrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignX509SvidCsrResponse.Merge(dst, src)
}
func (m *SignX509SvidCsrResponse) XXX_Size() int {
	return xxx_messageInfo_SignX509SvidCsrResponse.Size(m)
}
func (m *SignX509SvidCsrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignX509SvidCsrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignX509SvidCsrResponse proto.InternalMessageInfo

func (m *SignX509SvidCsrResponse) GetSignedCertificate() []byte {
	if m != nil {
		return m.SignedCertificate
	}
	return nil
}

// * Represents an empty request.
type GenerateCsrRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateCsrRequest) Reset()         { *m = GenerateCsrRequest{} }
func (m *GenerateCsrRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateCsrRequest) ProtoMessage()    {}
func (*GenerateCsrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{2}
}
func (m *GenerateCsrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateCsrRequest.Unmarshal(m, b)
}
func (m *GenerateCsrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateCsrRequest.Marshal(b, m, deterministic)
}
func (dst *GenerateCsrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateCsrRequest.Merge(dst, src)
}
func (m *GenerateCsrRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateCsrRequest.Size(m)
}
func (m *GenerateCsrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateCsrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateCsrRequest proto.InternalMessageInfo

// * Represents a response with a certificate signing request.
type GenerateCsrResponse struct {
	// * Certificate signing request.
	Csr                  []byte   `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateCsrResponse) Reset()         { *m = GenerateCsrResponse{} }
func (m *GenerateCsrResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateCsrResponse) ProtoMessage()    {}
func (*GenerateCsrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{3}
}
func (m *GenerateCsrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateCsrResponse.Unmarshal(m, b)
}
func (m *GenerateCsrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateCsrResponse.Marshal(b, m, deterministic)
}
func (dst *GenerateCsrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateCsrResponse.Merge(dst, src)
}
func (m *GenerateCsrResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateCsrResponse.Size(m)
}
func (m *GenerateCsrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateCsrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateCsrResponse proto.InternalMessageInfo

func (m *GenerateCsrResponse) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

type SignJwtSvidRequest struct {
	// * SPIFFE ID to embed in the subject claim of the JWT
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	// * token time-to-live (in seconds)
	Ttl int32 `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	// * token audience
	Audience             []string `protobuf:"bytes,3,rep,name=audience" json:"audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignJwtSvidRequest) Reset()         { *m = SignJwtSvidRequest{} }
func (m *SignJwtSvidRequest) String() string { return proto.CompactTextString(m) }
func (*SignJwtSvidRequest) ProtoMessage()    {}
func (*SignJwtSvidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{4}
}
func (m *SignJwtSvidRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignJwtSvidRequest.Unmarshal(m, b)
}
func (m *SignJwtSvidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignJwtSvidRequest.Marshal(b, m, deterministic)
}
func (dst *SignJwtSvidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignJwtSvidRequest.Merge(dst, src)
}
func (m *SignJwtSvidRequest) XXX_Size() int {
	return xxx_messageInfo_SignJwtSvidRequest.Size(m)
}
func (m *SignJwtSvidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignJwtSvidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignJwtSvidRequest proto.InternalMessageInfo

func (m *SignJwtSvidRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *SignJwtSvidRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *SignJwtSvidRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

type SignJwtSvidResponse struct {
	SignedJwt            string   `protobuf:"bytes,1,opt,name=signed_jwt,json=signedJwt" json:"signed_jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignJwtSvidResponse) Reset()         { *m = SignJwtSvidResponse{} }
func (m *SignJwtSvidResponse) String() string { return proto.CompactTextString(m) }
func (*SignJwtSvidResponse) ProtoMessage()    {}
func (*SignJwtSvidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{5}
}
func (m *SignJwtSvidResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignJwtSvidResponse.Unmarshal(m, b)
}
func (m *SignJwtSvidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignJwtSvidResponse.Marshal(b, m, deterministic)
}
func (dst *SignJwtSvidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignJwtSvidResponse.Merge(dst, src)
}
func (m *SignJwtSvidResponse) XXX_Size() int {
	return xxx_messageInfo_SignJwtSvidResponse.Size(m)
}
func (m *SignJwtSvidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignJwtSvidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignJwtSvidResponse proto.InternalMessageInfo

func (m *SignJwtSvidResponse) GetSignedJwt() string {
	if m != nil {
		return m.SignedJwt
	}
	return ""
}

// * Represents a request with a signed intermediate certificate.
type LoadCertificateRequest struct {
	// * Signed intermediate certificate.
	SignedIntermediateCert []byte   `protobuf:"bytes,1,opt,name=signedIntermediateCert,proto3" json:"signedIntermediateCert,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *LoadCertificateRequest) Reset()         { *m = LoadCertificateRequest{} }
func (m *LoadCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*LoadCertificateRequest) ProtoMessage()    {}
func (*LoadCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{6}
}
func (m *LoadCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadCertificateRequest.Unmarshal(m, b)
}
func (m *LoadCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadCertificateRequest.Marshal(b, m, deterministic)
}
func (dst *LoadCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadCertificateRequest.Merge(dst, src)
}
func (m *LoadCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_LoadCertificateRequest.Size(m)
}
func (m *LoadCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadCertificateRequest proto.InternalMessageInfo

func (m *LoadCertificateRequest) GetSignedIntermediateCert() []byte {
	if m != nil {
		return m.SignedIntermediateCert
	}
	return nil
}

// * Represents an empty response.
type LoadCertificateResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadCertificateResponse) Reset()         { *m = LoadCertificateResponse{} }
func (m *LoadCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*LoadCertificateResponse) ProtoMessage()    {}
func (*LoadCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca_727e435acfe15d82, []int{7}
}
func (m *LoadCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadCertificateResponse.Unmarshal(m, b)
}
func (m *LoadCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadCertificateResponse.Marshal(b, m, deterministic)
}
func (dst *LoadCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadCertificateResponse.Merge(dst, src)
}
func (m *LoadCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_LoadCertificateResponse.Size(m)
}
func (m *LoadCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadCertificateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SignX509SvidCsrRequest)(nil), "spire.server.ca.SignX509SvidCsrRequest")
	proto.RegisterType((*SignX509SvidCsrResponse)(nil), "spire.server.ca.SignX509SvidCsrResponse")
	proto.RegisterType((*GenerateCsrRequest)(nil), "spire.server.ca.GenerateCsrRequest")
	proto.RegisterType((*GenerateCsrResponse)(nil), "spire.server.ca.GenerateCsrResponse")
	proto.RegisterType((*SignJwtSvidRequest)(nil), "spire.server.ca.SignJwtSvidRequest")
	proto.RegisterType((*SignJwtSvidResponse)(nil), "spire.server.ca.SignJwtSvidResponse")
	proto.RegisterType((*LoadCertificateRequest)(nil), "spire.server.ca.LoadCertificateRequest")
	proto.RegisterType((*LoadCertificateResponse)(nil), "spire.server.ca.LoadCertificateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerCA service

type ServerCAClient interface {
	// * SignX509SvidCsr will take in a CSR and sign it with the stored intermediate certificate.
	SignX509SvidCsr(ctx context.Context, in *SignX509SvidCsrRequest, opts ...grpc.CallOption) (*SignX509SvidCsrResponse, error)
	// * SignJwtSvid will sign a JWT-A-SVID with the stored intermediate certificate.
	SignJwtSvid(ctx context.Context, in *SignJwtSvidRequest, opts ...grpc.CallOption) (*SignJwtSvidResponse, error)
	// * Used for generating a CSR for the intermediate signing certificate. The CSR will then be submitted to the CA plugin for signing.
	GenerateCsr(ctx context.Context, in *GenerateCsrRequest, opts ...grpc.CallOption) (*GenerateCsrResponse, error)
	// * Used for setting/storing the signed intermediate certificate.
	LoadCertificate(ctx context.Context, in *LoadCertificateRequest, opts ...grpc.CallOption) (*LoadCertificateResponse, error)
	// * Responsible for configuration of the plugin.
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// * Returns the version and related metadata of the installed plugin.
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type serverCAClient struct {
	cc *grpc.ClientConn
}

func NewServerCAClient(cc *grpc.ClientConn) ServerCAClient {
	return &serverCAClient{cc}
}

func (c *serverCAClient) SignX509SvidCsr(ctx context.Context, in *SignX509SvidCsrRequest, opts ...grpc.CallOption) (*SignX509SvidCsrResponse, error) {
	out := new(SignX509SvidCsrResponse)
	err := grpc.Invoke(ctx, "/spire.server.ca.ServerCA/SignX509SvidCsr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCAClient) SignJwtSvid(ctx context.Context, in *SignJwtSvidRequest, opts ...grpc.CallOption) (*SignJwtSvidResponse, error) {
	out := new(SignJwtSvidResponse)
	err := grpc.Invoke(ctx, "/spire.server.ca.ServerCA/SignJwtSvid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCAClient) GenerateCsr(ctx context.Context, in *GenerateCsrRequest, opts ...grpc.CallOption) (*GenerateCsrResponse, error) {
	out := new(GenerateCsrResponse)
	err := grpc.Invoke(ctx, "/spire.server.ca.ServerCA/GenerateCsr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCAClient) LoadCertificate(ctx context.Context, in *LoadCertificateRequest, opts ...grpc.CallOption) (*LoadCertificateResponse, error) {
	out := new(LoadCertificateResponse)
	err := grpc.Invoke(ctx, "/spire.server.ca.ServerCA/LoadCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCAClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := grpc.Invoke(ctx, "/spire.server.ca.ServerCA/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverCAClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/spire.server.ca.ServerCA/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerCA service

type ServerCAServer interface {
	// * SignX509SvidCsr will take in a CSR and sign it with the stored intermediate certificate.
	SignX509SvidCsr(context.Context, *SignX509SvidCsrRequest) (*SignX509SvidCsrResponse, error)
	// * SignJwtSvid will sign a JWT-A-SVID with the stored intermediate certificate.
	SignJwtSvid(context.Context, *SignJwtSvidRequest) (*SignJwtSvidResponse, error)
	// * Used for generating a CSR for the intermediate signing certificate. The CSR will then be submitted to the CA plugin for signing.
	GenerateCsr(context.Context, *GenerateCsrRequest) (*GenerateCsrResponse, error)
	// * Used for setting/storing the signed intermediate certificate.
	LoadCertificate(context.Context, *LoadCertificateRequest) (*LoadCertificateResponse, error)
	// * Responsible for configuration of the plugin.
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// * Returns the version and related metadata of the installed plugin.
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterServerCAServer(s *grpc.Server, srv ServerCAServer) {
	s.RegisterService(&_ServerCA_serviceDesc, srv)
}

func _ServerCA_SignX509SvidCsr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignX509SvidCsrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCAServer).SignX509SvidCsr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.ca.ServerCA/SignX509SvidCsr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCAServer).SignX509SvidCsr(ctx, req.(*SignX509SvidCsrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCA_SignJwtSvid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignJwtSvidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCAServer).SignJwtSvid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.ca.ServerCA/SignJwtSvid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCAServer).SignJwtSvid(ctx, req.(*SignJwtSvidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCA_GenerateCsr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCsrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCAServer).GenerateCsr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.ca.ServerCA/GenerateCsr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCAServer).GenerateCsr(ctx, req.(*GenerateCsrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCA_LoadCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCAServer).LoadCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.ca.ServerCA/LoadCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCAServer).LoadCertificate(ctx, req.(*LoadCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCA_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCAServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.ca.ServerCA/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCAServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerCA_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerCAServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.ca.ServerCA/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerCAServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerCA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.ca.ServerCA",
	HandlerType: (*ServerCAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignX509SvidCsr",
			Handler:    _ServerCA_SignX509SvidCsr_Handler,
		},
		{
			MethodName: "SignJwtSvid",
			Handler:    _ServerCA_SignJwtSvid_Handler,
		},
		{
			MethodName: "GenerateCsr",
			Handler:    _ServerCA_GenerateCsr_Handler,
		},
		{
			MethodName: "LoadCertificate",
			Handler:    _ServerCA_LoadCertificate_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ServerCA_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _ServerCA_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ca.proto",
}

func init() { proto.RegisterFile("ca.proto", fileDescriptor_ca_727e435acfe15d82) }

var fileDescriptor_ca_727e435acfe15d82 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x25, 0x4d, 0x41, 0xc9, 0x00, 0x0a, 0x6c, 0x51, 0x1a, 0x82, 0x90, 0x22, 0xf3, 0xd1, 0x80,
	0x84, 0x8d, 0xf8, 0x12, 0x48, 0x5c, 0x20, 0x87, 0x92, 0x8a, 0x43, 0x94, 0x5c, 0xaa, 0x5e, 0x22,
	0x77, 0x77, 0x6c, 0x16, 0x35, 0xbb, 0x66, 0x77, 0xdd, 0xfc, 0x4b, 0x7e, 0x13, 0xb2, 0x77, 0x4d,
	0xe2, 0x78, 0x4b, 0x39, 0xc5, 0x99, 0x79, 0xf3, 0xe6, 0xbd, 0x99, 0xb1, 0xa1, 0x43, 0xe3, 0x30,
	0x53, 0xd2, 0x48, 0xd2, 0xd3, 0x19, 0x57, 0x18, 0x6a, 0x54, 0x97, 0xa8, 0x42, 0x1a, 0x0f, 0x3f,
	0xa6, 0xdc, 0xfc, 0xc8, 0xcf, 0x43, 0x2a, 0x57, 0x91, 0xce, 0x78, 0x92, 0x60, 0x54, 0x42, 0xa2,
	0x12, 0x1f, 0x51, 0xb9, 0x5a, 0x49, 0x11, 0x65, 0x17, 0x79, 0xca, 0xab, 0x1f, 0x4b, 0x15, 0x7c,
	0x86, 0xfe, 0x82, 0xa7, 0xe2, 0xf4, 0xfd, 0xeb, 0x4f, 0x8b, 0x4b, 0xce, 0x26, 0x5a, 0xcd, 0xf1,
	0x57, 0x8e, 0xda, 0x90, 0x7b, 0xd0, 0xa6, 0x5a, 0x0d, 0x5a, 0xa3, 0xd6, 0xf8, 0xce, 0xbc, 0x78,
	0x2c, 0x22, 0xc6, 0x5c, 0x0c, 0xf6, 0x46, 0xad, 0xf1, 0xcd, 0x79, 0xf1, 0x18, 0x7c, 0x83, 0xc3,
	0x46, 0xb5, 0xce, 0xa4, 0xd0, 0x48, 0x5e, 0x01, 0xd1, 0x3c, 0x15, 0xc8, 0x96, 0x14, 0x95, 0xe1,
	0x09, 0xa7, 0xb1, 0x41, 0xc7, 0x76, 0xdf, 0x66, 0x26, 0x9b, 0x44, 0xf0, 0x00, 0xc8, 0x31, 0x0a,
	0x54, 0xb1, 0xc1, 0x8d, 0x86, 0xe0, 0x08, 0x0e, 0x6a, 0x51, 0xc7, 0xdd, 0x90, 0x16, 0x2c, 0x81,
	0x14, 0x42, 0x4e, 0xd6, 0xa6, 0xd0, 0x51, 0x59, 0x78, 0x04, 0x5d, 0x3b, 0x8d, 0x25, 0x67, 0x25,
	0xba, 0x3b, 0xef, 0xd8, 0xc0, 0x94, 0x35, 0xdd, 0x90, 0x21, 0x74, 0xe2, 0x9c, 0x71, 0x14, 0x14,
	0x07, 0xed, 0x51, 0xbb, 0x40, 0x57, 0xff, 0x83, 0x77, 0x70, 0x50, 0x6b, 0xe0, 0x94, 0x3c, 0x06,
	0x70, 0x2e, 0x7f, 0xae, 0x8d, 0x6b, 0xd1, 0xb5, 0x91, 0x93, 0xb5, 0x09, 0x66, 0xd0, 0xff, 0x2e,
	0xe3, 0x6d, 0xa3, 0x95, 0xb4, 0x0f, 0xd0, 0xb7, 0xb0, 0xa9, 0x30, 0xa8, 0x56, 0xc8, 0x78, 0xe1,
	0x11, 0x95, 0x71, 0xae, 0xae, 0xc8, 0x06, 0x0f, 0xe1, 0xb0, 0xc1, 0x68, 0xb5, 0xbc, 0xf9, 0xbd,
	0x0f, 0x9d, 0x45, 0x79, 0x12, 0x93, 0x2f, 0x84, 0x41, 0x6f, 0x67, 0x33, 0xe4, 0x28, 0xdc, 0x39,
	0x9b, 0xd0, 0xbf, 0xf9, 0xe1, 0xf8, 0x7a, 0xa0, 0xb3, 0x7f, 0x0a, 0xb7, 0xb7, 0xa6, 0x42, 0x9e,
	0x78, 0x0b, 0xeb, 0x4b, 0x19, 0x3e, 0xfd, 0x37, 0x68, 0xc3, 0xbc, 0xb5, 0x79, 0x0f, 0x73, 0xf3,
	0x5a, 0x3c, 0xcc, 0xbe, 0xe3, 0x61, 0xd0, 0xdb, 0x99, 0xa0, 0x67, 0x32, 0xfe, 0xad, 0x79, 0x26,
	0x73, 0xc5, 0x32, 0xc8, 0x19, 0x74, 0x27, 0x52, 0x24, 0x3c, 0xcd, 0x15, 0x92, 0x67, 0xae, 0xcc,
	0xbe, 0x87, 0xa1, 0x7b, 0x01, 0xff, 0xe6, 0x2b, 0xf6, 0xe7, 0xd7, 0xc1, 0x1c, 0x77, 0x02, 0x77,
	0x8f, 0xd1, 0xcc, 0xca, 0xf4, 0x54, 0x24, 0x92, 0xbc, 0xf0, 0x16, 0xd6, 0x30, 0x55, 0x8f, 0x97,
	0xff, 0x03, 0xb5, 0x7d, 0xbe, 0xee, 0x9f, 0xed, 0xd1, 0x78, 0x76, 0xe3, 0xfc, 0x56, 0xf9, 0xa9,
	0x78, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xb2, 0xad, 0xef, 0x81, 0x04, 0x00, 0x00,
}
