// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/server/keymanager/keymanager.proto

package keymanager // import "github.com/spiffe/spire/proto/server/keymanager"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import plugin "github.com/spiffe/spire/proto/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import proto/common/plugin/plugin.proto
type ConfigureRequest = plugin.ConfigureRequest

// GlobalConfig from public import proto/common/plugin/plugin.proto
type ConfigureRequest_GlobalConfig = plugin.ConfigureRequest_GlobalConfig

// ConfigureResponse from public import proto/common/plugin/plugin.proto
type ConfigureResponse = plugin.ConfigureResponse

// GetPluginInfoRequest from public import proto/common/plugin/plugin.proto
type GetPluginInfoRequest = plugin.GetPluginInfoRequest

// GetPluginInfoResponse from public import proto/common/plugin/plugin.proto
type GetPluginInfoResponse = plugin.GetPluginInfoResponse

type KeyType int32

const (
	KeyType_UNSPECIFIED_KEY_TYPE KeyType = 0
	KeyType_EC_P256              KeyType = 1
	KeyType_EC_P384              KeyType = 2
	KeyType_RSA_1024             KeyType = 3
	KeyType_RSA_2048             KeyType = 4
	KeyType_RSA_4096             KeyType = 5
)

var KeyType_name = map[int32]string{
	0: "UNSPECIFIED_KEY_TYPE",
	1: "EC_P256",
	2: "EC_P384",
	3: "RSA_1024",
	4: "RSA_2048",
	5: "RSA_4096",
}
var KeyType_value = map[string]int32{
	"UNSPECIFIED_KEY_TYPE": 0,
	"EC_P256":              1,
	"EC_P384":              2,
	"RSA_1024":             3,
	"RSA_2048":             4,
	"RSA_4096":             5,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{0}
}

type HashAlgorithm int32

const (
	HashAlgorithm_UNSPECIFIED_HASH_ALGORITHM HashAlgorithm = 0
	// These entries (and their values) line up with a subset of the go
	// crypto.Hash constants
	HashAlgorithm_SHA224     HashAlgorithm = 4
	HashAlgorithm_SHA256     HashAlgorithm = 5
	HashAlgorithm_SHA384     HashAlgorithm = 6
	HashAlgorithm_SHA512     HashAlgorithm = 7
	HashAlgorithm_SHA3_224   HashAlgorithm = 10
	HashAlgorithm_SHA3_256   HashAlgorithm = 11
	HashAlgorithm_SHA3_384   HashAlgorithm = 12
	HashAlgorithm_SHA3_512   HashAlgorithm = 13
	HashAlgorithm_SHA512_224 HashAlgorithm = 14
	HashAlgorithm_SHA512_256 HashAlgorithm = 15
)

var HashAlgorithm_name = map[int32]string{
	0:  "UNSPECIFIED_HASH_ALGORITHM",
	4:  "SHA224",
	5:  "SHA256",
	6:  "SHA384",
	7:  "SHA512",
	10: "SHA3_224",
	11: "SHA3_256",
	12: "SHA3_384",
	13: "SHA3_512",
	14: "SHA512_224",
	15: "SHA512_256",
}
var HashAlgorithm_value = map[string]int32{
	"UNSPECIFIED_HASH_ALGORITHM": 0,
	"SHA224":                     4,
	"SHA256":                     5,
	"SHA384":                     6,
	"SHA512":                     7,
	"SHA3_224":                   10,
	"SHA3_256":                   11,
	"SHA3_384":                   12,
	"SHA3_512":                   13,
	"SHA512_224":                 14,
	"SHA512_256":                 15,
}

func (x HashAlgorithm) String() string {
	return proto.EnumName(HashAlgorithm_name, int32(x))
}
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{1}
}

type PublicKey struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 KeyType  `protobuf:"varint,2,opt,name=type,proto3,enum=spire.server.keymanager.KeyType" json:"type,omitempty"`
	PkixData             []byte   `protobuf:"bytes,3,opt,name=pkix_data,json=pkixData,proto3" json:"pkix_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{0}
}
func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (dst *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(dst, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublicKey) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KeyType_UNSPECIFIED_KEY_TYPE
}

func (m *PublicKey) GetPkixData() []byte {
	if m != nil {
		return m.PkixData
	}
	return nil
}

type GenerateKeyRequest struct {
	KeyId                string   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeyType              KeyType  `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=spire.server.keymanager.KeyType" json:"key_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateKeyRequest) Reset()         { *m = GenerateKeyRequest{} }
func (m *GenerateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateKeyRequest) ProtoMessage()    {}
func (*GenerateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{1}
}
func (m *GenerateKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateKeyRequest.Unmarshal(m, b)
}
func (m *GenerateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateKeyRequest.Marshal(b, m, deterministic)
}
func (dst *GenerateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateKeyRequest.Merge(dst, src)
}
func (m *GenerateKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateKeyRequest.Size(m)
}
func (m *GenerateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateKeyRequest proto.InternalMessageInfo

func (m *GenerateKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *GenerateKeyRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_UNSPECIFIED_KEY_TYPE
}

type GenerateKeyResponse struct {
	PublicKey            *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GenerateKeyResponse) Reset()         { *m = GenerateKeyResponse{} }
func (m *GenerateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateKeyResponse) ProtoMessage()    {}
func (*GenerateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{2}
}
func (m *GenerateKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateKeyResponse.Unmarshal(m, b)
}
func (m *GenerateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateKeyResponse.Marshal(b, m, deterministic)
}
func (dst *GenerateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateKeyResponse.Merge(dst, src)
}
func (m *GenerateKeyResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateKeyResponse.Size(m)
}
func (m *GenerateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateKeyResponse proto.InternalMessageInfo

func (m *GenerateKeyResponse) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type GetPublicKeyRequest struct {
	KeyId                string   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPublicKeyRequest) Reset()         { *m = GetPublicKeyRequest{} }
func (m *GetPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*GetPublicKeyRequest) ProtoMessage()    {}
func (*GetPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{3}
}
func (m *GetPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicKeyRequest.Unmarshal(m, b)
}
func (m *GetPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicKeyRequest.Marshal(b, m, deterministic)
}
func (dst *GetPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicKeyRequest.Merge(dst, src)
}
func (m *GetPublicKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GetPublicKeyRequest.Size(m)
}
func (m *GetPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicKeyRequest proto.InternalMessageInfo

func (m *GetPublicKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type GetPublicKeyResponse struct {
	PublicKey            *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetPublicKeyResponse) Reset()         { *m = GetPublicKeyResponse{} }
func (m *GetPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*GetPublicKeyResponse) ProtoMessage()    {}
func (*GetPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{4}
}
func (m *GetPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicKeyResponse.Unmarshal(m, b)
}
func (m *GetPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicKeyResponse.Marshal(b, m, deterministic)
}
func (dst *GetPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicKeyResponse.Merge(dst, src)
}
func (m *GetPublicKeyResponse) XXX_Size() int {
	return xxx_messageInfo_GetPublicKeyResponse.Size(m)
}
func (m *GetPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicKeyResponse proto.InternalMessageInfo

func (m *GetPublicKeyResponse) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type GetPublicKeysRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPublicKeysRequest) Reset()         { *m = GetPublicKeysRequest{} }
func (m *GetPublicKeysRequest) String() string { return proto.CompactTextString(m) }
func (*GetPublicKeysRequest) ProtoMessage()    {}
func (*GetPublicKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{5}
}
func (m *GetPublicKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicKeysRequest.Unmarshal(m, b)
}
func (m *GetPublicKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicKeysRequest.Marshal(b, m, deterministic)
}
func (dst *GetPublicKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicKeysRequest.Merge(dst, src)
}
func (m *GetPublicKeysRequest) XXX_Size() int {
	return xxx_messageInfo_GetPublicKeysRequest.Size(m)
}
func (m *GetPublicKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicKeysRequest proto.InternalMessageInfo

type GetPublicKeysResponse struct {
	PublicKeys           []*PublicKey `protobuf:"bytes,1,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetPublicKeysResponse) Reset()         { *m = GetPublicKeysResponse{} }
func (m *GetPublicKeysResponse) String() string { return proto.CompactTextString(m) }
func (*GetPublicKeysResponse) ProtoMessage()    {}
func (*GetPublicKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{6}
}
func (m *GetPublicKeysResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicKeysResponse.Unmarshal(m, b)
}
func (m *GetPublicKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicKeysResponse.Marshal(b, m, deterministic)
}
func (dst *GetPublicKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicKeysResponse.Merge(dst, src)
}
func (m *GetPublicKeysResponse) XXX_Size() int {
	return xxx_messageInfo_GetPublicKeysResponse.Size(m)
}
func (m *GetPublicKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicKeysResponse proto.InternalMessageInfo

func (m *GetPublicKeysResponse) GetPublicKeys() []*PublicKey {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type PSSOptions struct {
	SaltLength           int32         `protobuf:"varint,1,opt,name=salt_length,json=saltLength,proto3" json:"salt_length,omitempty"`
	HashAlgorithm        HashAlgorithm `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=spire.server.keymanager.HashAlgorithm" json:"hash_algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PSSOptions) Reset()         { *m = PSSOptions{} }
func (m *PSSOptions) String() string { return proto.CompactTextString(m) }
func (*PSSOptions) ProtoMessage()    {}
func (*PSSOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{7}
}
func (m *PSSOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PSSOptions.Unmarshal(m, b)
}
func (m *PSSOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PSSOptions.Marshal(b, m, deterministic)
}
func (dst *PSSOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PSSOptions.Merge(dst, src)
}
func (m *PSSOptions) XXX_Size() int {
	return xxx_messageInfo_PSSOptions.Size(m)
}
func (m *PSSOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PSSOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PSSOptions proto.InternalMessageInfo

func (m *PSSOptions) GetSaltLength() int32 {
	if m != nil {
		return m.SaltLength
	}
	return 0
}

func (m *PSSOptions) GetHashAlgorithm() HashAlgorithm {
	if m != nil {
		return m.HashAlgorithm
	}
	return HashAlgorithm_UNSPECIFIED_HASH_ALGORITHM
}

type SignDataRequest struct {
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Data  []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Types that are valid to be assigned to SignerOpts:
	//	*SignDataRequest_HashAlgorithm
	//	*SignDataRequest_PssOptions
	SignerOpts           isSignDataRequest_SignerOpts `protobuf_oneof:"signer_opts"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SignDataRequest) Reset()         { *m = SignDataRequest{} }
func (m *SignDataRequest) String() string { return proto.CompactTextString(m) }
func (*SignDataRequest) ProtoMessage()    {}
func (*SignDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{8}
}
func (m *SignDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignDataRequest.Unmarshal(m, b)
}
func (m *SignDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignDataRequest.Marshal(b, m, deterministic)
}
func (dst *SignDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignDataRequest.Merge(dst, src)
}
func (m *SignDataRequest) XXX_Size() int {
	return xxx_messageInfo_SignDataRequest.Size(m)
}
func (m *SignDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignDataRequest proto.InternalMessageInfo

func (m *SignDataRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *SignDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type isSignDataRequest_SignerOpts interface {
	isSignDataRequest_SignerOpts()
}

type SignDataRequest_HashAlgorithm struct {
	HashAlgorithm HashAlgorithm `protobuf:"varint,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=spire.server.keymanager.HashAlgorithm,oneof"`
}

type SignDataRequest_PssOptions struct {
	PssOptions *PSSOptions `protobuf:"bytes,4,opt,name=pss_options,json=pssOptions,proto3,oneof"`
}

func (*SignDataRequest_HashAlgorithm) isSignDataRequest_SignerOpts() {}

func (*SignDataRequest_PssOptions) isSignDataRequest_SignerOpts() {}

func (m *SignDataRequest) GetSignerOpts() isSignDataRequest_SignerOpts {
	if m != nil {
		return m.SignerOpts
	}
	return nil
}

func (m *SignDataRequest) GetHashAlgorithm() HashAlgorithm {
	if x, ok := m.GetSignerOpts().(*SignDataRequest_HashAlgorithm); ok {
		return x.HashAlgorithm
	}
	return HashAlgorithm_UNSPECIFIED_HASH_ALGORITHM
}

func (m *SignDataRequest) GetPssOptions() *PSSOptions {
	if x, ok := m.GetSignerOpts().(*SignDataRequest_PssOptions); ok {
		return x.PssOptions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SignDataRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SignDataRequest_OneofMarshaler, _SignDataRequest_OneofUnmarshaler, _SignDataRequest_OneofSizer, []interface{}{
		(*SignDataRequest_HashAlgorithm)(nil),
		(*SignDataRequest_PssOptions)(nil),
	}
}

func _SignDataRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SignDataRequest)
	// signer_opts
	switch x := m.SignerOpts.(type) {
	case *SignDataRequest_HashAlgorithm:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.HashAlgorithm))
	case *SignDataRequest_PssOptions:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PssOptions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SignDataRequest.SignerOpts has unexpected type %T", x)
	}
	return nil
}

func _SignDataRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SignDataRequest)
	switch tag {
	case 2: // signer_opts.hash_algorithm
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SignerOpts = &SignDataRequest_HashAlgorithm{HashAlgorithm(x)}
		return true, err
	case 4: // signer_opts.pss_options
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PSSOptions)
		err := b.DecodeMessage(msg)
		m.SignerOpts = &SignDataRequest_PssOptions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SignDataRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SignDataRequest)
	// signer_opts
	switch x := m.SignerOpts.(type) {
	case *SignDataRequest_HashAlgorithm:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.HashAlgorithm))
	case *SignDataRequest_PssOptions:
		s := proto.Size(x.PssOptions)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SignDataResponse struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignDataResponse) Reset()         { *m = SignDataResponse{} }
func (m *SignDataResponse) String() string { return proto.CompactTextString(m) }
func (*SignDataResponse) ProtoMessage()    {}
func (*SignDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keymanager_d56d089dc6c930b3, []int{9}
}
func (m *SignDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignDataResponse.Unmarshal(m, b)
}
func (m *SignDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignDataResponse.Marshal(b, m, deterministic)
}
func (dst *SignDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignDataResponse.Merge(dst, src)
}
func (m *SignDataResponse) XXX_Size() int {
	return xxx_messageInfo_SignDataResponse.Size(m)
}
func (m *SignDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignDataResponse proto.InternalMessageInfo

func (m *SignDataResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicKey)(nil), "spire.server.keymanager.PublicKey")
	proto.RegisterType((*GenerateKeyRequest)(nil), "spire.server.keymanager.GenerateKeyRequest")
	proto.RegisterType((*GenerateKeyResponse)(nil), "spire.server.keymanager.GenerateKeyResponse")
	proto.RegisterType((*GetPublicKeyRequest)(nil), "spire.server.keymanager.GetPublicKeyRequest")
	proto.RegisterType((*GetPublicKeyResponse)(nil), "spire.server.keymanager.GetPublicKeyResponse")
	proto.RegisterType((*GetPublicKeysRequest)(nil), "spire.server.keymanager.GetPublicKeysRequest")
	proto.RegisterType((*GetPublicKeysResponse)(nil), "spire.server.keymanager.GetPublicKeysResponse")
	proto.RegisterType((*PSSOptions)(nil), "spire.server.keymanager.PSSOptions")
	proto.RegisterType((*SignDataRequest)(nil), "spire.server.keymanager.SignDataRequest")
	proto.RegisterType((*SignDataResponse)(nil), "spire.server.keymanager.SignDataResponse")
	proto.RegisterEnum("spire.server.keymanager.KeyType", KeyType_name, KeyType_value)
	proto.RegisterEnum("spire.server.keymanager.HashAlgorithm", HashAlgorithm_name, HashAlgorithm_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyManagerClient is the client API for KeyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyManagerClient interface {
	// Generates a new key
	GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyResponse, error)
	// Get a public key by key id
	GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error)
	// Gets all public keys
	GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error)
	// Signs data with private key
	SignData(ctx context.Context, in *SignDataRequest, opts ...grpc.CallOption) (*SignDataResponse, error)
	// Applies the plugin configuration
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the installed plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type keyManagerClient struct {
	cc *grpc.ClientConn
}

func NewKeyManagerClient(cc *grpc.ClientConn) KeyManagerClient {
	return &keyManagerClient{cc}
}

func (c *keyManagerClient) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*GenerateKeyResponse, error) {
	out := new(GenerateKeyResponse)
	err := c.cc.Invoke(ctx, "/spire.server.keymanager.KeyManager/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) GetPublicKey(ctx context.Context, in *GetPublicKeyRequest, opts ...grpc.CallOption) (*GetPublicKeyResponse, error) {
	out := new(GetPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/spire.server.keymanager.KeyManager/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error) {
	out := new(GetPublicKeysResponse)
	err := c.cc.Invoke(ctx, "/spire.server.keymanager.KeyManager/GetPublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) SignData(ctx context.Context, in *SignDataRequest, opts ...grpc.CallOption) (*SignDataResponse, error) {
	out := new(SignDataResponse)
	err := c.cc.Invoke(ctx, "/spire.server.keymanager.KeyManager/SignData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.server.keymanager.KeyManager/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.keymanager.KeyManager/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyManagerServer is the server API for KeyManager service.
type KeyManagerServer interface {
	// Generates a new key
	GenerateKey(context.Context, *GenerateKeyRequest) (*GenerateKeyResponse, error)
	// Get a public key by key id
	GetPublicKey(context.Context, *GetPublicKeyRequest) (*GetPublicKeyResponse, error)
	// Gets all public keys
	GetPublicKeys(context.Context, *GetPublicKeysRequest) (*GetPublicKeysResponse, error)
	// Signs data with private key
	SignData(context.Context, *SignDataRequest) (*SignDataResponse, error)
	// Applies the plugin configuration
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the installed plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterKeyManagerServer(s *grpc.Server, srv KeyManagerServer) {
	s.RegisterService(&_KeyManager_serviceDesc, srv)
}

func _KeyManager_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.keymanager.KeyManager/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GenerateKey(ctx, req.(*GenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.keymanager.KeyManager/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GetPublicKey(ctx, req.(*GetPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_GetPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GetPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.keymanager.KeyManager/GetPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GetPublicKeys(ctx, req.(*GetPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_SignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).SignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.keymanager.KeyManager/SignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).SignData(ctx, req.(*SignDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.keymanager.KeyManager/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.keymanager.KeyManager/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.keymanager.KeyManager",
	HandlerType: (*KeyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _KeyManager_GenerateKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _KeyManager_GetPublicKey_Handler,
		},
		{
			MethodName: "GetPublicKeys",
			Handler:    _KeyManager_GetPublicKeys_Handler,
		},
		{
			MethodName: "SignData",
			Handler:    _KeyManager_SignData_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _KeyManager_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _KeyManager_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server/keymanager/keymanager.proto",
}

func init() {
	proto.RegisterFile("proto/server/keymanager/keymanager.proto", fileDescriptor_keymanager_d56d089dc6c930b3)
}

var fileDescriptor_keymanager_d56d089dc6c930b3 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x6d, 0x6f, 0xda, 0x48,
	0x10, 0xc6, 0x84, 0xd7, 0x31, 0x10, 0x6b, 0x2f, 0xb9, 0x43, 0xdc, 0xe9, 0x8a, 0x5c, 0x35, 0x22,
	0x69, 0x0a, 0xc4, 0x01, 0x94, 0xaa, 0x9f, 0x08, 0x21, 0x01, 0x91, 0x34, 0xc8, 0xa4, 0x52, 0x13,
	0x55, 0xb2, 0x9c, 0xb0, 0xd8, 0x16, 0x60, 0xbb, 0x5e, 0x53, 0xd5, 0x52, 0xff, 0x57, 0xff, 0x50,
	0x7f, 0x44, 0x3f, 0x56, 0xb6, 0xd7, 0xbc, 0x24, 0x25, 0x71, 0xd5, 0x7e, 0xf2, 0xcc, 0xec, 0xf3,
	0xcc, 0xb3, 0x33, 0xb3, 0xbb, 0x86, 0x92, 0x69, 0x19, 0xb6, 0x51, 0x21, 0xd8, 0xfa, 0x84, 0xad,
	0xca, 0x18, 0x3b, 0x53, 0x59, 0x97, 0x95, 0x15, 0xb3, 0xec, 0x41, 0xd0, 0x3f, 0xc4, 0xd4, 0x2c,
	0x5c, 0xf6, 0x91, 0xe5, 0xc5, 0x72, 0xa1, 0xe8, 0xa7, 0xb8, 0x33, 0xa6, 0x53, 0x43, 0xaf, 0x98,
	0x93, 0x99, 0xa2, 0x05, 0x1f, 0x9f, 0xca, 0xeb, 0x90, 0xee, 0xcf, 0x6e, 0x27, 0xda, 0x5d, 0x0f,
	0x3b, 0x28, 0x07, 0x51, 0x6d, 0x98, 0x67, 0x8a, 0x4c, 0x29, 0x2d, 0x46, 0xb5, 0x21, 0xaa, 0x41,
	0xcc, 0x76, 0x4c, 0x9c, 0x8f, 0x16, 0x99, 0x52, 0x4e, 0x28, 0x96, 0xd7, 0xc8, 0x94, 0x7b, 0xd8,
	0xb9, 0x72, 0x4c, 0x2c, 0x7a, 0x68, 0xf4, 0x2f, 0xa4, 0xcd, 0xb1, 0xf6, 0x59, 0x1a, 0xca, 0xb6,
	0x9c, 0xdf, 0x28, 0x32, 0xa5, 0x8c, 0x98, 0x72, 0x03, 0x27, 0xb2, 0x2d, 0xf3, 0x2a, 0xa0, 0x33,
	0xac, 0x63, 0x4b, 0xb6, 0x71, 0x0f, 0x3b, 0x22, 0xfe, 0x38, 0xc3, 0xc4, 0x46, 0xdb, 0x90, 0x18,
	0x63, 0x47, 0x9a, 0x8b, 0xc7, 0xc7, 0xd8, 0xe9, 0x0e, 0xd1, 0x1b, 0x48, 0xb9, 0xe1, 0x5f, 0xda,
	0x43, 0x72, 0xec, 0x1b, 0xfc, 0x7b, 0xf8, 0x6b, 0x45, 0x89, 0x98, 0x86, 0x4e, 0x30, 0x6a, 0x02,
	0x98, 0x5e, 0xc1, 0xd2, 0x18, 0x3b, 0x9e, 0x1c, 0x2b, 0xf0, 0x6b, 0xb3, 0xce, 0x7b, 0x23, 0xa6,
	0xcd, 0xc0, 0xe4, 0xf7, 0xdd, 0xcc, 0xf6, 0x62, 0xe9, 0xd1, 0x22, 0xf8, 0x6b, 0xd8, 0x5a, 0x45,
	0xff, 0xb9, 0x8d, 0xfc, 0xbd, 0x9a, 0x9a, 0xd0, 0x9d, 0xf0, 0x1f, 0x60, 0xfb, 0x5e, 0x9c, 0x6a,
	0xb6, 0x80, 0x5d, 0x68, 0x92, 0x3c, 0x53, 0xdc, 0x08, 0x29, 0x0a, 0x73, 0x51, 0xc2, 0x7f, 0x01,
	0xe8, 0x0f, 0x06, 0x97, 0xa6, 0xad, 0x19, 0x3a, 0x41, 0xcf, 0x80, 0x25, 0xf2, 0xc4, 0x96, 0x26,
	0x58, 0x57, 0x6c, 0xd5, 0xab, 0x23, 0x2e, 0x82, 0x1b, 0x3a, 0xf7, 0x22, 0xe8, 0x02, 0x72, 0xaa,
	0x4c, 0x54, 0x49, 0x9e, 0x28, 0x86, 0xa5, 0xd9, 0xea, 0x94, 0x8e, 0x72, 0x67, 0xad, 0x6c, 0x47,
	0x26, 0x6a, 0x33, 0x40, 0x8b, 0x59, 0x75, 0xd9, 0xe5, 0xbf, 0x31, 0xb0, 0x39, 0xd0, 0x14, 0xdd,
	0x3d, 0x4d, 0x4f, 0x1c, 0x1f, 0x04, 0xb1, 0xa5, 0x33, 0xe8, 0xd9, 0xe8, 0xf2, 0xf7, 0x76, 0xd3,
	0x89, 0xdc, 0xdb, 0x0f, 0x3a, 0x05, 0xd6, 0x24, 0x44, 0x32, 0xfc, 0x76, 0xe4, 0x63, 0xde, 0x1c,
	0x9f, 0xaf, 0x6f, 0xe9, 0xbc, 0x73, 0x9d, 0x88, 0x08, 0x26, 0x21, 0xd4, 0x3b, 0xce, 0x02, 0x4b,
	0x34, 0x45, 0xc7, 0x96, 0x9b, 0x8a, 0xf0, 0x55, 0xe0, 0x16, 0x55, 0xd2, 0xe9, 0xfd, 0x07, 0x69,
	0x17, 0x22, 0xdb, 0x33, 0x0b, 0x7b, 0x95, 0x66, 0xc4, 0x45, 0x60, 0x4f, 0x81, 0x24, 0xbd, 0x03,
	0x28, 0x0f, 0x5b, 0xef, 0xde, 0x0e, 0xfa, 0xed, 0x56, 0xf7, 0xb4, 0xdb, 0x3e, 0x91, 0x7a, 0xed,
	0x6b, 0xe9, 0xea, 0xba, 0xdf, 0xe6, 0x22, 0x88, 0x85, 0x64, 0xbb, 0x25, 0xf5, 0x85, 0x7a, 0x83,
	0x63, 0x02, 0xe7, 0xf0, 0xa8, 0xc6, 0x45, 0x51, 0x06, 0x52, 0xe2, 0xa0, 0x29, 0x1d, 0x54, 0x85,
	0x1a, 0xb7, 0x11, 0x78, 0x42, 0xb5, 0x76, 0xc4, 0xc5, 0x02, 0xaf, 0x56, 0x7d, 0xdd, 0xe0, 0xe2,
	0x7b, 0x5f, 0x19, 0xc8, 0xae, 0x34, 0x05, 0xfd, 0x0f, 0x85, 0x65, 0xbd, 0x4e, 0x73, 0xd0, 0x91,
	0x9a, 0xe7, 0x67, 0x97, 0x62, 0xf7, 0xaa, 0x73, 0xc1, 0x45, 0x10, 0x40, 0x62, 0xd0, 0x69, 0x0a,
	0x42, 0x8d, 0x8b, 0x05, 0x76, 0xbd, 0xc1, 0xc5, 0xa9, 0xed, 0xea, 0x27, 0xa8, 0x5d, 0x3f, 0x10,
	0xb8, 0xa4, 0xab, 0xe7, 0xc6, 0x25, 0x97, 0x01, 0x0b, 0xaf, 0xde, 0xe0, 0xd8, 0xb9, 0xe7, 0xb2,
	0x32, 0x73, 0xcf, 0xe5, 0x65, 0x51, 0x0e, 0xc0, 0xcf, 0xe1, 0x31, 0x73, 0xcb, 0x7e, 0xbd, 0xc1,
	0x6d, 0x0a, 0xdf, 0x63, 0x00, 0x3d, 0xec, 0x5c, 0xf8, 0xb3, 0x40, 0x2a, 0xb0, 0x4b, 0x2f, 0x04,
	0x7a, 0xb9, 0x76, 0x68, 0x0f, 0x5f, 0xac, 0xc2, 0x7e, 0x38, 0x30, 0x9d, 0xdc, 0x18, 0x32, 0xcb,
	0x17, 0x12, 0x3d, 0xc6, 0x7e, 0xf0, 0xb0, 0x14, 0x5e, 0x85, 0x44, 0x53, 0x31, 0x1d, 0xb2, 0x2b,
	0xb7, 0x1f, 0x85, 0xe3, 0x07, 0xaf, 0x47, 0xa1, 0x1c, 0x16, 0x4e, 0xf5, 0x24, 0x48, 0x05, 0x47,
	0x15, 0x95, 0xd6, 0x72, 0xef, 0xdd, 0xd9, 0xc2, 0x6e, 0x08, 0x24, 0x15, 0xb8, 0x81, 0x74, 0xcb,
	0xd0, 0x47, 0x9a, 0x32, 0xb3, 0x30, 0x7a, 0x41, 0x79, 0xfe, 0x3f, 0xad, 0x4c, 0x7f, 0x66, 0xf3,
	0xf5, 0x20, 0xfd, 0xce, 0x53, 0x30, 0x9a, 0x7b, 0xe4, 0x37, 0xcb, 0x5b, 0xee, 0xea, 0x23, 0x03,
	0xed, 0xfe, 0x94, 0xb8, 0x82, 0x09, 0x34, 0xf6, 0xc2, 0x40, 0x7d, 0x9d, 0xe3, 0x83, 0x9b, 0x8a,
	0xa2, 0xd9, 0xea, 0xec, 0xd6, 0x45, 0x57, 0x88, 0xa9, 0x8d, 0x46, 0xb8, 0xe2, 0xd1, 0x2b, 0x6b,
	0x7e, 0xf3, 0xfd, 0xc8, 0x6d, 0xc2, 0x5b, 0x3a, 0xfc, 0x11, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x10,
	0x3c, 0x85, 0x0a, 0x08, 0x00, 0x00,
}
