// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodeattestor.proto

package nodeattestor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/spire/proto/common"
import plugin "github.com/spiffe/spire/proto/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureRequest = plugin.ConfigureRequest

// ConfigureResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureResponse = plugin.ConfigureResponse

// GetPluginInfoRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoRequest = plugin.GetPluginInfoRequest

// GetPluginInfoResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoResponse = plugin.GetPluginInfoResponse

// Empty from public import github.com/spiffe/spire/proto/common/common.proto
type Empty = common.Empty

// AttestationData from public import github.com/spiffe/spire/proto/common/common.proto
type AttestationData = common.AttestationData

// Selector from public import github.com/spiffe/spire/proto/common/common.proto
type Selector = common.Selector

// Selectors from public import github.com/spiffe/spire/proto/common/common.proto
type Selectors = common.Selectors

// RegistrationEntry from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntry = common.RegistrationEntry

// RegistrationEntries from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntries = common.RegistrationEntries

// * Represents a request to attest a node.
type AttestRequest struct {
	// * A type which contains attestation data for specific platform.
	AttestationData *common.AttestationData `protobuf:"bytes,1,opt,name=attestationData" json:"attestationData,omitempty"`
	// * Is true if the Base SPIFFE ID is present in the Attested Node table.
	AttestedBefore bool `protobuf:"varint,2,opt,name=attestedBefore" json:"attestedBefore,omitempty"`
	// * Challenge response
	Response             []byte   `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestRequest) Reset()         { *m = AttestRequest{} }
func (m *AttestRequest) String() string { return proto.CompactTextString(m) }
func (*AttestRequest) ProtoMessage()    {}
func (*AttestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeattestor_cc6bd02cd45a6113, []int{0}
}
func (m *AttestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestRequest.Unmarshal(m, b)
}
func (m *AttestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestRequest.Marshal(b, m, deterministic)
}
func (dst *AttestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestRequest.Merge(dst, src)
}
func (m *AttestRequest) XXX_Size() int {
	return xxx_messageInfo_AttestRequest.Size(m)
}
func (m *AttestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestRequest proto.InternalMessageInfo

func (m *AttestRequest) GetAttestationData() *common.AttestationData {
	if m != nil {
		return m.AttestationData
	}
	return nil
}

func (m *AttestRequest) GetAttestedBefore() bool {
	if m != nil {
		return m.AttestedBefore
	}
	return false
}

func (m *AttestRequest) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

// * Represents a response when attesting a node.
type AttestResponse struct {
	// * True/False
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	// * Used by the Server to validate the SPIFFE Id in the Certificate signing request.
	BaseSPIFFEID string `protobuf:"bytes,2,opt,name=baseSPIFFEID" json:"baseSPIFFEID,omitempty"`
	// * Challenge required for attestation
	Challenge []byte `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// * Optional list of selectors
	Selectors            []*common.Selector `protobuf:"bytes,4,rep,name=selectors" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AttestResponse) Reset()         { *m = AttestResponse{} }
func (m *AttestResponse) String() string { return proto.CompactTextString(m) }
func (*AttestResponse) ProtoMessage()    {}
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_nodeattestor_cc6bd02cd45a6113, []int{1}
}
func (m *AttestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestResponse.Unmarshal(m, b)
}
func (m *AttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestResponse.Marshal(b, m, deterministic)
}
func (dst *AttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestResponse.Merge(dst, src)
}
func (m *AttestResponse) XXX_Size() int {
	return xxx_messageInfo_AttestResponse.Size(m)
}
func (m *AttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestResponse proto.InternalMessageInfo

func (m *AttestResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *AttestResponse) GetBaseSPIFFEID() string {
	if m != nil {
		return m.BaseSPIFFEID
	}
	return ""
}

func (m *AttestResponse) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *AttestResponse) GetSelectors() []*common.Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func init() {
	proto.RegisterType((*AttestRequest)(nil), "spire.agent.nodeattestor.AttestRequest")
	proto.RegisterType((*AttestResponse)(nil), "spire.agent.nodeattestor.AttestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeAttestor service

type NodeAttestorClient interface {
	// * Attesta a node.
	Attest(ctx context.Context, opts ...grpc.CallOption) (NodeAttestor_AttestClient, error)
	// * Responsible for configuration of the plugin.
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// * Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type nodeAttestorClient struct {
	cc *grpc.ClientConn
}

func NewNodeAttestorClient(cc *grpc.ClientConn) NodeAttestorClient {
	return &nodeAttestorClient{cc}
}

func (c *nodeAttestorClient) Attest(ctx context.Context, opts ...grpc.CallOption) (NodeAttestor_AttestClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeAttestor_serviceDesc.Streams[0], c.cc, "/spire.agent.nodeattestor.NodeAttestor/Attest", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAttestorAttestClient{stream}
	return x, nil
}

type NodeAttestor_AttestClient interface {
	Send(*AttestRequest) error
	Recv() (*AttestResponse, error)
	grpc.ClientStream
}

type nodeAttestorAttestClient struct {
	grpc.ClientStream
}

func (x *nodeAttestorAttestClient) Send(m *AttestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAttestorAttestClient) Recv() (*AttestResponse, error) {
	m := new(AttestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeAttestorClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := grpc.Invoke(ctx, "/spire.agent.nodeattestor.NodeAttestor/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAttestorClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/spire.agent.nodeattestor.NodeAttestor/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeAttestor service

type NodeAttestorServer interface {
	// * Attesta a node.
	Attest(NodeAttestor_AttestServer) error
	// * Responsible for configuration of the plugin.
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// * Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterNodeAttestorServer(s *grpc.Server, srv NodeAttestorServer) {
	s.RegisterService(&_NodeAttestor_serviceDesc, srv)
}

func _NodeAttestor_Attest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeAttestorServer).Attest(&nodeAttestorAttestServer{stream})
}

type NodeAttestor_AttestServer interface {
	Send(*AttestResponse) error
	Recv() (*AttestRequest, error)
	grpc.ServerStream
}

type nodeAttestorAttestServer struct {
	grpc.ServerStream
}

func (x *nodeAttestorAttestServer) Send(m *AttestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAttestorAttestServer) Recv() (*AttestRequest, error) {
	m := new(AttestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeAttestor_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAttestorServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.nodeattestor.NodeAttestor/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAttestorServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAttestor_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAttestorServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.nodeattestor.NodeAttestor/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAttestorServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeAttestor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.agent.nodeattestor.NodeAttestor",
	HandlerType: (*NodeAttestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _NodeAttestor_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _NodeAttestor_GetPluginInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attest",
			Handler:       _NodeAttestor_Attest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nodeattestor.proto",
}

func init() { proto.RegisterFile("nodeattestor.proto", fileDescriptor_nodeattestor_cc6bd02cd45a6113) }

var fileDescriptor_nodeattestor_cc6bd02cd45a6113 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x6e, 0xda, 0x30,
	0x1c, 0x9e, 0x61, 0x43, 0xc4, 0x04, 0x26, 0x59, 0xd3, 0x14, 0x45, 0x9b, 0x14, 0x21, 0x8d, 0x65,
	0x3b, 0x24, 0x1b, 0xed, 0xa1, 0x57, 0x28, 0x05, 0x71, 0xa9, 0xa2, 0x70, 0xe3, 0x52, 0x99, 0xe4,
	0x97, 0x10, 0x29, 0xd8, 0x69, 0xec, 0xf4, 0x69, 0xaa, 0xbe, 0x44, 0x5f, 0xb0, 0x52, 0x9c, 0x00,
	0x41, 0xad, 0xe0, 0xe4, 0xf8, 0xfb, 0x93, 0xef, 0xfb, 0xd9, 0xc6, 0x84, 0xf1, 0x10, 0xa8, 0x94,
	0x20, 0x24, 0xcf, 0x9d, 0x2c, 0xe7, 0x92, 0x13, 0x43, 0x64, 0x49, 0x0e, 0x0e, 0x8d, 0x81, 0x49,
	0xe7, 0x98, 0x37, 0x6f, 0xe2, 0x44, 0x6e, 0x8b, 0x8d, 0x13, 0xf0, 0x9d, 0x2b, 0xb2, 0x24, 0x8a,
	0xc0, 0x2d, 0xb5, 0x6e, 0x69, 0x74, 0x03, 0xbe, 0xdb, 0x71, 0xe6, 0x66, 0x69, 0x11, 0x27, 0xf5,
	0xa2, 0xfe, 0x69, 0xfe, 0xbf, 0xc8, 0xa9, 0x16, 0x65, 0x19, 0x3e, 0x23, 0xdc, 0x9f, 0x94, 0xc9,
	0x3e, 0x3c, 0x16, 0x20, 0x24, 0x59, 0xe0, 0xaf, 0xaa, 0x0a, 0x95, 0x09, 0x67, 0x33, 0x2a, 0xa9,
	0x81, 0x2c, 0x64, 0xf7, 0xc6, 0x3f, 0x1d, 0x55, 0xb9, 0xf2, 0x4f, 0x9a, 0x22, 0xff, 0xd4, 0x45,
	0x46, 0x78, 0xa0, 0x20, 0x08, 0xa7, 0x10, 0xf1, 0x1c, 0x8c, 0x96, 0x85, 0xec, 0xae, 0x7f, 0x82,
	0x12, 0x13, 0x77, 0x73, 0x10, 0x19, 0x67, 0x02, 0x8c, 0xb6, 0x85, 0x6c, 0xdd, 0xdf, 0xef, 0x87,
	0x2f, 0x08, 0x0f, 0xea, 0x7a, 0x0a, 0x22, 0xdf, 0xf0, 0x97, 0x27, 0x9a, 0x26, 0x61, 0xd9, 0xaa,
	0xeb, 0xab, 0x0d, 0x19, 0x62, 0x7d, 0x43, 0x05, 0xac, 0xbc, 0xe5, 0x7c, 0x7e, 0xb7, 0x9c, 0x95,
	0x51, 0x9a, 0xdf, 0xc0, 0xc8, 0x0f, 0xac, 0x05, 0x5b, 0x9a, 0xa6, 0xc0, 0xe2, 0x3a, 0xe9, 0x00,
	0x90, 0x6b, 0xac, 0x09, 0x48, 0x21, 0x90, 0x3c, 0x17, 0xc6, 0x67, 0xab, 0x6d, 0xf7, 0xc6, 0xdf,
	0x9b, 0x13, 0xaf, 0x2a, 0xda, 0x3f, 0x08, 0xc7, 0xaf, 0x2d, 0xac, 0xdf, 0xf3, 0x10, 0x26, 0xd5,
	0xed, 0x91, 0x07, 0xdc, 0x51, 0xdf, 0xe4, 0xb7, 0xf3, 0xd1, 0x15, 0x3b, 0x8d, 0x13, 0x37, 0xed,
	0xf3, 0x42, 0x35, 0xbb, 0x8d, 0xfe, 0x21, 0xb2, 0xc6, 0xda, 0x2d, 0x67, 0x51, 0x12, 0x17, 0x39,
	0x90, 0x5f, 0xcd, 0x86, 0xd5, 0x6b, 0xd8, 0xf3, 0x75, 0xc2, 0xe8, 0x9c, 0xac, 0x3a, 0xdb, 0x08,
	0xf7, 0x17, 0x20, 0xbd, 0x92, 0x5e, 0xb2, 0x88, 0x93, 0x3f, 0xef, 0x1a, 0x1b, 0x9a, 0x3a, 0xe3,
	0xef, 0x25, 0x52, 0x95, 0x33, 0x1d, 0xac, 0xf5, 0xe3, 0x31, 0xbd, 0x4f, 0x1e, 0xda, 0x74, 0xca,
	0x07, 0x79, 0xf5, 0x16, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xb8, 0x3c, 0xaa, 0x2d, 0x03, 0x00, 0x00,
}
