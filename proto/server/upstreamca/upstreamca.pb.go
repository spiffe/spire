// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/server/upstreamca/upstreamca.proto

package upstreamca // import "github.com/spiffe/spire/proto/server/upstreamca"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import plugin "github.com/spiffe/spire/proto/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import proto/common/plugin/plugin.proto
type ConfigureRequest = plugin.ConfigureRequest

// GlobalConfig from public import proto/common/plugin/plugin.proto
type ConfigureRequest_GlobalConfig = plugin.ConfigureRequest_GlobalConfig

// ConfigureResponse from public import proto/common/plugin/plugin.proto
type ConfigureResponse = plugin.ConfigureResponse

// GetPluginInfoRequest from public import proto/common/plugin/plugin.proto
type GetPluginInfoRequest = plugin.GetPluginInfoRequest

// GetPluginInfoResponse from public import proto/common/plugin/plugin.proto
type GetPluginInfoResponse = plugin.GetPluginInfoResponse

type SubmitCSRRequest struct {
	// * Certificate signing request.
	Csr                  []byte   `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitCSRRequest) Reset()         { *m = SubmitCSRRequest{} }
func (m *SubmitCSRRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitCSRRequest) ProtoMessage()    {}
func (*SubmitCSRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upstreamca_6a8d072c89873571, []int{0}
}
func (m *SubmitCSRRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitCSRRequest.Unmarshal(m, b)
}
func (m *SubmitCSRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitCSRRequest.Marshal(b, m, deterministic)
}
func (dst *SubmitCSRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitCSRRequest.Merge(dst, src)
}
func (m *SubmitCSRRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitCSRRequest.Size(m)
}
func (m *SubmitCSRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitCSRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitCSRRequest proto.InternalMessageInfo

func (m *SubmitCSRRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

type SubmitCSRResponse struct {
	// * Signed certificate
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// * Upstream trust bundle.
	UpstreamTrustBundle  []byte   `protobuf:"bytes,2,opt,name=upstreamTrustBundle,proto3" json:"upstreamTrustBundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitCSRResponse) Reset()         { *m = SubmitCSRResponse{} }
func (m *SubmitCSRResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitCSRResponse) ProtoMessage()    {}
func (*SubmitCSRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upstreamca_6a8d072c89873571, []int{1}
}
func (m *SubmitCSRResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitCSRResponse.Unmarshal(m, b)
}
func (m *SubmitCSRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitCSRResponse.Marshal(b, m, deterministic)
}
func (dst *SubmitCSRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitCSRResponse.Merge(dst, src)
}
func (m *SubmitCSRResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitCSRResponse.Size(m)
}
func (m *SubmitCSRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitCSRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitCSRResponse proto.InternalMessageInfo

func (m *SubmitCSRResponse) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *SubmitCSRResponse) GetUpstreamTrustBundle() []byte {
	if m != nil {
		return m.UpstreamTrustBundle
	}
	return nil
}

func init() {
	proto.RegisterType((*SubmitCSRRequest)(nil), "spire.server.upstreamca.SubmitCSRRequest")
	proto.RegisterType((*SubmitCSRResponse)(nil), "spire.server.upstreamca.SubmitCSRResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpstreamCAClient is the client API for UpstreamCA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpstreamCAClient interface {
	// * Responsible for configuration of the plugin.
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// * Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
	// * Will take in a CSR and submit it to the upstream CA for signing
	// (“upstream” CA can be local self-signed root in simple case).
	SubmitCSR(ctx context.Context, in *SubmitCSRRequest, opts ...grpc.CallOption) (*SubmitCSRResponse, error)
}

type upstreamCAClient struct {
	cc *grpc.ClientConn
}

func NewUpstreamCAClient(cc *grpc.ClientConn) UpstreamCAClient {
	return &upstreamCAClient{cc}
}

func (c *upstreamCAClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.server.upstreamca.UpstreamCA/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamCAClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.upstreamca.UpstreamCA/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamCAClient) SubmitCSR(ctx context.Context, in *SubmitCSRRequest, opts ...grpc.CallOption) (*SubmitCSRResponse, error) {
	out := new(SubmitCSRResponse)
	err := c.cc.Invoke(ctx, "/spire.server.upstreamca.UpstreamCA/SubmitCSR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamCAServer is the server API for UpstreamCA service.
type UpstreamCAServer interface {
	// * Responsible for configuration of the plugin.
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// * Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
	// * Will take in a CSR and submit it to the upstream CA for signing
	// (“upstream” CA can be local self-signed root in simple case).
	SubmitCSR(context.Context, *SubmitCSRRequest) (*SubmitCSRResponse, error)
}

func RegisterUpstreamCAServer(s *grpc.Server, srv UpstreamCAServer) {
	s.RegisterService(&_UpstreamCA_serviceDesc, srv)
}

func _UpstreamCA_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamca.UpstreamCA/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamCA_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamca.UpstreamCA/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamCA_SubmitCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).SubmitCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamca.UpstreamCA/SubmitCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).SubmitCSR(ctx, req.(*SubmitCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpstreamCA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.upstreamca.UpstreamCA",
	HandlerType: (*UpstreamCAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _UpstreamCA_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _UpstreamCA_GetPluginInfo_Handler,
		},
		{
			MethodName: "SubmitCSR",
			Handler:    _UpstreamCA_SubmitCSR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server/upstreamca/upstreamca.proto",
}

func init() {
	proto.RegisterFile("proto/server/upstreamca/upstreamca.proto", fileDescriptor_upstreamca_6a8d072c89873571)
}

var fileDescriptor_upstreamca_6a8d072c89873571 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcb, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x05, 0x8d, 0x09, 0x27, 0x9a, 0x60, 0x5d, 0x48, 0x58, 0x11, 0xa2, 0x06, 0x5d, 0xb4,
	0x5e, 0x9e, 0x40, 0x58, 0x18, 0x77, 0x64, 0xd0, 0x85, 0xec, 0x98, 0xf1, 0x74, 0x6c, 0xc2, 0xb4,
	0xb5, 0x17, 0x9f, 0xcc, 0x07, 0x34, 0xb4, 0x9d, 0x11, 0x15, 0x2f, 0xab, 0x9e, 0xf4, 0xff, 0x4e,
	0xff, 0xbf, 0xa7, 0x85, 0x91, 0x36, 0xca, 0x29, 0x66, 0xd1, 0xbc, 0xa2, 0x61, 0x5e, 0x5b, 0x67,
	0x70, 0x51, 0x15, 0x8b, 0xb5, 0x92, 0x06, 0x84, 0x1c, 0x59, 0x2d, 0x0c, 0xd2, 0x48, 0xd2, 0x0f,
	0xb9, 0x3f, 0x88, 0x47, 0x14, 0xaa, 0xaa, 0x94, 0x64, 0x7a, 0xe9, 0x4b, 0x51, 0x2f, 0xb1, 0x75,
	0x78, 0x0c, 0xdd, 0x99, 0xcf, 0x2b, 0xe1, 0x26, 0xb3, 0x2c, 0xc3, 0x17, 0x8f, 0xd6, 0x91, 0x2e,
	0x6c, 0x17, 0xd6, 0xf4, 0x5a, 0x83, 0xd6, 0x68, 0x2f, 0x5b, 0x95, 0xc3, 0x47, 0x38, 0x58, 0xa3,
	0xac, 0x56, 0xd2, 0x22, 0x21, 0xb0, 0x53, 0xa0, 0x71, 0x89, 0x0b, 0x35, 0xb9, 0x80, 0xc3, 0xda,
	0xfe, 0xde, 0x78, 0xeb, 0xc6, 0x5e, 0x3e, 0x2d, 0xb1, 0xd7, 0x0e, 0xc8, 0x26, 0xe9, 0xea, 0xad,
	0x0d, 0xf0, 0x90, 0xf6, 0x27, 0x37, 0x64, 0x0e, 0x9d, 0x89, 0x92, 0x5c, 0x94, 0xde, 0x20, 0x39,
	0xa1, 0xf1, 0x62, 0x31, 0x3f, 0x4d, 0xc1, 0x1b, 0x3d, 0xe5, 0xed, 0x9f, 0xfe, 0x85, 0xa5, 0xc0,
	0x1c, 0xf6, 0x6f, 0xd1, 0x4d, 0x83, 0x7c, 0x27, 0xb9, 0x22, 0x67, 0x1b, 0x1b, 0x3f, 0x31, 0xb5,
	0xc7, 0xf9, 0x7f, 0xd0, 0xe4, 0x93, 0x43, 0xa7, 0x99, 0x56, 0xe3, 0xf1, 0xed, 0x71, 0xe8, 0xd7,
	0xb9, 0x37, 0x1e, 0xbf, 0xa2, 0xd1, 0x63, 0x7c, 0x39, 0x67, 0xa5, 0x70, 0xcf, 0x3e, 0x5f, 0x25,
	0x62, 0x56, 0x0b, 0xce, 0x91, 0x85, 0x76, 0xf6, 0xc3, 0xb7, 0x99, 0x6e, 0xe5, 0xbb, 0x41, 0xba,
	0x7e, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x62, 0xf5, 0x30, 0x5a, 0x02, 0x00, 0x00,
}
