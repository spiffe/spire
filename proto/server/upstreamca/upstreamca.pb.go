// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upstreamca.proto

/*
Package upstreamca is a generated protocol buffer package.

It is generated from these files:
	upstreamca.proto

It has these top-level messages:
	SubmitCSRRequest
	SubmitCSRResponse
*/
package upstreamca

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import spire_common_plugin "github.com/spiffe/spire/pkg/common/plugin"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type ConfigureRequest spire_common_plugin.ConfigureRequest

func (m *ConfigureRequest) Reset()         { (*spire_common_plugin.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string { return (*spire_common_plugin.ConfigureRequest)(m).String() }
func (*ConfigureRequest) ProtoMessage()    {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*spire_common_plugin.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type ConfigureResponse spire_common_plugin.ConfigureResponse

func (m *ConfigureResponse) Reset() { (*spire_common_plugin.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string {
	return (*spire_common_plugin.ConfigureResponse)(m).String()
}
func (*ConfigureResponse) ProtoMessage() {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*spire_common_plugin.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type GetPluginInfoRequest spire_common_plugin.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset() { (*spire_common_plugin.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string {
	return (*spire_common_plugin.GetPluginInfoRequest)(m).String()
}
func (*GetPluginInfoRequest) ProtoMessage() {}

// GetPluginInfoResponse from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type GetPluginInfoResponse spire_common_plugin.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset() { (*spire_common_plugin.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).String()
}
func (*GetPluginInfoResponse) ProtoMessage() {}
func (m *GetPluginInfoResponse) GetName() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetName()
}
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetType()
}
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetCompany()
}

// PluginInfoRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type PluginInfoRequest spire_common_plugin.PluginInfoRequest

func (m *PluginInfoRequest) Reset() { (*spire_common_plugin.PluginInfoRequest)(m).Reset() }
func (m *PluginInfoRequest) String() string {
	return (*spire_common_plugin.PluginInfoRequest)(m).String()
}
func (*PluginInfoRequest) ProtoMessage() {}

// PluginInfoReply from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type PluginInfoReply spire_common_plugin.PluginInfoReply

func (m *PluginInfoReply) Reset()         { (*spire_common_plugin.PluginInfoReply)(m).Reset() }
func (m *PluginInfoReply) String() string { return (*spire_common_plugin.PluginInfoReply)(m).String() }
func (*PluginInfoReply) ProtoMessage()    {}
func (m *PluginInfoReply) GetPluginInfo() []*GetPluginInfoResponse {
	o := (*spire_common_plugin.PluginInfoReply)(m).GetPluginInfo()
	if o == nil {
		return nil
	}
	s := make([]*GetPluginInfoResponse, len(o))
	for i, x := range o {
		s[i] = (*GetPluginInfoResponse)(x)
	}
	return s
}

// StopRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type StopRequest spire_common_plugin.StopRequest

func (m *StopRequest) Reset()         { (*spire_common_plugin.StopRequest)(m).Reset() }
func (m *StopRequest) String() string { return (*spire_common_plugin.StopRequest)(m).String() }
func (*StopRequest) ProtoMessage()    {}

// StopReply from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type StopReply spire_common_plugin.StopReply

func (m *StopReply) Reset()         { (*spire_common_plugin.StopReply)(m).Reset() }
func (m *StopReply) String() string { return (*spire_common_plugin.StopReply)(m).String() }
func (*StopReply) ProtoMessage()    {}

type SubmitCSRRequest struct {
	// * Certificate signing request.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (m *SubmitCSRRequest) Reset()                    { *m = SubmitCSRRequest{} }
func (m *SubmitCSRRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitCSRRequest) ProtoMessage()               {}
func (*SubmitCSRRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubmitCSRRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

type SubmitCSRResponse struct {
	// * Signed certificate
	Cert []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	// * Upstream trust bundle.
	UpstreamTrustBundle []byte `protobuf:"bytes,2,opt,name=upstreamTrustBundle,proto3" json:"upstreamTrustBundle,omitempty"`
}

func (m *SubmitCSRResponse) Reset()                    { *m = SubmitCSRResponse{} }
func (m *SubmitCSRResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitCSRResponse) ProtoMessage()               {}
func (*SubmitCSRResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubmitCSRResponse) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *SubmitCSRResponse) GetUpstreamTrustBundle() []byte {
	if m != nil {
		return m.UpstreamTrustBundle
	}
	return nil
}

func init() {
	proto.RegisterType((*SubmitCSRRequest)(nil), "spire.server.upstreamca.SubmitCSRRequest")
	proto.RegisterType((*SubmitCSRResponse)(nil), "spire.server.upstreamca.SubmitCSRResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UpstreamCA service

type UpstreamCAClient interface {
	// * Responsible for configuration of the plugin.
	Configure(ctx context.Context, in *spire_common_plugin.ConfigureRequest, opts ...grpc.CallOption) (*spire_common_plugin.ConfigureResponse, error)
	// * Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(ctx context.Context, in *spire_common_plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*spire_common_plugin.GetPluginInfoResponse, error)
	// * Will take in a CSR and submit it to the upstream CA for signing
	// (“upstream” CA can be local self-signed root in simple case).
	SubmitCSR(ctx context.Context, in *SubmitCSRRequest, opts ...grpc.CallOption) (*SubmitCSRResponse, error)
}

type upstreamCAClient struct {
	cc *grpc.ClientConn
}

func NewUpstreamCAClient(cc *grpc.ClientConn) UpstreamCAClient {
	return &upstreamCAClient{cc}
}

func (c *upstreamCAClient) Configure(ctx context.Context, in *spire_common_plugin.ConfigureRequest, opts ...grpc.CallOption) (*spire_common_plugin.ConfigureResponse, error) {
	out := new(spire_common_plugin.ConfigureResponse)
	err := grpc.Invoke(ctx, "/spire.server.upstreamca.UpstreamCA/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamCAClient) GetPluginInfo(ctx context.Context, in *spire_common_plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*spire_common_plugin.GetPluginInfoResponse, error) {
	out := new(spire_common_plugin.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/spire.server.upstreamca.UpstreamCA/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamCAClient) SubmitCSR(ctx context.Context, in *SubmitCSRRequest, opts ...grpc.CallOption) (*SubmitCSRResponse, error) {
	out := new(SubmitCSRResponse)
	err := grpc.Invoke(ctx, "/spire.server.upstreamca.UpstreamCA/SubmitCSR", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpstreamCA service

type UpstreamCAServer interface {
	// * Responsible for configuration of the plugin.
	Configure(context.Context, *spire_common_plugin.ConfigureRequest) (*spire_common_plugin.ConfigureResponse, error)
	// * Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(context.Context, *spire_common_plugin.GetPluginInfoRequest) (*spire_common_plugin.GetPluginInfoResponse, error)
	// * Will take in a CSR and submit it to the upstream CA for signing
	// (“upstream” CA can be local self-signed root in simple case).
	SubmitCSR(context.Context, *SubmitCSRRequest) (*SubmitCSRResponse, error)
}

func RegisterUpstreamCAServer(s *grpc.Server, srv UpstreamCAServer) {
	s.RegisterService(&_UpstreamCA_serviceDesc, srv)
}

func _UpstreamCA_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spire_common_plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamca.UpstreamCA/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).Configure(ctx, req.(*spire_common_plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamCA_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spire_common_plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamca.UpstreamCA/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).GetPluginInfo(ctx, req.(*spire_common_plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamCA_SubmitCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).SubmitCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamca.UpstreamCA/SubmitCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).SubmitCSR(ctx, req.(*SubmitCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpstreamCA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.upstreamca.UpstreamCA",
	HandlerType: (*UpstreamCAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _UpstreamCA_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _UpstreamCA_GetPluginInfo_Handler,
		},
		{
			MethodName: "SubmitCSR",
			Handler:    _UpstreamCA_SubmitCSR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstreamca.proto",
}

func init() { proto.RegisterFile("upstreamca.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcb, 0x4b, 0x03, 0x31,
	0x10, 0xc6, 0x6d, 0x15, 0xa1, 0x43, 0x85, 0x1a, 0x0f, 0x96, 0x9e, 0xa4, 0xa8, 0xa8, 0x87, 0xac,
	0x28, 0x78, 0xb7, 0x7b, 0x10, 0x6f, 0x65, 0xab, 0x07, 0x7b, 0xeb, 0xc6, 0xc9, 0x1a, 0x6c, 0x1e,
	0xe6, 0xe1, 0x5f, 0xe6, 0x1f, 0x28, 0x66, 0xb3, 0x5b, 0x1f, 0x45, 0x3d, 0x65, 0xc8, 0xf7, 0x4b,
	0xbe, 0x6f, 0x66, 0x60, 0x10, 0x8c, 0xf3, 0x16, 0x17, 0x92, 0x2d, 0xa8, 0xb1, 0xda, 0x6b, 0xb2,
	0xef, 0x8c, 0xb0, 0x48, 0x1d, 0xda, 0x57, 0xb4, 0x74, 0x25, 0x8f, 0xae, 0x2a, 0xe1, 0x9f, 0x42,
	0x49, 0x99, 0x96, 0x99, 0x33, 0x82, 0x73, 0xcc, 0x22, 0x9a, 0x99, 0xe7, 0x2a, 0x63, 0x5a, 0x4a,
	0xad, 0x32, 0xb3, 0x0c, 0x95, 0x68, 0x8e, 0xfa, 0xc3, 0xf1, 0x21, 0x0c, 0x66, 0xa1, 0x94, 0xc2,
	0xe7, 0xb3, 0xa2, 0xc0, 0x97, 0x80, 0xce, 0x93, 0x01, 0x6c, 0x32, 0x67, 0x87, 0x9d, 0x83, 0xce,
	0x49, 0xbf, 0xf8, 0x28, 0xc7, 0x0f, 0xb0, 0xfb, 0x89, 0x72, 0x46, 0x2b, 0x87, 0x84, 0xc0, 0x16,
	0x43, 0xeb, 0x13, 0x17, 0x6b, 0x72, 0x0e, 0x7b, 0x4d, 0xa8, 0x3b, 0x1b, 0x9c, 0x9f, 0x04, 0xf5,
	0xb8, 0xc4, 0x61, 0x37, 0x22, 0xeb, 0xa4, 0x8b, 0xb7, 0x2e, 0xc0, 0x7d, 0xba, 0xcf, 0xaf, 0xc9,
	0x1c, 0x7a, 0xb9, 0x56, 0x5c, 0x54, 0xc1, 0x22, 0x39, 0xa2, 0x75, 0xbb, 0x75, 0x7e, 0x9a, 0x82,
	0xb7, 0x7a, 0xca, 0x3b, 0x3a, 0xfe, 0x0b, 0x4b, 0x81, 0x39, 0xec, 0xdc, 0xa0, 0x9f, 0x46, 0xf9,
	0x56, 0x71, 0x4d, 0x4e, 0xd7, 0x3e, 0xfc, 0xc2, 0x34, 0x1e, 0x67, 0xff, 0x41, 0x93, 0x4f, 0x09,
	0xbd, 0x76, 0x5a, 0xad, 0xc7, 0x8f, 0x95, 0xd1, 0xef, 0x73, 0x6f, 0x3d, 0x7e, 0x45, 0x6b, 0x8f,
	0x49, 0x7f, 0x0e, 0x2b, 0x7d, 0xba, 0x51, 0x6e, 0xc7, 0x75, 0x5e, 0xbe, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x84, 0x7e, 0x9b, 0x63, 0x33, 0x02, 0x00, 0x00,
}
