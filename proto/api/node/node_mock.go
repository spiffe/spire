// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/api/node (interfaces: NodeClient)

package node

import (
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockNodeClient is a mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return _m.recorder
}

// FetchBaseSVID mocks base method
func (_m *MockNodeClient) FetchBaseSVID(_param0 context.Context, _param1 *FetchBaseSVIDRequest, _param2 ...grpc.CallOption) (*FetchBaseSVIDResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "FetchBaseSVID", _s...)
	ret0, _ := ret[0].(*FetchBaseSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBaseSVID indicates an expected call of FetchBaseSVID
func (_mr *MockNodeClientMockRecorder) FetchBaseSVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchBaseSVID", reflect.TypeOf((*MockNodeClient)(nil).FetchBaseSVID), _s...)
}

// FetchCPBundle mocks base method
func (_m *MockNodeClient) FetchCPBundle(_param0 context.Context, _param1 *FetchCPBundleRequest, _param2 ...grpc.CallOption) (*FetchCPBundleResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "FetchCPBundle", _s...)
	ret0, _ := ret[0].(*FetchCPBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCPBundle indicates an expected call of FetchCPBundle
func (_mr *MockNodeClientMockRecorder) FetchCPBundle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchCPBundle", reflect.TypeOf((*MockNodeClient)(nil).FetchCPBundle), _s...)
}

// FetchFederatedBundle mocks base method
func (_m *MockNodeClient) FetchFederatedBundle(_param0 context.Context, _param1 *FetchFederatedBundleRequest, _param2 ...grpc.CallOption) (*FetchFederatedBundleResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "FetchFederatedBundle", _s...)
	ret0, _ := ret[0].(*FetchFederatedBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFederatedBundle indicates an expected call of FetchFederatedBundle
func (_mr *MockNodeClientMockRecorder) FetchFederatedBundle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchFederatedBundle", reflect.TypeOf((*MockNodeClient)(nil).FetchFederatedBundle), _s...)
}

// FetchSVID mocks base method
func (_m *MockNodeClient) FetchSVID(_param0 context.Context, _param1 *FetchSVIDRequest, _param2 ...grpc.CallOption) (*FetchSVIDResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "FetchSVID", _s...)
	ret0, _ := ret[0].(*FetchSVIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSVID indicates an expected call of FetchSVID
func (_mr *MockNodeClientMockRecorder) FetchSVID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchSVID", reflect.TypeOf((*MockNodeClient)(nil).FetchSVID), _s...)
}
