// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/api/registration/registration.proto

package registration // import "github.com/spiffe/spire/proto/api/registration"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/spire/proto/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Mode controls the delete behavior if there are other records
// associated with the bundle (e.g. registration entries).
type DeleteFederatedBundleRequest_Mode int32

const (
	// RESTRICT prevents the bundle from being deleted in the presence of associated entries
	DeleteFederatedBundleRequest_RESTRICT DeleteFederatedBundleRequest_Mode = 0
	// DELETE deletes the bundle and associated entries
	DeleteFederatedBundleRequest_DELETE DeleteFederatedBundleRequest_Mode = 1
	// DISSOCIATE deletes the bundle and dissociates associated entries
	DeleteFederatedBundleRequest_DISSOCIATE DeleteFederatedBundleRequest_Mode = 2
)

var DeleteFederatedBundleRequest_Mode_name = map[int32]string{
	0: "RESTRICT",
	1: "DELETE",
	2: "DISSOCIATE",
}
var DeleteFederatedBundleRequest_Mode_value = map[string]int32{
	"RESTRICT":   0,
	"DELETE":     1,
	"DISSOCIATE": 2,
}

func (x DeleteFederatedBundleRequest_Mode) String() string {
	return proto.EnumName(DeleteFederatedBundleRequest_Mode_name, int32(x))
}
func (DeleteFederatedBundleRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{6, 0}
}

// A type that represents the id of an entry.
type RegistrationEntryID struct {
	// RegistrationEntryID.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationEntryID) Reset()         { *m = RegistrationEntryID{} }
func (m *RegistrationEntryID) String() string { return proto.CompactTextString(m) }
func (*RegistrationEntryID) ProtoMessage()    {}
func (*RegistrationEntryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{0}
}
func (m *RegistrationEntryID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationEntryID.Unmarshal(m, b)
}
func (m *RegistrationEntryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationEntryID.Marshal(b, m, deterministic)
}
func (dst *RegistrationEntryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationEntryID.Merge(dst, src)
}
func (m *RegistrationEntryID) XXX_Size() int {
	return xxx_messageInfo_RegistrationEntryID.Size(m)
}
func (m *RegistrationEntryID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationEntryID.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationEntryID proto.InternalMessageInfo

func (m *RegistrationEntryID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a parent Id.
type ParentID struct {
	// ParentId.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParentID) Reset()         { *m = ParentID{} }
func (m *ParentID) String() string { return proto.CompactTextString(m) }
func (*ParentID) ProtoMessage()    {}
func (*ParentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{1}
}
func (m *ParentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParentID.Unmarshal(m, b)
}
func (m *ParentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParentID.Marshal(b, m, deterministic)
}
func (dst *ParentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParentID.Merge(dst, src)
}
func (m *ParentID) XXX_Size() int {
	return xxx_messageInfo_ParentID.Size(m)
}
func (m *ParentID) XXX_DiscardUnknown() {
	xxx_messageInfo_ParentID.DiscardUnknown(m)
}

var xxx_messageInfo_ParentID proto.InternalMessageInfo

func (m *ParentID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a SPIFFE Id.
type SpiffeID struct {
	// SpiffeId.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiffeID) Reset()         { *m = SpiffeID{} }
func (m *SpiffeID) String() string { return proto.CompactTextString(m) }
func (*SpiffeID) ProtoMessage()    {}
func (*SpiffeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{2}
}
func (m *SpiffeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpiffeID.Unmarshal(m, b)
}
func (m *SpiffeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpiffeID.Marshal(b, m, deterministic)
}
func (dst *SpiffeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiffeID.Merge(dst, src)
}
func (m *SpiffeID) XXX_Size() int {
	return xxx_messageInfo_SpiffeID.Size(m)
}
func (m *SpiffeID) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiffeID.DiscardUnknown(m)
}

var xxx_messageInfo_SpiffeID proto.InternalMessageInfo

func (m *SpiffeID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type used to update registration entries
type UpdateEntryRequest struct {
	// Registration entry to update
	Entry                *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateEntryRequest) Reset()         { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()    {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{3}
}
func (m *UpdateEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntryRequest.Unmarshal(m, b)
}
func (m *UpdateEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntryRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntryRequest.Merge(dst, src)
}
func (m *UpdateEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEntryRequest.Size(m)
}
func (m *UpdateEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntryRequest proto.InternalMessageInfo

func (m *UpdateEntryRequest) GetEntry() *common.RegistrationEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// A CA bundle for a different Trust Domain than the one used and managed by the Server.
type FederatedBundle struct {
	// A SPIFFE ID that has a Federated Bundle (deprecated)
	DEPRECATEDSpiffeId string `protobuf:"bytes,1,opt,name=DEPRECATED_spiffe_id,json=DEPRECATEDSpiffeId,proto3" json:"DEPRECATED_spiffe_id,omitempty"`
	// ASN.1 DER data of the bundle (deprecated)
	DEPRECATEDCaCerts []byte `protobuf:"bytes,2,opt,name=DEPRECATED_ca_certs,json=DEPRECATEDCaCerts,proto3" json:"DEPRECATED_ca_certs,omitempty"`
	// Common bundle format
	Bundle               *common.Bundle `protobuf:"bytes,3,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FederatedBundle) Reset()         { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()    {}
func (*FederatedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{4}
}
func (m *FederatedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundle.Unmarshal(m, b)
}
func (m *FederatedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundle.Marshal(b, m, deterministic)
}
func (dst *FederatedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundle.Merge(dst, src)
}
func (m *FederatedBundle) XXX_Size() int {
	return xxx_messageInfo_FederatedBundle.Size(m)
}
func (m *FederatedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundle proto.InternalMessageInfo

func (m *FederatedBundle) GetDEPRECATEDSpiffeId() string {
	if m != nil {
		return m.DEPRECATEDSpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetDEPRECATEDCaCerts() []byte {
	if m != nil {
		return m.DEPRECATEDCaCerts
	}
	return nil
}

func (m *FederatedBundle) GetBundle() *common.Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

// A type that represents a federated bundle id.
type FederatedBundleID struct {
	// SPIFFE ID of the federated bundle
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FederatedBundleID) Reset()         { *m = FederatedBundleID{} }
func (m *FederatedBundleID) String() string { return proto.CompactTextString(m) }
func (*FederatedBundleID) ProtoMessage()    {}
func (*FederatedBundleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{5}
}
func (m *FederatedBundleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundleID.Unmarshal(m, b)
}
func (m *FederatedBundleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundleID.Marshal(b, m, deterministic)
}
func (dst *FederatedBundleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundleID.Merge(dst, src)
}
func (m *FederatedBundleID) XXX_Size() int {
	return xxx_messageInfo_FederatedBundleID.Size(m)
}
func (m *FederatedBundleID) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundleID.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundleID proto.InternalMessageInfo

func (m *FederatedBundleID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteFederatedBundleRequest struct {
	Id                   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode                 DeleteFederatedBundleRequest_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=spire.api.registration.DeleteFederatedBundleRequest_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DeleteFederatedBundleRequest) Reset()         { *m = DeleteFederatedBundleRequest{} }
func (m *DeleteFederatedBundleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFederatedBundleRequest) ProtoMessage()    {}
func (*DeleteFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{6}
}
func (m *DeleteFederatedBundleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteFederatedBundleRequest.Unmarshal(m, b)
}
func (m *DeleteFederatedBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteFederatedBundleRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteFederatedBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFederatedBundleRequest.Merge(dst, src)
}
func (m *DeleteFederatedBundleRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteFederatedBundleRequest.Size(m)
}
func (m *DeleteFederatedBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFederatedBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFederatedBundleRequest proto.InternalMessageInfo

func (m *DeleteFederatedBundleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteFederatedBundleRequest) GetMode() DeleteFederatedBundleRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return DeleteFederatedBundleRequest_RESTRICT
}

// JoinToken message is used for registering a new token
type JoinToken struct {
	// The join token. If not set, one will be generated
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// TTL in seconds
	Ttl                  int32    `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinToken) Reset()         { *m = JoinToken{} }
func (m *JoinToken) String() string { return proto.CompactTextString(m) }
func (*JoinToken) ProtoMessage()    {}
func (*JoinToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{7}
}
func (m *JoinToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinToken.Unmarshal(m, b)
}
func (m *JoinToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinToken.Marshal(b, m, deterministic)
}
func (dst *JoinToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinToken.Merge(dst, src)
}
func (m *JoinToken) XXX_Size() int {
	return xxx_messageInfo_JoinToken.Size(m)
}
func (m *JoinToken) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinToken.DiscardUnknown(m)
}

var xxx_messageInfo_JoinToken proto.InternalMessageInfo

func (m *JoinToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinToken) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// CA Bundle of the server
type Bundle struct {
	// ASN.1 DER data of the bundle (deprecated).
	DEPRECATEDCaCerts []byte `protobuf:"bytes,1,opt,name=DEPRECATED_ca_certs,json=DEPRECATEDCaCerts,proto3" json:"DEPRECATED_ca_certs,omitempty"`
	// Common bundle format
	Bundle               *common.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_229d124d6c0cfee4, []int{8}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (dst *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(dst, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetDEPRECATEDCaCerts() []byte {
	if m != nil {
		return m.DEPRECATEDCaCerts
	}
	return nil
}

func (m *Bundle) GetBundle() *common.Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistrationEntryID)(nil), "spire.api.registration.RegistrationEntryID")
	proto.RegisterType((*ParentID)(nil), "spire.api.registration.ParentID")
	proto.RegisterType((*SpiffeID)(nil), "spire.api.registration.SpiffeID")
	proto.RegisterType((*UpdateEntryRequest)(nil), "spire.api.registration.UpdateEntryRequest")
	proto.RegisterType((*FederatedBundle)(nil), "spire.api.registration.FederatedBundle")
	proto.RegisterType((*FederatedBundleID)(nil), "spire.api.registration.FederatedBundleID")
	proto.RegisterType((*DeleteFederatedBundleRequest)(nil), "spire.api.registration.DeleteFederatedBundleRequest")
	proto.RegisterType((*JoinToken)(nil), "spire.api.registration.JoinToken")
	proto.RegisterType((*Bundle)(nil), "spire.api.registration.Bundle")
	proto.RegisterEnum("spire.api.registration.DeleteFederatedBundleRequest_Mode", DeleteFederatedBundleRequest_Mode_name, DeleteFederatedBundleRequest_Mode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*RegistrationEntryID, error)
	// Deletes an entry and returns the deleted entry.
	DeleteEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Retrieve a specific registered entry.
	FetchEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Retrieve all registered entries.
	FetchEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Updates a specific registered entry.
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Returns all the Entries associated with the ParentID value.
	ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Returns all the entries associated with a selector value.
	ListBySelector(ctx context.Context, in *common.Selector, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error)
	// Retrieves a single federated bundle
	FetchFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*FederatedBundle, error)
	// Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Registration_ListFederatedBundlesClient, error)
	// Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error)
	// Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// Create a new join token
	CreateJoinToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error)
	// Retrieves the CA bundle.
	FetchBundle(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundle, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateEntry(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*RegistrationEntryID, error) {
	out := new(RegistrationEntryID)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListByParentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelector(ctx context.Context, in *common.Selector, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListBySelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListBySpiffeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*FederatedBundle, error) {
	out := new(FederatedBundle)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Registration_ListFederatedBundlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registration_serviceDesc.Streams[0], "/spire.api.registration.Registration/ListFederatedBundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationListFederatedBundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registration_ListFederatedBundlesClient interface {
	Recv() (*FederatedBundle, error)
	grpc.ClientStream
}

type registrationListFederatedBundlesClient struct {
	grpc.ClientStream
}

func (x *registrationListFederatedBundlesClient) Recv() (*FederatedBundle, error) {
	m := new(FederatedBundle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registrationClient) UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/UpdateFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/DeleteFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateJoinToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error) {
	out := new(JoinToken)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateJoinToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchBundle(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(context.Context, *common.RegistrationEntry) (*RegistrationEntryID, error)
	// Deletes an entry and returns the deleted entry.
	DeleteEntry(context.Context, *RegistrationEntryID) (*common.RegistrationEntry, error)
	// Retrieve a specific registered entry.
	FetchEntry(context.Context, *RegistrationEntryID) (*common.RegistrationEntry, error)
	// Retrieve all registered entries.
	FetchEntries(context.Context, *common.Empty) (*common.RegistrationEntries, error)
	// Updates a specific registered entry.
	UpdateEntry(context.Context, *UpdateEntryRequest) (*common.RegistrationEntry, error)
	// Returns all the Entries associated with the ParentID value.
	ListByParentID(context.Context, *ParentID) (*common.RegistrationEntries, error)
	// Returns all the entries associated with a selector value.
	ListBySelector(context.Context, *common.Selector) (*common.RegistrationEntries, error)
	// Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(context.Context, *SpiffeID) (*common.RegistrationEntries, error)
	// Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(context.Context, *FederatedBundle) (*common.Empty, error)
	// Retrieves a single federated bundle
	FetchFederatedBundle(context.Context, *FederatedBundleID) (*FederatedBundle, error)
	// Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(*common.Empty, Registration_ListFederatedBundlesServer) error
	// Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(context.Context, *FederatedBundle) (*common.Empty, error)
	// Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(context.Context, *DeleteFederatedBundleRequest) (*common.Empty, error)
	// Create a new join token
	CreateJoinToken(context.Context, *JoinToken) (*JoinToken, error)
	// Retrieves the CA bundle.
	FetchBundle(context.Context, *common.Empty) (*Bundle, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RegistrationEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntry(ctx, req.(*common.RegistrationEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteEntry(ctx, req.(*RegistrationEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntry(ctx, req.(*RegistrationEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntries(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListByParentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListByParentID(ctx, req.(*ParentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelector(ctx, req.(*common.Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySpiffeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpiffeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySpiffeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, req.(*SpiffeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchFederatedBundle(ctx, req.(*FederatedBundleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistrationServer).ListFederatedBundles(m, &registrationListFederatedBundlesServer{stream})
}

type Registration_ListFederatedBundlesServer interface {
	Send(*FederatedBundle) error
	grpc.ServerStream
}

type registrationListFederatedBundlesServer struct {
	grpc.ServerStream
}

func (x *registrationListFederatedBundlesServer) Send(m *FederatedBundle) error {
	return x.ServerStream.SendMsg(m)
}

func _Registration_UpdateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/UpdateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/DeleteFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, req.(*DeleteFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateJoinToken(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchBundle(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.registration.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _Registration_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Registration_DeleteEntry_Handler,
		},
		{
			MethodName: "FetchEntry",
			Handler:    _Registration_FetchEntry_Handler,
		},
		{
			MethodName: "FetchEntries",
			Handler:    _Registration_FetchEntries_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Registration_UpdateEntry_Handler,
		},
		{
			MethodName: "ListByParentID",
			Handler:    _Registration_ListByParentID_Handler,
		},
		{
			MethodName: "ListBySelector",
			Handler:    _Registration_ListBySelector_Handler,
		},
		{
			MethodName: "ListBySpiffeID",
			Handler:    _Registration_ListBySpiffeID_Handler,
		},
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
		{
			MethodName: "FetchFederatedBundle",
			Handler:    _Registration_FetchFederatedBundle_Handler,
		},
		{
			MethodName: "UpdateFederatedBundle",
			Handler:    _Registration_UpdateFederatedBundle_Handler,
		},
		{
			MethodName: "DeleteFederatedBundle",
			Handler:    _Registration_DeleteFederatedBundle_Handler,
		},
		{
			MethodName: "CreateJoinToken",
			Handler:    _Registration_CreateJoinToken_Handler,
		},
		{
			MethodName: "FetchBundle",
			Handler:    _Registration_FetchBundle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFederatedBundles",
			Handler:       _Registration_ListFederatedBundles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api/registration/registration.proto",
}

func init() {
	proto.RegisterFile("proto/api/registration/registration.proto", fileDescriptor_registration_229d124d6c0cfee4)
}

var fileDescriptor_registration_229d124d6c0cfee4 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4f, 0x4f, 0xdb, 0x4c,
	0x10, 0xc6, 0x5f, 0x07, 0x88, 0x60, 0x12, 0x85, 0x30, 0x04, 0xc4, 0x6b, 0x55, 0x2d, 0xb8, 0xaa,
	0x0a, 0x6d, 0xe5, 0x44, 0xd0, 0x1e, 0x7a, 0x24, 0xb1, 0x91, 0x52, 0x40, 0x45, 0x4e, 0x68, 0x25,
	0x38, 0x20, 0x27, 0x1e, 0x60, 0xdb, 0xc4, 0x76, 0xed, 0xe5, 0xc0, 0xc7, 0xe9, 0x27, 0xe8, 0xad,
	0x9f, 0xaf, 0xf2, 0xae, 0xf3, 0xcf, 0xd8, 0xc4, 0xad, 0xda, 0x13, 0x5e, 0xcf, 0xcc, 0xe3, 0x9f,
	0x9e, 0x99, 0x1d, 0x02, 0x7b, 0x7e, 0xe0, 0x71, 0xaf, 0x6e, 0xfb, 0xac, 0x1e, 0xd0, 0x0d, 0x0b,
	0x79, 0x60, 0x73, 0xe6, 0xb9, 0x33, 0x07, 0x5d, 0xe4, 0xe0, 0x66, 0xe8, 0xb3, 0x80, 0x74, 0xdb,
	0x67, 0xfa, 0x74, 0x54, 0xfd, 0x5f, 0x4a, 0xf4, 0xbd, 0xe1, 0xd0, 0x73, 0xe3, 0x3f, 0xb2, 0x44,
	0x7b, 0x01, 0xeb, 0xd6, 0x54, 0xaa, 0xe9, 0xf2, 0xe0, 0xbe, 0x6d, 0x60, 0x05, 0x0a, 0xcc, 0xd9,
	0x52, 0xb6, 0x95, 0xdd, 0x15, 0xab, 0xc0, 0x1c, 0x4d, 0x85, 0xe5, 0x33, 0x3b, 0x20, 0x97, 0xa7,
	0xc7, 0x3a, 0x3e, 0xbb, 0xbe, 0xa6, 0x94, 0xd8, 0x31, 0xe0, 0xb9, 0xef, 0xd8, 0x9c, 0x84, 0xb0,
	0x45, 0xdf, 0xee, 0x28, 0xe4, 0xf8, 0x0e, 0x96, 0x28, 0x3a, 0x8b, 0xc4, 0xd2, 0xfe, 0x33, 0x5d,
	0x72, 0xc7, 0x60, 0x0f, 0x78, 0x2c, 0x99, 0xad, 0x7d, 0x57, 0x60, 0xf5, 0x88, 0x1c, 0x0a, 0x6c,
	0x4e, 0x4e, 0xf3, 0xce, 0x75, 0x06, 0x84, 0x0d, 0xa8, 0x19, 0xe6, 0x99, 0x65, 0xb6, 0x0e, 0xbb,
	0xa6, 0x71, 0x15, 0x0a, 0x8e, 0xab, 0x31, 0x02, 0x4e, 0x62, 0x31, 0xa2, 0x83, 0x3a, 0xac, 0x4f,
	0x55, 0xf4, 0xed, 0xab, 0x3e, 0x05, 0x3c, 0xdc, 0x2a, 0x6c, 0x2b, 0xbb, 0x65, 0x6b, 0x6d, 0x12,
	0x6a, 0xd9, 0xad, 0x28, 0x80, 0x6f, 0xa0, 0xd8, 0x13, 0xdf, 0xda, 0x5a, 0x10, 0xb4, 0xb5, 0x59,
	0x5a, 0xc9, 0x61, 0xc5, 0x39, 0xda, 0x73, 0x58, 0x4b, 0x20, 0xa6, 0xb8, 0xf2, 0x43, 0x81, 0x27,
	0x06, 0x0d, 0x88, 0x53, 0x22, 0x77, 0x64, 0x50, 0xa2, 0x00, 0x4f, 0x61, 0x71, 0xe8, 0x39, 0x24,
	0x20, 0x2b, 0xfb, 0xef, 0xf5, 0xf4, 0x3e, 0xeb, 0x8f, 0x69, 0xea, 0xa7, 0x9e, 0x43, 0x96, 0x90,
	0xd1, 0x1a, 0xb0, 0x18, 0x9d, 0xb0, 0x0c, 0xcb, 0x96, 0xd9, 0xe9, 0x5a, 0xed, 0x56, 0xb7, 0xfa,
	0x1f, 0x02, 0x14, 0x0d, 0xf3, 0xc4, 0xec, 0x9a, 0x55, 0x05, 0x2b, 0x00, 0x46, 0xbb, 0xd3, 0xf9,
	0xd8, 0x6a, 0x1f, 0x76, 0xcd, 0x6a, 0x41, 0x3b, 0x80, 0x95, 0x0f, 0x1e, 0x73, 0xbb, 0xde, 0x57,
	0x72, 0xb1, 0x06, 0x4b, 0x3c, 0x7a, 0x88, 0x01, 0xe5, 0x01, 0xab, 0xb0, 0xc0, 0xf9, 0x40, 0x20,
	0x2e, 0x59, 0xd1, 0xa3, 0x76, 0x0d, 0xc5, 0xb8, 0x4b, 0x19, 0x9e, 0x2b, 0xf3, 0x3d, 0x2f, 0xcc,
	0xf7, 0x7c, 0xff, 0x27, 0x40, 0x79, 0x7a, 0x68, 0xf0, 0x12, 0x4a, 0xad, 0x80, 0x46, 0x53, 0x87,
	0xf3, 0xe6, 0x4b, 0x7d, 0x9d, 0x65, 0x68, 0xda, 0xd5, 0xb8, 0x84, 0x92, 0xf4, 0x59, 0x8a, 0xff,
	0x4e, 0xad, 0x3a, 0x8f, 0x04, 0x2f, 0x00, 0x8e, 0x88, 0xf7, 0x6f, 0xff, 0x85, 0xf6, 0x11, 0x94,
	0xc7, 0xda, 0x8c, 0x42, 0x5c, 0x9f, 0x2d, 0x30, 0x87, 0x3e, 0xbf, 0x57, 0x77, 0x1e, 0x57, 0x89,
	0xea, 0x2e, 0xa0, 0x34, 0x75, 0xa7, 0xf1, 0x55, 0x16, 0xe4, 0xc3, 0x8b, 0x3f, 0x9f, 0xf1, 0x1c,
	0x2a, 0x27, 0x2c, 0xe4, 0xcd, 0xfb, 0xf1, 0xb6, 0xd9, 0xce, 0x92, 0x1f, 0x65, 0xe4, 0x41, 0x3e,
	0x1e, 0xc9, 0x76, 0x68, 0x40, 0x7d, 0xee, 0x05, 0xb8, 0x39, 0x5b, 0x34, 0x7a, 0x9f, 0x47, 0x6c,
	0xcc, 0x38, 0xde, 0x7a, 0x99, 0x8c, 0xa3, 0x8c, 0x7c, 0xb2, 0x1b, 0x72, 0x68, 0x93, 0x2b, 0xee,
	0x65, 0x96, 0x7a, 0x22, 0x51, 0x4d, 0x6b, 0x28, 0x7e, 0x81, 0x9a, 0xe8, 0x7a, 0x52, 0x75, 0x2f,
	0xa7, 0x6a, 0xdb, 0x50, 0xf3, 0x02, 0xe0, 0x27, 0xa8, 0x45, 0xce, 0x24, 0x5e, 0x67, 0x4c, 0x5a,
	0x5e, 0xd5, 0x86, 0x12, 0x59, 0x23, 0x87, 0xe9, 0xef, 0x5a, 0xd3, 0x83, 0x8d, 0xd4, 0x8d, 0x89,
	0x6f, 0xff, 0x64, 0xc1, 0xa6, 0x7f, 0xe3, 0x33, 0xac, 0xca, 0xae, 0x4e, 0xd6, 0xe7, 0x4e, 0x96,
	0xfa, 0x38, 0x45, 0x9d, 0x9f, 0x82, 0x4d, 0x28, 0x89, 0xbe, 0xc6, 0xc8, 0xa9, 0x16, 0x3f, 0xcd,
	0x92, 0x91, 0x45, 0xcd, 0xc6, 0x85, 0x7e, 0xc3, 0xf8, 0xed, 0x5d, 0x2f, 0x2a, 0xab, 0xcb, 0x7f,
	0x9e, 0x75, 0x51, 0x52, 0x4f, 0xff, 0xd1, 0xd1, 0x2b, 0x8a, 0xf7, 0x07, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x1f, 0x33, 0xe8, 0x64, 0x95, 0x08, 0x00, 0x00,
}
