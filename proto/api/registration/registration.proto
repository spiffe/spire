/** The Registration API is used to register SPIFFE IDs, and the
attestation logic that should be performed on a workload before those
IDs can be issued. */

syntax = "proto3";
package spire.api.registration;
option go_package = "registration";

import public "google/api/annotations.proto";
import public "github.com/spiffe/spire/pkg/common/common.proto";

/** A type that represents the id of an entry.*/
message RegistrationEntryID {
     /** RegistrationEntryID. */
    string id = 1;
}

/** A type that represents a parent Id.*/
message ParentID {
     /** ParentId. */
    string id = 1;
}

/** A type that represents a SPIFFE Id.*/
message SpiffeID {
     /** SpiffeId. */
    string id = 1;
}

/** A type with the id with want to update plus values to modify.*/
message UpdateEntryRequest {
     /** Id of the entry to update. */
    string id = 1;
     /** Values in the RegistrationEntry to update. */
    spire.common.RegistrationEntry entry = 2;

}

/** A CA bundle for a different Trust Domain than the one used and managed by the Control Plane.*/
message FederatedBundle {
     /** A SPIFFE ID that has a Federated Bundle */
    string spiffe_id = 1;
     /** A trusted cert bundle that is not part of Control Planes trust domain but belongs to a different Trust Domain */
    bytes federated_bundle = 2;
     /** Time to live. */
    int32 ttl = 3;
}

/** It represents a request with a FederatedBundle to create.*/
message CreateFederatedBundleRequest {
     /** A trusted cert bundle that is not part of Control Planes trust domain but belongs to a different Trust Domain. */
    FederatedBundle federated_bundle = 1;
}

/** It represents a reply with a list of FederatedBundle.*/
message ListFederatedBundlesReply {
     /** A list of FederatedBundle. */
    repeated FederatedBundle bundles = 1;
}

/** A type that represents a Federated SPIFFE Id.*/
message FederatedSpiffeID {
     /** FederatedSpiffeID */
    string id  = 1;
}

service Registration {
    /** Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads. */
    rpc CreateEntry(spire.common.RegistrationEntry) returns (RegistrationEntryID) {
        option (google.api.http) = {
			post: "/entry"
			body: "*"
		};
    }
    /** Deletes an entry and returns the deleted entry. */
    rpc DeleteEntry(RegistrationEntryID) returns (spire.common.RegistrationEntry) {
        option (google.api.http).delete = "/entry";
    }
    /** Retrieve a specific registered entry. */
    rpc FetchEntry(RegistrationEntryID) returns (spire.common.RegistrationEntry) {
        option (google.api.http).get = "/entry/{id}";
    }
    /** Updates a specific registered entry. */
    rpc UpdateEntry(UpdateEntryRequest) returns (spire.common.RegistrationEntry) {
        option (google.api.http).put = "/entry";
    }
    /** Returns all the Entries associated with the ParentID value. */
    rpc ListByParentID(ParentID) returns (spire.common.RegistrationEntries);
    /** Returns all the entries associated with a selector value. */
    rpc ListBySelector(spire.common.Selector) returns (spire.common.RegistrationEntries);
    /** Return all registration entries for which SPIFFE ID matches. */
    rpc ListBySpiffeID(SpiffeID) returns (spire.common.RegistrationEntries);

    /** Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle. */
    rpc CreateFederatedBundle(CreateFederatedBundleRequest) returns (spire.common.Empty);
    /** Retrieves Federated bundles for all the Federated SPIFFE IDs. */
    rpc ListFederatedBundles(spire.common.Empty) returns (ListFederatedBundlesReply);
    /** Updates a particular Federated Bundle. Useful for rotation. */
    rpc UpdateFederatedBundle(FederatedBundle) returns (spire.common.Empty);
    /** Delete a particular Federated Bundle. Used to destroy inter-domain trust. */
    rpc DeleteFederatedBundle(FederatedSpiffeID) returns (spire.common.Empty);
}
