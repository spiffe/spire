// The Registration API is used to register SPIFFE IDs, and the
// attestation logic that should be performed on a workload before those
// IDs can be issued.

syntax = "proto3";
package spire.api.registration;
option go_package = "github.com/spiffe/spire/proto/api/registration";

import "proto/common/common.proto";

// A type that represents the id of an entry.
message RegistrationEntryID {
     // RegistrationEntryID.
    string id = 1;
}

// A type that represents a parent Id.
message ParentID {
     // ParentId.
    string id = 1;
}

// A type that represents a SPIFFE Id.
message SpiffeID {
     // SpiffeId.
    string id = 1;
}

// A type used to update registration entries
message UpdateEntryRequest {
    // Registration entry to update
    spire.common.RegistrationEntry entry = 1;
}

// A CA bundle for a different Trust Domain than the one used and managed by the Server.
message FederatedBundle {
    // A SPIFFE ID that has a Federated Bundle (deprecated)
    string DEPRECATED_spiffe_id = 1;

    // ASN.1 DER data of the bundle (deprecated)
    bytes DEPRECATED_ca_certs = 2;

    // Common bundle format
    spire.common.Bundle bundle = 3;
}

// A type that represents a federated bundle id.
message FederatedBundleID {
    // SPIFFE ID of the federated bundle
    string id  = 1;
}

message DeleteFederatedBundleRequest {
    // Mode controls the delete behavior if there are other records
    // associated with the bundle (e.g. registration entries).
    enum Mode {
        // RESTRICT prevents the bundle from being deleted in the presence of associated entries
        RESTRICT = 0;
        // DELETE deletes the bundle and associated entries
        DELETE = 1;
        // DISSOCIATE deletes the bundle and dissociates associated entries
        DISSOCIATE = 2;
    }

    string id = 1;
    Mode mode = 2;
}

// JoinToken message is used for registering a new token
message JoinToken {
    // The join token. If not set, one will be generated
    string token = 1;

    // TTL in seconds
    int32 ttl = 2;
}

// CA Bundle of the server  
message Bundle {
    // ASN.1 DER data of the bundle (deprecated).
    bytes DEPRECATED_ca_certs = 1;

    // Common bundle format
    common.Bundle bundle = 2;
}

service Registration {
    // Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
    rpc CreateEntry(spire.common.RegistrationEntry) returns (RegistrationEntryID);
    // Deletes an entry and returns the deleted entry.
    rpc DeleteEntry(RegistrationEntryID) returns (spire.common.RegistrationEntry);
    // Retrieve a specific registered entry.
    rpc FetchEntry(RegistrationEntryID) returns (spire.common.RegistrationEntry);
    // Retrieve all registered entries.
    rpc FetchEntries(spire.common.Empty) returns (spire.common.RegistrationEntries);
    // Updates a specific registered entry.
    rpc UpdateEntry(UpdateEntryRequest) returns (spire.common.RegistrationEntry);
    // Returns all the Entries associated with the ParentID value.
    rpc ListByParentID(ParentID) returns (spire.common.RegistrationEntries);
    // Returns all the entries associated with a selector value.
    rpc ListBySelector(spire.common.Selector) returns (spire.common.RegistrationEntries);
    // Return all registration entries for which SPIFFE ID matches.
    rpc ListBySpiffeID(SpiffeID) returns (spire.common.RegistrationEntries);

    // Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
    rpc CreateFederatedBundle(FederatedBundle) returns (spire.common.Empty);
    // Retrieves a single federated bundle
    rpc FetchFederatedBundle(FederatedBundleID) returns (FederatedBundle);
    // Retrieves Federated bundles for all the Federated SPIFFE IDs.
    rpc ListFederatedBundles(spire.common.Empty) returns (stream FederatedBundle);
    // Updates a particular Federated Bundle. Useful for rotation.
    rpc UpdateFederatedBundle(FederatedBundle) returns (spire.common.Empty);
    // Delete a particular Federated Bundle. Used to destroy inter-domain trust.
    rpc DeleteFederatedBundle(DeleteFederatedBundleRequest) returns (spire.common.Empty);

    // Create a new join token
    rpc CreateJoinToken(JoinToken) returns (JoinToken);

    // Retrieves the CA bundle. 
    rpc FetchBundle(spire.common.Empty) returns (Bundle);
}
