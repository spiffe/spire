syntax = "proto3";
package spire.common;
option go_package = "common";

/** Represents an empty message */
message Empty {}

/** A type which contains attestation data for specific platform. */
message AttestationData {
    /** Type of attestation to perform. */
    string type = 1;
    /** The attestation data. */
    bytes data = 2;
}

/** A type which describes the conditions under which a registration
entry is matched. */
message Selector {
    /** A selector type represents the type of attestation used in attesting
    the entity (Eg: AWS, K8). */
    string type = 1;
    /** The value to be attested. */
    string value = 2;
}

/** Represents a type with a list of Selector. */
message Selectors {
    /** A list of Selector. */
    repeated Selector entries = 1;
}

/** This is a curated record that the Server uses to set up and
manage the various registered nodes and workloads that are controlled by it. */
message RegistrationEntry {
    /** A list of selectors. */
    repeated Selector selectors = 1;
    /** The SPIFFE ID of an entity that is authorized to attest the validity
    of a selector */
    string parent_id = 2;
    /** The SPIFFE ID is a structured string used to identify a resource or
    caller. It is defined as a URI comprising a “trust domain” and an
    associated path. */
    string spiffe_id = 3;
    /** Time to live. */
    int32 ttl = 4;
    /** A list of federated bundle spiffe ids. */
    repeated string fb_spiffe_ids = 5;
    /** Entry ID */
    string entry_id = 6;
}

/** A list of registration entries. */
message RegistrationEntries {
    /** A list of RegistrationEntry. */
    repeated RegistrationEntry entries = 1;
}
