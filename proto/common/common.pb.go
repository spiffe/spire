// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	Empty
	AttestedData
	Selector
	Selectors
	RegistrationEntry
	RegistrationEntries
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// * Represents an empty message
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// * A type which contains attestation data for specific platform.
type AttestedData struct {
	// * Type of attestation to perform.
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// * The attestetion data.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AttestedData) Reset()                    { *m = AttestedData{} }
func (m *AttestedData) String() string            { return proto.CompactTextString(m) }
func (*AttestedData) ProtoMessage()               {}
func (*AttestedData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AttestedData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AttestedData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// * A type which describes the conditions under which a registration
// entry is matched.
type Selector struct {
	// * A selector type represents the type of attestation used in attesting
	// the entity (Eg: AWS, K8).
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// * The value to be attested.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Selector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Selector) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// * Represents a type with a list of NodeResolution.
type Selectors struct {
	// * A list of NodeResolution.
	Entries []*Selector `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *Selectors) Reset()                    { *m = Selectors{} }
func (m *Selectors) String() string            { return proto.CompactTextString(m) }
func (*Selectors) ProtoMessage()               {}
func (*Selectors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Selectors) GetEntries() []*Selector {
	if m != nil {
		return m.Entries
	}
	return nil
}

// * This is a curated record that the Control Plane uses to set up and
// manage the various registered nodes and workloads that are controlled by it.
type RegistrationEntry struct {
	// * A list of selectors.
	Selectors []*Selector `protobuf:"bytes,1,rep,name=selectors" json:"selectors,omitempty"`
	// * The SPIFFE ID of an entity that is authorized to attest the validity
	// of a selector
	ParentId string `protobuf:"bytes,2,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// * The SPIFFE ID is a structured string used to identify a resource or
	// caller. It is defined as a URI comprising a “trust domain” and an
	// associated path.
	SpiffeId string `protobuf:"bytes,3,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	// * Time to live.
	Ttl int32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	// * A list of federated bundle spiffe ids.
	FbSpiffeIds []string `protobuf:"bytes,5,rep,name=fb_spiffe_ids,json=fbSpiffeIds" json:"fb_spiffe_ids,omitempty"`
	// * Entry ID
	EntryId string `protobuf:"bytes,6,opt,name=entry_id,json=entryId" json:"entry_id,omitempty"`
}

func (m *RegistrationEntry) Reset()                    { *m = RegistrationEntry{} }
func (m *RegistrationEntry) String() string            { return proto.CompactTextString(m) }
func (*RegistrationEntry) ProtoMessage()               {}
func (*RegistrationEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegistrationEntry) GetSelectors() []*Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *RegistrationEntry) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *RegistrationEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *RegistrationEntry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RegistrationEntry) GetFbSpiffeIds() []string {
	if m != nil {
		return m.FbSpiffeIds
	}
	return nil
}

func (m *RegistrationEntry) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

// * A list of registration entries.
type RegistrationEntries struct {
	// * A list of RegistrationEntry.
	Entries []*RegistrationEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *RegistrationEntries) Reset()                    { *m = RegistrationEntries{} }
func (m *RegistrationEntries) String() string            { return proto.CompactTextString(m) }
func (*RegistrationEntries) ProtoMessage()               {}
func (*RegistrationEntries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RegistrationEntries) GetEntries() []*RegistrationEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "spire.common.Empty")
	proto.RegisterType((*AttestedData)(nil), "spire.common.AttestedData")
	proto.RegisterType((*Selector)(nil), "spire.common.Selector")
	proto.RegisterType((*Selectors)(nil), "spire.common.Selectors")
	proto.RegisterType((*RegistrationEntry)(nil), "spire.common.RegistrationEntry")
	proto.RegisterType((*RegistrationEntries)(nil), "spire.common.RegistrationEntries")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0xa6, 0x69, 0x93, 0x69, 0x04, 0x5d, 0x45, 0x22, 0x1e, 0x0c, 0x7b, 0xca, 0x29, 0x88,
	0x16, 0xc1, 0x83, 0x07, 0xc5, 0x1e, 0x7a, 0x93, 0xed, 0xcd, 0x4b, 0xd9, 0x36, 0x13, 0x59, 0x68,
	0x93, 0xb0, 0x3b, 0x0a, 0xf9, 0x4f, 0x3f, 0x48, 0xb2, 0xdb, 0x54, 0xad, 0x82, 0xb7, 0xd9, 0x37,
	0xef, 0x3d, 0xe6, 0xbd, 0x85, 0x78, 0x55, 0x6f, 0x36, 0x75, 0x95, 0x37, 0xba, 0xa6, 0x9a, 0xc5,
	0xa6, 0x51, 0x1a, 0x73, 0x87, 0xf1, 0x11, 0x04, 0xd3, 0x4d, 0x43, 0x2d, 0xbf, 0x85, 0xf8, 0x81,
	0x08, 0x0d, 0x61, 0xf1, 0x24, 0x49, 0x32, 0x06, 0x03, 0x6a, 0x1b, 0x4c, 0xbc, 0xd4, 0xcb, 0x22,
	0x61, 0xe7, 0x0e, 0x2b, 0x24, 0xc9, 0xe4, 0x20, 0xf5, 0xb2, 0x58, 0xd8, 0x99, 0x4f, 0x20, 0x9c,
	0xe3, 0x1a, 0x57, 0x54, 0xeb, 0x3f, 0x35, 0xa7, 0x10, 0xbc, 0xcb, 0xf5, 0x1b, 0x5a, 0x51, 0x24,
	0xdc, 0x83, 0xdf, 0x43, 0xd4, 0xab, 0x0c, 0xbb, 0x82, 0x11, 0x56, 0xa4, 0x15, 0x9a, 0xc4, 0x4b,
	0xfd, 0x6c, 0x7c, 0x7d, 0x96, 0x7f, 0xbf, 0x31, 0xef, 0x99, 0xa2, 0xa7, 0xf1, 0x0f, 0x0f, 0x8e,
	0x05, 0xbe, 0x2a, 0x43, 0x5a, 0x92, 0xaa, 0xab, 0x69, 0x45, 0xba, 0x65, 0x13, 0x88, 0x4c, 0x6f,
	0xfa, 0x8f, 0xd3, 0x17, 0x91, 0x5d, 0x40, 0xd4, 0x48, 0x8d, 0x15, 0x2d, 0x54, 0xb1, 0x3d, 0x32,
	0x74, 0xc0, 0xac, 0xe8, 0x96, 0xa6, 0x51, 0x65, 0x89, 0xdd, 0xd2, 0x77, 0x4b, 0x07, 0xcc, 0x0a,
	0x76, 0x04, 0x3e, 0xd1, 0x3a, 0x19, 0xa4, 0x5e, 0x16, 0x88, 0x6e, 0x64, 0x1c, 0x0e, 0xcb, 0xe5,
	0x62, 0xa7, 0x30, 0x49, 0x90, 0xfa, 0x59, 0x24, 0xc6, 0xe5, 0x72, 0xbe, 0x15, 0x19, 0x76, 0x0e,
	0x61, 0x17, 0xa3, 0xed, 0x1c, 0x87, 0xd6, 0xd1, 0xc6, 0x6a, 0x67, 0x05, 0x7f, 0x86, 0x93, 0xfd,
	0x54, 0x0a, 0x0d, 0xbb, 0xdb, 0xef, 0xe7, 0xf2, 0x67, 0xaa, 0x5f, 0x4d, 0xec, 0x8a, 0x7a, 0x0c,
	0x5f, 0x86, 0x8e, 0xb4, 0x1c, 0xda, 0xdf, 0xbf, 0xf9, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x37, 0xaf,
	0xe3, 0x1c, 0x0d, 0x02, 0x00, 0x00,
}
