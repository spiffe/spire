// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/agent/keymanager (interfaces: KeyManager)

package keymanager

import (
	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/pkg/common/plugin"
	reflect "reflect"
)

// MockKeyManager is a mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return _m.recorder
}

// Configure mocks base method
func (_m *MockKeyManager) Configure(_param0 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := _m.ctrl.Call(_m, "Configure", _param0)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (_mr *MockKeyManagerMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Configure", reflect.TypeOf((*MockKeyManager)(nil).Configure), arg0)
}

// FetchPrivateKey mocks base method
func (_m *MockKeyManager) FetchPrivateKey(_param0 *FetchPrivateKeyRequest) (*FetchPrivateKeyResponse, error) {
	ret := _m.ctrl.Call(_m, "FetchPrivateKey", _param0)
	ret0, _ := ret[0].(*FetchPrivateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPrivateKey indicates an expected call of FetchPrivateKey
func (_mr *MockKeyManagerMockRecorder) FetchPrivateKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FetchPrivateKey", reflect.TypeOf((*MockKeyManager)(nil).FetchPrivateKey), arg0)
}

// GenerateKeyPair mocks base method
func (_m *MockKeyManager) GenerateKeyPair(_param0 *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error) {
	ret := _m.ctrl.Call(_m, "GenerateKeyPair", _param0)
	ret0, _ := ret[0].(*GenerateKeyPairResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair
func (_mr *MockKeyManagerMockRecorder) GenerateKeyPair(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockKeyManager)(nil).GenerateKeyPair), arg0)
}

// GetPluginInfo mocks base method
func (_m *MockKeyManager) GetPluginInfo(_param0 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := _m.ctrl.Call(_m, "GetPluginInfo", _param0)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (_mr *MockKeyManagerMockRecorder) GetPluginInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPluginInfo", reflect.TypeOf((*MockKeyManager)(nil).GetPluginInfo), arg0)
}
