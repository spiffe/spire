// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodeattestor.proto

package nodeattestor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/common"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Empty from public import github.com/spiffe/spire/proto/common/common.proto
type Empty = common.Empty

// AttestationData from public import github.com/spiffe/spire/proto/common/common.proto
type AttestationData = common.AttestationData

// Selector from public import github.com/spiffe/spire/proto/common/common.proto
type Selector = common.Selector

// Selectors from public import github.com/spiffe/spire/proto/common/common.proto
type Selectors = common.Selectors

// AttestedNode from public import github.com/spiffe/spire/proto/common/common.proto
type AttestedNode = common.AttestedNode

// RegistrationEntry from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntry = common.RegistrationEntry

// RegistrationEntries from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntries = common.RegistrationEntries

// Certificate from public import github.com/spiffe/spire/proto/common/common.proto
type Certificate = common.Certificate

// PublicKey from public import github.com/spiffe/spire/proto/common/common.proto
type PublicKey = common.PublicKey

// Bundle from public import github.com/spiffe/spire/proto/common/common.proto
type Bundle = common.Bundle

// ConfigureRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureRequest = plugin.ConfigureRequest

// ConfigureRequest_GlobalConfig from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureRequest_GlobalConfig = plugin.ConfigureRequest_GlobalConfig

// ConfigureResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type ConfigureResponse = plugin.ConfigureResponse

// GetPluginInfoRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoRequest = plugin.GetPluginInfoRequest

// GetPluginInfoResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type GetPluginInfoResponse = plugin.GetPluginInfoResponse

// InitRequest from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type InitRequest = plugin.InitRequest

// InitResponse from public import github.com/spiffe/spire/proto/common/plugin/plugin.proto
type InitResponse = plugin.InitResponse

//* Represents an empty request
type FetchAttestationDataRequest struct {
	Challenge            []byte   `protobuf:"bytes,1,opt,name=challenge,proto3" json:"challenge,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchAttestationDataRequest) Reset()         { *m = FetchAttestationDataRequest{} }
func (m *FetchAttestationDataRequest) String() string { return proto.CompactTextString(m) }
func (*FetchAttestationDataRequest) ProtoMessage()    {}
func (*FetchAttestationDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e3b2582c38c076c, []int{0}
}

func (m *FetchAttestationDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchAttestationDataRequest.Unmarshal(m, b)
}
func (m *FetchAttestationDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchAttestationDataRequest.Marshal(b, m, deterministic)
}
func (m *FetchAttestationDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchAttestationDataRequest.Merge(m, src)
}
func (m *FetchAttestationDataRequest) XXX_Size() int {
	return xxx_messageInfo_FetchAttestationDataRequest.Size(m)
}
func (m *FetchAttestationDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchAttestationDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchAttestationDataRequest proto.InternalMessageInfo

func (m *FetchAttestationDataRequest) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

//* Represents the attested data and base SPIFFE ID
type FetchAttestationDataResponse struct {
	//* A type which contains attestation data for specific platform
	AttestationData *common.AttestationData `protobuf:"bytes,1,opt,name=attestationData,proto3" json:"attestationData,omitempty"`
	//* SPIFFE ID
	SpiffeId string `protobuf:"bytes,2,opt,name=spiffeId,proto3" json:"spiffeId,omitempty"`
	//* response to the challenge (if challenge was present) *
	Response             []byte   `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchAttestationDataResponse) Reset()         { *m = FetchAttestationDataResponse{} }
func (m *FetchAttestationDataResponse) String() string { return proto.CompactTextString(m) }
func (*FetchAttestationDataResponse) ProtoMessage()    {}
func (*FetchAttestationDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e3b2582c38c076c, []int{1}
}

func (m *FetchAttestationDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchAttestationDataResponse.Unmarshal(m, b)
}
func (m *FetchAttestationDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchAttestationDataResponse.Marshal(b, m, deterministic)
}
func (m *FetchAttestationDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchAttestationDataResponse.Merge(m, src)
}
func (m *FetchAttestationDataResponse) XXX_Size() int {
	return xxx_messageInfo_FetchAttestationDataResponse.Size(m)
}
func (m *FetchAttestationDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchAttestationDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchAttestationDataResponse proto.InternalMessageInfo

func (m *FetchAttestationDataResponse) GetAttestationData() *common.AttestationData {
	if m != nil {
		return m.AttestationData
	}
	return nil
}

func (m *FetchAttestationDataResponse) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *FetchAttestationDataResponse) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*FetchAttestationDataRequest)(nil), "spire.agent.nodeattestor.FetchAttestationDataRequest")
	proto.RegisterType((*FetchAttestationDataResponse)(nil), "spire.agent.nodeattestor.FetchAttestationDataResponse")
}

func init() { proto.RegisterFile("nodeattestor.proto", fileDescriptor_9e3b2582c38c076c) }

var fileDescriptor_9e3b2582c38c076c = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x4d, 0x05, 0xb1, 0xb1, 0x2a, 0x04, 0x0f, 0xcb, 0x5a, 0xa1, 0x14, 0x94, 0xea, 0x21,
	0xab, 0x15, 0x45, 0xf0, 0x54, 0x15, 0x4b, 0x2f, 0x52, 0x7a, 0xec, 0x2d, 0xdd, 0xce, 0x6e, 0x03,
	0x6d, 0x66, 0xdd, 0x64, 0x1f, 0xc2, 0xa7, 0xf0, 0xcd, 0x7c, 0x16, 0x31, 0x49, 0x6b, 0x5b, 0x56,
	0xad, 0xa7, 0x90, 0xfd, 0xe7, 0xcb, 0x3f, 0xf3, 0xcf, 0x52, 0xa6, 0x70, 0x0c, 0xc2, 0x18, 0xd0,
	0x06, 0x73, 0x9e, 0xe5, 0x68, 0x90, 0x05, 0x3a, 0x93, 0x39, 0x70, 0x91, 0x82, 0x32, 0x7c, 0x59,
	0x0f, 0xaf, 0x52, 0x69, 0x26, 0xc5, 0x88, 0xc7, 0x38, 0x8b, 0x74, 0x26, 0x93, 0x04, 0x22, 0x5b,
	0x1b, 0x59, 0x30, 0x8a, 0x71, 0x36, 0x43, 0xe5, 0x0f, 0xf7, 0x58, 0x78, 0xb7, 0x11, 0x92, 0x4d,
	0x8b, 0x54, 0xce, 0x0f, 0x47, 0x36, 0xef, 0xe9, 0xf1, 0x33, 0x98, 0x78, 0xd2, 0xb1, 0xee, 0xc2,
	0x48, 0x54, 0x4f, 0xc2, 0x88, 0x01, 0xbc, 0x16, 0xa0, 0x0d, 0xab, 0xd3, 0x6a, 0x3c, 0x11, 0xd3,
	0x29, 0xa8, 0x14, 0x02, 0xd2, 0x20, 0xad, 0xda, 0xe0, 0xfb, 0x43, 0xf3, 0x9d, 0xd0, 0x7a, 0x39,
	0xad, 0x33, 0x54, 0x1a, 0x58, 0x97, 0x1e, 0x8a, 0x55, 0xc9, 0x3e, 0xb2, 0xd7, 0x3e, 0xe1, 0x6e,
	0x7c, 0x3f, 0xc5, 0x3a, 0xbf, 0x4e, 0xb1, 0x90, 0xee, 0xba, 0xb9, 0x7a, 0xe3, 0xa0, 0xd2, 0x20,
	0xad, 0xea, 0x60, 0x71, 0xff, 0xd2, 0x72, 0x6f, 0x18, 0x6c, 0xdb, 0x16, 0x17, 0xf7, 0xf6, 0x47,
	0x85, 0xd6, 0x5e, 0x70, 0x0c, 0x1d, 0x1f, 0x2e, 0x7b, 0x23, 0xf4, 0xa8, 0xac, 0x65, 0x76, 0xc3,
	0x7f, 0x5a, 0x08, 0xff, 0x25, 0xa0, 0xf0, 0xf6, 0xbf, 0x98, 0x6b, 0xac, 0x45, 0x2e, 0x09, 0x1b,
	0xd2, 0xea, 0x23, 0xaa, 0x44, 0xa6, 0x45, 0x0e, 0xec, 0x74, 0x35, 0x11, 0xbf, 0xa4, 0x85, 0x3e,
	0xf7, 0x3b, 0xfb, 0xab, 0xcc, 0x27, 0x9f, 0xd0, 0xfd, 0x2e, 0x98, 0xbe, 0x95, 0x7b, 0x2a, 0x41,
	0x76, 0x5e, 0x0a, 0xae, 0xd4, 0xcc, 0x3d, 0x2e, 0x36, 0x29, 0x75, 0x3e, 0x0f, 0x07, 0xc3, 0xda,
	0xf2, 0xd0, 0xfd, 0xad, 0x3e, 0x19, 0xed, 0xd8, 0x5f, 0xeb, 0xfa, 0x33, 0x00, 0x00, 0xff, 0xff,
	0x93, 0x04, 0xf2, 0x61, 0xf7, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeAttestorClient is the client API for NodeAttestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeAttestorClient interface {
	//* Returns the node attestation data for specific platform and the generated Base SPIFFE ID for CSR formation
	FetchAttestationData(ctx context.Context, opts ...grpc.CallOption) (NodeAttestor_FetchAttestationDataClient, error)
	//* Applies the plugin configuration and returns configuration errors
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	//* Returns the version and related metadata of the plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type nodeAttestorClient struct {
	cc *grpc.ClientConn
}

func NewNodeAttestorClient(cc *grpc.ClientConn) NodeAttestorClient {
	return &nodeAttestorClient{cc}
}

func (c *nodeAttestorClient) FetchAttestationData(ctx context.Context, opts ...grpc.CallOption) (NodeAttestor_FetchAttestationDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NodeAttestor_serviceDesc.Streams[0], "/spire.agent.nodeattestor.NodeAttestor/FetchAttestationData", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAttestorFetchAttestationDataClient{stream}
	return x, nil
}

type NodeAttestor_FetchAttestationDataClient interface {
	Send(*FetchAttestationDataRequest) error
	Recv() (*FetchAttestationDataResponse, error)
	grpc.ClientStream
}

type nodeAttestorFetchAttestationDataClient struct {
	grpc.ClientStream
}

func (x *nodeAttestorFetchAttestationDataClient) Send(m *FetchAttestationDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAttestorFetchAttestationDataClient) Recv() (*FetchAttestationDataResponse, error) {
	m := new(FetchAttestationDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeAttestorClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.nodeattestor.NodeAttestor/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAttestorClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.nodeattestor.NodeAttestor/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeAttestorServer is the server API for NodeAttestor service.
type NodeAttestorServer interface {
	//* Returns the node attestation data for specific platform and the generated Base SPIFFE ID for CSR formation
	FetchAttestationData(NodeAttestor_FetchAttestationDataServer) error
	//* Applies the plugin configuration and returns configuration errors
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	//* Returns the version and related metadata of the plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterNodeAttestorServer(s *grpc.Server, srv NodeAttestorServer) {
	s.RegisterService(&_NodeAttestor_serviceDesc, srv)
}

func _NodeAttestor_FetchAttestationData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeAttestorServer).FetchAttestationData(&nodeAttestorFetchAttestationDataServer{stream})
}

type NodeAttestor_FetchAttestationDataServer interface {
	Send(*FetchAttestationDataResponse) error
	Recv() (*FetchAttestationDataRequest, error)
	grpc.ServerStream
}

type nodeAttestorFetchAttestationDataServer struct {
	grpc.ServerStream
}

func (x *nodeAttestorFetchAttestationDataServer) Send(m *FetchAttestationDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAttestorFetchAttestationDataServer) Recv() (*FetchAttestationDataRequest, error) {
	m := new(FetchAttestationDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NodeAttestor_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAttestorServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.nodeattestor.NodeAttestor/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAttestorServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeAttestor_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeAttestorServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.nodeattestor.NodeAttestor/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeAttestorServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeAttestor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.agent.nodeattestor.NodeAttestor",
	HandlerType: (*NodeAttestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _NodeAttestor_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _NodeAttestor_GetPluginInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAttestationData",
			Handler:       _NodeAttestor_FetchAttestationData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nodeattestor.proto",
}
