// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keymanager.proto

package keymanager

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//* Represents an empty request
type GenerateKeyPairRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateKeyPairRequest) Reset()         { *m = GenerateKeyPairRequest{} }
func (m *GenerateKeyPairRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateKeyPairRequest) ProtoMessage()    {}
func (*GenerateKeyPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d89b504f0b25a, []int{0}
}

func (m *GenerateKeyPairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateKeyPairRequest.Unmarshal(m, b)
}
func (m *GenerateKeyPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateKeyPairRequest.Marshal(b, m, deterministic)
}
func (m *GenerateKeyPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateKeyPairRequest.Merge(m, src)
}
func (m *GenerateKeyPairRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateKeyPairRequest.Size(m)
}
func (m *GenerateKeyPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateKeyPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateKeyPairRequest proto.InternalMessageInfo

//* Represents a public and private key pair
type GenerateKeyPairResponse struct {
	//* Public key
	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	//* Private key
	PrivateKey           []byte   `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateKeyPairResponse) Reset()         { *m = GenerateKeyPairResponse{} }
func (m *GenerateKeyPairResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateKeyPairResponse) ProtoMessage()    {}
func (*GenerateKeyPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d89b504f0b25a, []int{1}
}

func (m *GenerateKeyPairResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateKeyPairResponse.Unmarshal(m, b)
}
func (m *GenerateKeyPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateKeyPairResponse.Marshal(b, m, deterministic)
}
func (m *GenerateKeyPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateKeyPairResponse.Merge(m, src)
}
func (m *GenerateKeyPairResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateKeyPairResponse.Size(m)
}
func (m *GenerateKeyPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateKeyPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateKeyPairResponse proto.InternalMessageInfo

func (m *GenerateKeyPairResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GenerateKeyPairResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

//* Represents a private key
type StorePrivateKeyRequest struct {
	//* Private key
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorePrivateKeyRequest) Reset()         { *m = StorePrivateKeyRequest{} }
func (m *StorePrivateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*StorePrivateKeyRequest) ProtoMessage()    {}
func (*StorePrivateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d89b504f0b25a, []int{2}
}

func (m *StorePrivateKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorePrivateKeyRequest.Unmarshal(m, b)
}
func (m *StorePrivateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorePrivateKeyRequest.Marshal(b, m, deterministic)
}
func (m *StorePrivateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorePrivateKeyRequest.Merge(m, src)
}
func (m *StorePrivateKeyRequest) XXX_Size() int {
	return xxx_messageInfo_StorePrivateKeyRequest.Size(m)
}
func (m *StorePrivateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StorePrivateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StorePrivateKeyRequest proto.InternalMessageInfo

func (m *StorePrivateKeyRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

//* Represents an empty response
type StorePrivateKeyResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorePrivateKeyResponse) Reset()         { *m = StorePrivateKeyResponse{} }
func (m *StorePrivateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*StorePrivateKeyResponse) ProtoMessage()    {}
func (*StorePrivateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d89b504f0b25a, []int{3}
}

func (m *StorePrivateKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorePrivateKeyResponse.Unmarshal(m, b)
}
func (m *StorePrivateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorePrivateKeyResponse.Marshal(b, m, deterministic)
}
func (m *StorePrivateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorePrivateKeyResponse.Merge(m, src)
}
func (m *StorePrivateKeyResponse) XXX_Size() int {
	return xxx_messageInfo_StorePrivateKeyResponse.Size(m)
}
func (m *StorePrivateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StorePrivateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StorePrivateKeyResponse proto.InternalMessageInfo

//* Represents an empty request
type FetchPrivateKeyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchPrivateKeyRequest) Reset()         { *m = FetchPrivateKeyRequest{} }
func (m *FetchPrivateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*FetchPrivateKeyRequest) ProtoMessage()    {}
func (*FetchPrivateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d89b504f0b25a, []int{4}
}

func (m *FetchPrivateKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchPrivateKeyRequest.Unmarshal(m, b)
}
func (m *FetchPrivateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchPrivateKeyRequest.Marshal(b, m, deterministic)
}
func (m *FetchPrivateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchPrivateKeyRequest.Merge(m, src)
}
func (m *FetchPrivateKeyRequest) XXX_Size() int {
	return xxx_messageInfo_FetchPrivateKeyRequest.Size(m)
}
func (m *FetchPrivateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchPrivateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchPrivateKeyRequest proto.InternalMessageInfo

//* Represents a private key
type FetchPrivateKeyResponse struct {
	//* Private key
	PrivateKey           []byte   `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchPrivateKeyResponse) Reset()         { *m = FetchPrivateKeyResponse{} }
func (m *FetchPrivateKeyResponse) String() string { return proto.CompactTextString(m) }
func (*FetchPrivateKeyResponse) ProtoMessage()    {}
func (*FetchPrivateKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d89b504f0b25a, []int{5}
}

func (m *FetchPrivateKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchPrivateKeyResponse.Unmarshal(m, b)
}
func (m *FetchPrivateKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchPrivateKeyResponse.Marshal(b, m, deterministic)
}
func (m *FetchPrivateKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchPrivateKeyResponse.Merge(m, src)
}
func (m *FetchPrivateKeyResponse) XXX_Size() int {
	return xxx_messageInfo_FetchPrivateKeyResponse.Size(m)
}
func (m *FetchPrivateKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchPrivateKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchPrivateKeyResponse proto.InternalMessageInfo

func (m *FetchPrivateKeyResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func init() {
	proto.RegisterType((*GenerateKeyPairRequest)(nil), "spire.agent.keymanager.GenerateKeyPairRequest")
	proto.RegisterType((*GenerateKeyPairResponse)(nil), "spire.agent.keymanager.GenerateKeyPairResponse")
	proto.RegisterType((*StorePrivateKeyRequest)(nil), "spire.agent.keymanager.StorePrivateKeyRequest")
	proto.RegisterType((*StorePrivateKeyResponse)(nil), "spire.agent.keymanager.StorePrivateKeyResponse")
	proto.RegisterType((*FetchPrivateKeyRequest)(nil), "spire.agent.keymanager.FetchPrivateKeyRequest")
	proto.RegisterType((*FetchPrivateKeyResponse)(nil), "spire.agent.keymanager.FetchPrivateKeyResponse")
}

func init() { proto.RegisterFile("keymanager.proto", fileDescriptor_217d89b504f0b25a) }

var fileDescriptor_217d89b504f0b25a = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x99, 0x88, 0xb0, 0x87, 0x32, 0xc9, 0x61, 0x9b, 0x43, 0x64, 0x14, 0x14, 0xf5, 0x90,
	0x82, 0x8a, 0xe8, 0x55, 0xc1, 0x21, 0x43, 0x18, 0xf3, 0x20, 0xec, 0xd6, 0x8d, 0xd7, 0x2e, 0xb8,
	0x25, 0x31, 0x4d, 0x85, 0xfe, 0x4f, 0xfe, 0x91, 0xb2, 0x24, 0x5b, 0xb5, 0x6d, 0xd8, 0x4e, 0x2d,
	0xef, 0x7b, 0x5f, 0xbe, 0xbc, 0x5f, 0x12, 0x38, 0xfe, 0xc4, 0x7c, 0x19, 0xf1, 0x28, 0x41, 0x45,
	0xa5, 0x12, 0x5a, 0x90, 0x76, 0x2a, 0x99, 0x42, 0x1a, 0x25, 0xc8, 0x35, 0x2d, 0xd4, 0x5e, 0xdf,
	0xd4, 0xc3, 0x99, 0x58, 0x2e, 0x05, 0x0f, 0xe5, 0x22, 0x4b, 0xd8, 0xfa, 0x63, 0x9d, 0x41, 0x17,
	0xda, 0x03, 0xe4, 0xa8, 0x22, 0x8d, 0x43, 0xcc, 0x47, 0x11, 0x53, 0x63, 0xfc, 0xca, 0x30, 0xd5,
	0xc1, 0x07, 0x74, 0x2a, 0x4a, 0x2a, 0x05, 0x4f, 0x91, 0x9c, 0x42, 0x53, 0x66, 0xd3, 0x05, 0x9b,
	0x0d, 0x31, 0xef, 0x36, 0xfa, 0x8d, 0xcb, 0xc3, 0x71, 0x51, 0x20, 0x67, 0x00, 0x52, 0xb1, 0x6f,
	0xeb, 0xeb, 0xee, 0x19, 0xf9, 0x4f, 0x25, 0x78, 0x80, 0xf6, 0xbb, 0x16, 0x0a, 0x47, 0x9b, 0x92,
	0x8b, 0x2c, 0x39, 0x1b, 0x15, 0xe7, 0x09, 0x74, 0x2a, 0x4e, 0xbb, 0xa5, 0xd5, 0x1c, 0x2f, 0xa8,
	0x67, 0xf3, 0xca, 0xa2, 0xc1, 0x23, 0x74, 0x2a, 0x8a, 0x9b, 0x63, 0x4b, 0xde, 0xcd, 0xcf, 0x3e,
	0xc0, 0x10, 0xf3, 0x37, 0x4b, 0x93, 0x28, 0x68, 0x95, 0x88, 0x10, 0x4a, 0xeb, 0xc9, 0xd3, 0x7a,
	0xa8, 0xbd, 0x70, 0xe7, 0x7e, 0xb7, 0x45, 0x05, 0xad, 0xd2, 0xc8, 0xfe, 0xcc, 0x7a, 0xaa, 0xfe,
	0x4c, 0x0f, 0xcb, 0x55, 0x66, 0x89, 0x98, 0x3f, 0xb3, 0x1e, 0xba, 0x3f, 0xd3, 0x77, 0x14, 0x13,
	0x68, 0x3e, 0x0b, 0x1e, 0xb3, 0x24, 0x53, 0x48, 0xce, 0x9d, 0xdb, 0xde, 0x5b, 0xea, 0x2e, 0xec,
	0x46, 0x5f, 0x87, 0x5c, 0x6c, 0x6b, 0x73, 0x6b, 0xc7, 0x70, 0x34, 0x40, 0x3d, 0x32, 0xf2, 0x2b,
	0x8f, 0x05, 0xb9, 0xaa, 0x35, 0xfe, 0xeb, 0x59, 0x67, 0x5c, 0xef, 0xd2, 0x6a, 0x73, 0x9e, 0xee,
	0x27, 0x77, 0x09, 0xd3, 0xf3, 0x6c, 0xba, 0xea, 0x0e, 0x53, 0xc9, 0xe2, 0x18, 0x43, 0xfb, 0x02,
	0xcd, 0x63, 0x73, 0xff, 0x86, 0x49, 0x58, 0x30, 0x99, 0x1e, 0x18, 0xf5, 0xf6, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x02, 0xae, 0x23, 0x7c, 0xd8, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyManagerClient is the client API for KeyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyManagerClient interface {
	//* Creates a new key pair.
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error)
	//* Persists a private key to the key manager's storage system.
	StorePrivateKey(ctx context.Context, in *StorePrivateKeyRequest, opts ...grpc.CallOption) (*StorePrivateKeyResponse, error)
	//* Returns the most recently stored private key. For use after node restarts.
	FetchPrivateKey(ctx context.Context, in *FetchPrivateKeyRequest, opts ...grpc.CallOption) (*FetchPrivateKeyResponse, error)
	//* Applies the plugin configuration and returns configuration errors.
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	//* Returns the version and related metadata of the plugin.
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type keyManagerClient struct {
	cc *grpc.ClientConn
}

func NewKeyManagerClient(cc *grpc.ClientConn) KeyManagerClient {
	return &keyManagerClient{cc}
}

func (c *keyManagerClient) GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error) {
	out := new(GenerateKeyPairResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.keymanager.KeyManager/GenerateKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) StorePrivateKey(ctx context.Context, in *StorePrivateKeyRequest, opts ...grpc.CallOption) (*StorePrivateKeyResponse, error) {
	out := new(StorePrivateKeyResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.keymanager.KeyManager/StorePrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) FetchPrivateKey(ctx context.Context, in *FetchPrivateKeyRequest, opts ...grpc.CallOption) (*FetchPrivateKeyResponse, error) {
	out := new(FetchPrivateKeyResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.keymanager.KeyManager/FetchPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.keymanager.KeyManager/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.keymanager.KeyManager/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyManagerServer is the server API for KeyManager service.
type KeyManagerServer interface {
	//* Creates a new key pair.
	GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error)
	//* Persists a private key to the key manager's storage system.
	StorePrivateKey(context.Context, *StorePrivateKeyRequest) (*StorePrivateKeyResponse, error)
	//* Returns the most recently stored private key. For use after node restarts.
	FetchPrivateKey(context.Context, *FetchPrivateKeyRequest) (*FetchPrivateKeyResponse, error)
	//* Applies the plugin configuration and returns configuration errors.
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	//* Returns the version and related metadata of the plugin.
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterKeyManagerServer(s *grpc.Server, srv KeyManagerServer) {
	s.RegisterService(&_KeyManager_serviceDesc, srv)
}

func _KeyManager_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.keymanager.KeyManager/GenerateKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GenerateKeyPair(ctx, req.(*GenerateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_StorePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StorePrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).StorePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.keymanager.KeyManager/StorePrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).StorePrivateKey(ctx, req.(*StorePrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_FetchPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).FetchPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.keymanager.KeyManager/FetchPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).FetchPrivateKey(ctx, req.(*FetchPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.keymanager.KeyManager/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.keymanager.KeyManager/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.agent.keymanager.KeyManager",
	HandlerType: (*KeyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKeyPair",
			Handler:    _KeyManager_GenerateKeyPair_Handler,
		},
		{
			MethodName: "StorePrivateKey",
			Handler:    _KeyManager_StorePrivateKey_Handler,
		},
		{
			MethodName: "FetchPrivateKey",
			Handler:    _KeyManager_FetchPrivateKey_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _KeyManager_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _KeyManager_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keymanager.proto",
}
