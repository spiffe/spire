// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package svidstore

import (
	context "context"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SVIDStoreClient is the client API for SVIDStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SVIDStoreClient interface {
	// Puts an X509-SVID in a configured secrets store
	PutX509SVID(ctx context.Context, in *PutX509SVIDRequest, opts ...grpc.CallOption) (*PutX509SVIDResponse, error)
	// Applies the plugin configuration and returns configuration errors
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type sVIDStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewSVIDStoreClient(cc grpc.ClientConnInterface) SVIDStoreClient {
	return &sVIDStoreClient{cc}
}

func (c *sVIDStoreClient) PutX509SVID(ctx context.Context, in *PutX509SVIDRequest, opts ...grpc.CallOption) (*PutX509SVIDResponse, error) {
	out := new(PutX509SVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.svidstore.SVIDStore/PutX509SVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDStoreClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.svidstore.SVIDStore/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDStoreClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.svidstore.SVIDStore/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVIDStoreServer is the server API for SVIDStore service.
// All implementations must embed UnimplementedSVIDStoreServer
// for forward compatibility
type SVIDStoreServer interface {
	// Puts an X509-SVID in a configured secrets store
	PutX509SVID(context.Context, *PutX509SVIDRequest) (*PutX509SVIDResponse, error)
	// Applies the plugin configuration and returns configuration errors
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
	mustEmbedUnimplementedSVIDStoreServer()
}

// UnimplementedSVIDStoreServer must be embedded to have forward compatible implementations.
type UnimplementedSVIDStoreServer struct {
}

func (UnimplementedSVIDStoreServer) PutX509SVID(context.Context, *PutX509SVIDRequest) (*PutX509SVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutX509SVID not implemented")
}
func (UnimplementedSVIDStoreServer) Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedSVIDStoreServer) GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}
func (UnimplementedSVIDStoreServer) mustEmbedUnimplementedSVIDStoreServer() {}

// UnsafeSVIDStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SVIDStoreServer will
// result in compilation errors.
type UnsafeSVIDStoreServer interface {
	mustEmbedUnimplementedSVIDStoreServer()
}

func RegisterSVIDStoreServer(s grpc.ServiceRegistrar, srv SVIDStoreServer) {
	s.RegisterService(&_SVIDStore_serviceDesc, srv)
}

func _SVIDStore_PutX509SVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutX509SVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDStoreServer).PutX509SVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.svidstore.SVIDStore/PutX509SVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDStoreServer).PutX509SVID(ctx, req.(*PutX509SVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVIDStore_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDStoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.svidstore.SVIDStore/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDStoreServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVIDStore_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDStoreServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.svidstore.SVIDStore/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDStoreServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SVIDStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.agent.svidstore.SVIDStore",
	HandlerType: (*SVIDStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutX509SVID",
			Handler:    _SVIDStore_PutX509SVID_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _SVIDStore_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _SVIDStore_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/agent/svidstore/svidstore.proto",
}
