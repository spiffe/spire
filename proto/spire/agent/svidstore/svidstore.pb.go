// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: spire/agent/svidstore/svidstore.proto

package svidstore

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PutX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// X509-SVID to be stored
	Svid *X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	// Entry selectors with relevant information to store on specific platform
	Selectors []*common.Selector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// Federated bundles to store
	FederatedBundles map[string][]byte `protobuf:"bytes,3,rep,name=federated_bundles,json=federatedBundles,proto3" json:"federated_bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PutX509SVIDRequest) Reset() {
	*x = PutX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_agent_svidstore_svidstore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutX509SVIDRequest) ProtoMessage() {}

func (x *PutX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_agent_svidstore_svidstore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*PutX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_agent_svidstore_svidstore_proto_rawDescGZIP(), []int{0}
}

func (x *PutX509SVIDRequest) GetSvid() *X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

func (x *PutX509SVIDRequest) GetSelectors() []*common.Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *PutX509SVIDRequest) GetFederatedBundles() map[string][]byte {
	if x != nil {
		return x.FederatedBundles
	}
	return nil
}

type PutX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutX509SVIDResponse) Reset() {
	*x = PutX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_agent_svidstore_svidstore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutX509SVIDResponse) ProtoMessage() {}

func (x *PutX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_agent_svidstore_svidstore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*PutX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_agent_svidstore_svidstore_proto_rawDescGZIP(), []int{1}
}

type X509SVID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SPIFFE ID of the SVID.
	SpiffeID string `protobuf:"bytes,1,opt,name=spiffeID,proto3" json:"spiffeID,omitempty"`
	// Certificate and intermediates (ASN.1 DER encoded)
	CertChain [][]byte `protobuf:"bytes,2,rep,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	// Private key (ASN.1 DER encoded)
	PrivateKey []byte `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Bundle certificates (ASN.1 DER encoded)
	Bundle [][]byte `protobuf:"bytes,4,rep,name=bundle,proto3" json:"bundle,omitempty"`
	// Expiration timestamp (seconds since Unix epoch).
	ExpiresAt int64 `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *X509SVID) Reset() {
	*x = X509SVID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_agent_svidstore_svidstore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509SVID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVID) ProtoMessage() {}

func (x *X509SVID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_agent_svidstore_svidstore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVID.ProtoReflect.Descriptor instead.
func (*X509SVID) Descriptor() ([]byte, []int) {
	return file_spire_agent_svidstore_svidstore_proto_rawDescGZIP(), []int{2}
}

func (x *X509SVID) GetSpiffeID() string {
	if x != nil {
		return x.SpiffeID
	}
	return ""
}

func (x *X509SVID) GetCertChain() [][]byte {
	if x != nil {
		return x.CertChain
	}
	return nil
}

func (x *X509SVID) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *X509SVID) GetBundle() [][]byte {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *X509SVID) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

var File_spire_agent_svidstore_svidstore_proto protoreflect.FileDescriptor

var file_spire_agent_svidstore_svidstore_proto_rawDesc = []byte{
	0x0a, 0x25, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x76,
	0x69, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x76, 0x69, 0x64, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x19,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x12,
	0x50, 0x75, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73,
	0x76, 0x69, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49,
	0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x6c, 0x0a,
	0x11, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x75, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x15, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x08, 0x58, 0x35, 0x30, 0x39,
	0x53, 0x56, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x32, 0xb5, 0x02, 0x0a, 0x09, 0x53, 0x56, 0x49, 0x44,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x58, 0x35, 0x30, 0x39,
	0x53, 0x56, 0x49, 0x44, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x73, 0x76, 0x69, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x74,
	0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x73, 0x76,
	0x69, 0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53,
	0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x76, 0x69,
	0x64, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spire_agent_svidstore_svidstore_proto_rawDescOnce sync.Once
	file_spire_agent_svidstore_svidstore_proto_rawDescData = file_spire_agent_svidstore_svidstore_proto_rawDesc
)

func file_spire_agent_svidstore_svidstore_proto_rawDescGZIP() []byte {
	file_spire_agent_svidstore_svidstore_proto_rawDescOnce.Do(func() {
		file_spire_agent_svidstore_svidstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_agent_svidstore_svidstore_proto_rawDescData)
	})
	return file_spire_agent_svidstore_svidstore_proto_rawDescData
}

var file_spire_agent_svidstore_svidstore_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_spire_agent_svidstore_svidstore_proto_goTypes = []interface{}{
	(*PutX509SVIDRequest)(nil),           // 0: spire.agent.svidstore.PutX509SVIDRequest
	(*PutX509SVIDResponse)(nil),          // 1: spire.agent.svidstore.PutX509SVIDResponse
	(*X509SVID)(nil),                     // 2: spire.agent.svidstore.X509SVID
	nil,                                  // 3: spire.agent.svidstore.PutX509SVIDRequest.FederatedBundlesEntry
	(*common.Selector)(nil),              // 4: spire.common.Selector
	(*plugin.ConfigureRequest)(nil),      // 5: spire.common.plugin.ConfigureRequest
	(*plugin.GetPluginInfoRequest)(nil),  // 6: spire.common.plugin.GetPluginInfoRequest
	(*plugin.ConfigureResponse)(nil),     // 7: spire.common.plugin.ConfigureResponse
	(*plugin.GetPluginInfoResponse)(nil), // 8: spire.common.plugin.GetPluginInfoResponse
}
var file_spire_agent_svidstore_svidstore_proto_depIdxs = []int32{
	2, // 0: spire.agent.svidstore.PutX509SVIDRequest.svid:type_name -> spire.agent.svidstore.X509SVID
	4, // 1: spire.agent.svidstore.PutX509SVIDRequest.selectors:type_name -> spire.common.Selector
	3, // 2: spire.agent.svidstore.PutX509SVIDRequest.federated_bundles:type_name -> spire.agent.svidstore.PutX509SVIDRequest.FederatedBundlesEntry
	0, // 3: spire.agent.svidstore.SVIDStore.PutX509SVID:input_type -> spire.agent.svidstore.PutX509SVIDRequest
	5, // 4: spire.agent.svidstore.SVIDStore.Configure:input_type -> spire.common.plugin.ConfigureRequest
	6, // 5: spire.agent.svidstore.SVIDStore.GetPluginInfo:input_type -> spire.common.plugin.GetPluginInfoRequest
	1, // 6: spire.agent.svidstore.SVIDStore.PutX509SVID:output_type -> spire.agent.svidstore.PutX509SVIDResponse
	7, // 7: spire.agent.svidstore.SVIDStore.Configure:output_type -> spire.common.plugin.ConfigureResponse
	8, // 8: spire.agent.svidstore.SVIDStore.GetPluginInfo:output_type -> spire.common.plugin.GetPluginInfoResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_spire_agent_svidstore_svidstore_proto_init() }
func file_spire_agent_svidstore_svidstore_proto_init() {
	if File_spire_agent_svidstore_svidstore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_agent_svidstore_svidstore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_agent_svidstore_svidstore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_agent_svidstore_svidstore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509SVID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_agent_svidstore_svidstore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_agent_svidstore_svidstore_proto_goTypes,
		DependencyIndexes: file_spire_agent_svidstore_svidstore_proto_depIdxs,
		MessageInfos:      file_spire_agent_svidstore_svidstore_proto_msgTypes,
	}.Build()
	File_spire_agent_svidstore_svidstore_proto = out.File
	file_spire_agent_svidstore_svidstore_proto_rawDesc = nil
	file_spire_agent_svidstore_svidstore_proto_goTypes = nil
	file_spire_agent_svidstore_svidstore_proto_depIdxs = nil
}
