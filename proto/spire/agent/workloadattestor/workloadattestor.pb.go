// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workloadattestor.proto

package workloadattestor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//* Represents the workload PID.
type AttestRequest struct {
	//* Workload PID
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttestRequest) Reset()         { *m = AttestRequest{} }
func (m *AttestRequest) String() string { return proto.CompactTextString(m) }
func (*AttestRequest) ProtoMessage()    {}
func (*AttestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_df2f5baa9b7a1134, []int{0}
}

func (m *AttestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestRequest.Unmarshal(m, b)
}
func (m *AttestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestRequest.Marshal(b, m, deterministic)
}
func (m *AttestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestRequest.Merge(m, src)
}
func (m *AttestRequest) XXX_Size() int {
	return xxx_messageInfo_AttestRequest.Size(m)
}
func (m *AttestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttestRequest proto.InternalMessageInfo

func (m *AttestRequest) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

//* Represents a list of selectors resolved for a given PID.
type AttestResponse struct {
	//* List of selectors
	Selectors            []*common.Selector `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *AttestResponse) Reset()         { *m = AttestResponse{} }
func (m *AttestResponse) String() string { return proto.CompactTextString(m) }
func (*AttestResponse) ProtoMessage()    {}
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df2f5baa9b7a1134, []int{1}
}

func (m *AttestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttestResponse.Unmarshal(m, b)
}
func (m *AttestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttestResponse.Marshal(b, m, deterministic)
}
func (m *AttestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttestResponse.Merge(m, src)
}
func (m *AttestResponse) XXX_Size() int {
	return xxx_messageInfo_AttestResponse.Size(m)
}
func (m *AttestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttestResponse proto.InternalMessageInfo

func (m *AttestResponse) GetSelectors() []*common.Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func init() {
	proto.RegisterType((*AttestRequest)(nil), "spire.agent.workloadattestor.AttestRequest")
	proto.RegisterType((*AttestResponse)(nil), "spire.agent.workloadattestor.AttestResponse")
}

func init() { proto.RegisterFile("workloadattestor.proto", fileDescriptor_df2f5baa9b7a1134) }

var fileDescriptor_df2f5baa9b7a1134 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0x03, 0x31,
	0x10, 0xc5, 0x59, 0x8b, 0x85, 0x46, 0x2a, 0x25, 0x87, 0x52, 0x17, 0x0f, 0x6b, 0x41, 0xa9, 0x7f,
	0xc8, 0x42, 0xf5, 0x24, 0x5e, 0xaa, 0xa0, 0x78, 0x93, 0xf5, 0x20, 0xf4, 0xb6, 0xdd, 0x4e, 0xd6,
	0xe0, 0x36, 0x13, 0x93, 0x2c, 0x7e, 0x38, 0xbf, 0x9c, 0x34, 0xc9, 0x2a, 0x5b, 0x44, 0x7b, 0xca,
	0xc0, 0xfb, 0xcd, 0xbc, 0x97, 0x19, 0x32, 0xfc, 0x40, 0xfd, 0x56, 0x61, 0xbe, 0xcc, 0xad, 0x05,
	0x63, 0x51, 0x33, 0xa5, 0xd1, 0x22, 0x3d, 0x34, 0x4a, 0x68, 0x60, 0x79, 0x09, 0xd2, 0xb2, 0x4d,
	0x26, 0x3e, 0x70, 0x6a, 0x5a, 0xe0, 0x6a, 0x85, 0x32, 0x3c, 0xbe, 0x31, 0x4e, 0x5a, 0x92, 0xaa,
	0xea, 0x52, 0x34, 0x8f, 0x27, 0xc6, 0x47, 0xa4, 0x3f, 0x73, 0x83, 0x32, 0x78, 0xaf, 0xc1, 0x58,
	0x3a, 0x20, 0x1d, 0x25, 0x96, 0xa3, 0x28, 0x89, 0x26, 0xbb, 0xd9, 0xba, 0x1c, 0xdf, 0x93, 0xfd,
	0x06, 0x31, 0x0a, 0xa5, 0x01, 0x7a, 0x45, 0x7a, 0x06, 0x2a, 0x28, 0x2c, 0x6a, 0x33, 0x8a, 0x92,
	0xce, 0x64, 0x6f, 0x3a, 0x64, 0x3e, 0x63, 0xb0, 0x7f, 0x0e, 0x72, 0xf6, 0x03, 0x4e, 0x3f, 0x77,
	0xc8, 0xe0, 0x25, 0x84, 0x9f, 0x85, 0xf0, 0xb4, 0x20, 0x5d, 0x5f, 0xd3, 0x73, 0xf6, 0xd7, 0x2f,
	0x59, 0x2b, 0x65, 0x7c, 0xb1, 0x1d, 0x1c, 0xf2, 0xce, 0x49, 0xef, 0x0e, 0x25, 0x17, 0x65, 0xad,
	0x81, 0x1e, 0xb7, 0x93, 0x86, 0x6d, 0x7c, 0xeb, 0x8d, 0xc3, 0xc9, 0x7f, 0x58, 0x98, 0xcd, 0x49,
	0xff, 0x01, 0xec, 0x93, 0x93, 0x1f, 0x25, 0x47, 0x7a, 0xfa, 0x6b, 0x63, 0x8b, 0x69, 0x3c, 0xce,
	0xb6, 0x41, 0xbd, 0xcf, 0xed, 0xcd, 0xfc, 0xba, 0x14, 0xf6, 0xb5, 0x5e, 0xac, 0xe9, 0xd4, 0x28,
	0xc1, 0x39, 0xa4, 0xfe, 0xbc, 0xee, 0x92, 0xa1, 0x76, 0x0b, 0x49, 0x37, 0x17, 0xb2, 0xe8, 0x3a,
	0xe6, 0xf2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x17, 0x07, 0x6c, 0xb3, 0x62, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkloadAttestorClient is the client API for WorkloadAttestor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkloadAttestorClient interface {
	//* Returns a list of selectors resolved for a given PID
	Attest(ctx context.Context, in *AttestRequest, opts ...grpc.CallOption) (*AttestResponse, error)
	//* Applies the plugin configuration and returns configuration errors
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	//* Returns the version and related metadata of the plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type workloadAttestorClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadAttestorClient(cc *grpc.ClientConn) WorkloadAttestorClient {
	return &workloadAttestorClient{cc}
}

func (c *workloadAttestorClient) Attest(ctx context.Context, in *AttestRequest, opts ...grpc.CallOption) (*AttestResponse, error) {
	out := new(AttestResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.workloadattestor.WorkloadAttestor/Attest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadAttestorClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.workloadattestor.WorkloadAttestor/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadAttestorClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.agent.workloadattestor.WorkloadAttestor/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadAttestorServer is the server API for WorkloadAttestor service.
type WorkloadAttestorServer interface {
	//* Returns a list of selectors resolved for a given PID
	Attest(context.Context, *AttestRequest) (*AttestResponse, error)
	//* Applies the plugin configuration and returns configuration errors
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	//* Returns the version and related metadata of the plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

func RegisterWorkloadAttestorServer(s *grpc.Server, srv WorkloadAttestorServer) {
	s.RegisterService(&_WorkloadAttestor_serviceDesc, srv)
}

func _WorkloadAttestor_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAttestorServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.workloadattestor.WorkloadAttestor/Attest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAttestorServer).Attest(ctx, req.(*AttestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadAttestor_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAttestorServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.workloadattestor.WorkloadAttestor/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAttestorServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadAttestor_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAttestorServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.agent.workloadattestor.WorkloadAttestor/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAttestorServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkloadAttestor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.agent.workloadattestor.WorkloadAttestor",
	HandlerType: (*WorkloadAttestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attest",
			Handler:    _WorkloadAttestor_Attest_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _WorkloadAttestor_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _WorkloadAttestor_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workloadattestor.proto",
}
