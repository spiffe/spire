// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PluginInitClient is the client API for PluginInit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginInitClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
}

type pluginInitClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginInitClient(cc grpc.ClientConnInterface) PluginInitClient {
	return &pluginInitClient{cc}
}

func (c *pluginInitClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, "/spire.common.plugin.PluginInit/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginInitServer is the server API for PluginInit service.
// All implementations must embed UnimplementedPluginInitServer
// for forward compatibility
type PluginInitServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	mustEmbedUnimplementedPluginInitServer()
}

// UnimplementedPluginInitServer must be embedded to have forward compatible implementations.
type UnimplementedPluginInitServer struct {
}

func (UnimplementedPluginInitServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedPluginInitServer) mustEmbedUnimplementedPluginInitServer() {}

// UnsafePluginInitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginInitServer will
// result in compilation errors.
type UnsafePluginInitServer interface {
	mustEmbedUnimplementedPluginInitServer()
}

func RegisterPluginInitServer(s grpc.ServiceRegistrar, srv PluginInitServer) {
	s.RegisterService(&_PluginInit_serviceDesc, srv)
}

func _PluginInit_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginInitServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.common.plugin.PluginInit/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginInitServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PluginInit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.common.plugin.PluginInit",
	HandlerType: (*PluginInitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _PluginInit_Init_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/common/plugin/plugin.proto",
}
