// Code generated by protoc-gen-go-spire. DO NOT EDIT.

package keymanagerv0

import (
	pluginsdk "github.com/spiffe/spire-plugin-sdk/pluginsdk"
	grpc "google.golang.org/grpc"
)

func KeyManagerPluginServer(server KeyManagerServer) pluginsdk.PluginServer {
	return keyManagerPluginServer{KeyManagerServer: server}
}

type keyManagerPluginServer struct {
	KeyManagerServer
}

func (s keyManagerPluginServer) Type() string {
	return "KeyManager"
}

func (s keyManagerPluginServer) GRPCServiceName() string {
	return "spire.server.keymanager.KeyManager"
}

func (s keyManagerPluginServer) RegisterServer(server *grpc.Server) interface{} {
	RegisterKeyManagerServer(server, s.KeyManagerServer)
	return s.KeyManagerServer
}

type KeyManagerPluginClient struct {
	KeyManagerClient
}

func (s KeyManagerPluginClient) Type() string {
	return "KeyManager"
}

func (c *KeyManagerPluginClient) IsInitialized() bool {
	return c.KeyManagerClient != nil
}

func (c *KeyManagerPluginClient) GRPCServiceName() string {
	return "spire.server.keymanager.KeyManager"
}

func (c *KeyManagerPluginClient) InitClient(conn grpc.ClientConnInterface) interface{} {
	c.KeyManagerClient = NewKeyManagerClient(conn)
	return c.KeyManagerClient
}
