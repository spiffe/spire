syntax = "proto3";
package spire.server.upstreamauthority;
option go_package = "github.com/spiffe/spire/proto/spire/plugin/server/upstreamauthority/v0;upstreamauthorityv0";

import "spire/common/common.proto";
import "spire/common/plugin/plugin.proto";

message MintX509CARequest {
    // Certificate signing request (PKCS#10)
    bytes csr = 1;

    // Preferred TTL is the TTL preferred by SPIRE server for signed CA. If
    // zero, the plugin should determine its own TTL value. Plugins are free to
    // ignore this and use their own policies around TTLs. 
    int32 preferred_ttl = 2;
}

message MintX509CAResponse {
    // Contains ASN.1 encoded certificates representing the X.509 CA along with
    // any intermediates necessary to chain back to a certificate present in
    // the upstream_x509_roots.
    repeated bytes x509_ca_chain = 1;

    // The trusted X.509 root authorities for the upstream authority
    repeated bytes upstream_x509_roots = 2;
}

message PublishJWTKeyRequest {
    // The JWT signing key to publish upstream 
    spire.common.PublicKey jwt_key = 1;
}

message PublishJWTKeyResponse {
    // The upstream JWT signing keys
    repeated spire.common.PublicKey upstream_jwt_keys = 1;
}

service UpstreamAuthority {
    // Mints an X.509 CA and responds with the signed X.509 CA certificate
    // chain and upstream X.509 roots. If supported by the implementation,
    // subsequent responses on the stream contain upstream X.509 root updates,
    // otherwise the RPC is completed after sending the initial response.
    //
    // Implementation note:
    // The stream should be kept open in the face of transient errors
    // encountered while tracking changes to the upstream X.509 roots as SPIRE
    // core will not reopen a closed stream until the next X.509 CA rotation.
    rpc MintX509CA(MintX509CARequest) returns (stream MintX509CAResponse);

    // Publishes a JWT signing key upstream and responds with the upstream JWT
    // keys. If supported by the implementation, subsequent responses on the
    // stream contain upstream JWT key updates, otherwise the RPC is completed
    // after sending the initial response.
    //
    // This RPC is optional and will return NotImplemented if unsupported.
    //
    // Implementation note:
    // The stream should be kept open in the face of transient errors
    // encountered while tracking changes to the upstream JWT keys as SPIRE
    // core will not reopen a closed stream until the next JWT key rotation.
    rpc PublishJWTKey(PublishJWTKeyRequest) returns (stream PublishJWTKeyResponse);

    // Standard SPIRE plugin RPCs
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);
}
