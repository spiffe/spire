/** A plugin which is responsible for generating and storing a key pair,
optionally with a hardware-backed secret store.  It is used for generating
the key pair for the Base SPIFFE Id of the Node Agent, and persisting
that identity across restarts/reboots */

syntax = "proto3";
package spire.agent.keymanager;
option go_package = "github.com/spiffe/spire/proto/spire/plugin/agent/keymanager/v0;keymanagerv0";

import "spire/common/plugin/plugin.proto";

/** Represents an empty request */
message GenerateKeyPairRequest {}

/** Represents a public and private key pair */
message GenerateKeyPairResponse {
    /** Public key */
    bytes publicKey = 1;
    /** Private key */
    bytes privateKey = 2;
}

/** Represents a private key */
message StorePrivateKeyRequest {
    /** Private key */
    bytes privateKey = 1;
}

/** Represents an empty response */
message StorePrivateKeyResponse {}

/** Represents an empty request */
message FetchPrivateKeyRequest {}

/** Represents a private key */
message FetchPrivateKeyResponse {
    /** Private key */
    bytes privateKey = 1;
}


service KeyManager {
    /** Creates a new key pair. */
    rpc GenerateKeyPair(GenerateKeyPairRequest) returns (GenerateKeyPairResponse);
    /** Persists a private key to the key manager's storage system. */
    rpc StorePrivateKey(StorePrivateKeyRequest) returns (StorePrivateKeyResponse);
    /** Returns the most recently stored private key. For use after node restarts. */
    rpc FetchPrivateKey(FetchPrivateKeyRequest) returns (FetchPrivateKeyResponse);
    /** Applies the plugin configuration and returns configuration errors. */
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);
    /** Returns the version and related metadata of the plugin. */
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);
}
