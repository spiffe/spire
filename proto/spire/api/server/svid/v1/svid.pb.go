// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spire/api/server/svid/v1/svid.proto

package svid

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	types "github.com/spiffe/spire/proto/spire/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MintX509SVIDRequest struct {
	// Required. ASN.1 DER encoded CSR. The CSR is used to convey the public
	// key and the SPIFFE ID (via the URI SAN). Only one URI SAN can be set.
	// Optionally, the subject and any number of DNS SANs can also be set.
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	// The desired TTL of the X509-SVID, in seconds. The server default will be
	// used if unset. The TTL is advisory only. The actual lifetime of the
	// X509-SVID may be lower depending on the remaining lifetime of the active
	// SPIRE Server CA.
	Ttl                  int32    `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintX509SVIDRequest) Reset()         { *m = MintX509SVIDRequest{} }
func (m *MintX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*MintX509SVIDRequest) ProtoMessage()    {}
func (*MintX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{0}
}

func (m *MintX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintX509SVIDRequest.Unmarshal(m, b)
}
func (m *MintX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *MintX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintX509SVIDRequest.Merge(m, src)
}
func (m *MintX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_MintX509SVIDRequest.Size(m)
}
func (m *MintX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MintX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MintX509SVIDRequest proto.InternalMessageInfo

func (m *MintX509SVIDRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func (m *MintX509SVIDRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type MintX509SVIDResponse struct {
	// The newly issued X509-SVID.
	Svid                 *types.X509SVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MintX509SVIDResponse) Reset()         { *m = MintX509SVIDResponse{} }
func (m *MintX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*MintX509SVIDResponse) ProtoMessage()    {}
func (*MintX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{1}
}

func (m *MintX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintX509SVIDResponse.Unmarshal(m, b)
}
func (m *MintX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *MintX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintX509SVIDResponse.Merge(m, src)
}
func (m *MintX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_MintX509SVIDResponse.Size(m)
}
func (m *MintX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MintX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MintX509SVIDResponse proto.InternalMessageInfo

func (m *MintX509SVIDResponse) GetSvid() *types.X509SVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

type MintJWTSVIDRequest struct {
	// Required. SPIFFE ID of the JWT-SVID.
	Id *types.SPIFFEID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. List of audience claims to include in the JWT-SVID. At least one must
	// be set.
	Audience []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	// Desired TTL of the JWT-SVID, in seconds. The server default will be used
	// if unset. The TTL is advisory only. The actual lifetime of the JWT-SVID
	// may be lower depending on the remaining lifetime of the active SPIRE
	// Server CA.
	Ttl                  int32    `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintJWTSVIDRequest) Reset()         { *m = MintJWTSVIDRequest{} }
func (m *MintJWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*MintJWTSVIDRequest) ProtoMessage()    {}
func (*MintJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{2}
}

func (m *MintJWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintJWTSVIDRequest.Unmarshal(m, b)
}
func (m *MintJWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintJWTSVIDRequest.Marshal(b, m, deterministic)
}
func (m *MintJWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintJWTSVIDRequest.Merge(m, src)
}
func (m *MintJWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_MintJWTSVIDRequest.Size(m)
}
func (m *MintJWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MintJWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MintJWTSVIDRequest proto.InternalMessageInfo

func (m *MintJWTSVIDRequest) GetId() *types.SPIFFEID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MintJWTSVIDRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

func (m *MintJWTSVIDRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type MintJWTSVIDResponse struct {
	// The newly issued JWT-SVID.
	Svid                 *types.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MintJWTSVIDResponse) Reset()         { *m = MintJWTSVIDResponse{} }
func (m *MintJWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*MintJWTSVIDResponse) ProtoMessage()    {}
func (*MintJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{3}
}

func (m *MintJWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintJWTSVIDResponse.Unmarshal(m, b)
}
func (m *MintJWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintJWTSVIDResponse.Marshal(b, m, deterministic)
}
func (m *MintJWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintJWTSVIDResponse.Merge(m, src)
}
func (m *MintJWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_MintJWTSVIDResponse.Size(m)
}
func (m *MintJWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MintJWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MintJWTSVIDResponse proto.InternalMessageInfo

func (m *MintJWTSVIDResponse) GetSvid() *types.JWTSVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

type BatchNewX509SVIDRequest struct {
	// Required. One or more X509-SVID parameters for X509-SVID entries to
	// be signed.
	Params               []*NewX509SVIDParams `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BatchNewX509SVIDRequest) Reset()         { *m = BatchNewX509SVIDRequest{} }
func (m *BatchNewX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*BatchNewX509SVIDRequest) ProtoMessage()    {}
func (*BatchNewX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{4}
}

func (m *BatchNewX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchNewX509SVIDRequest.Unmarshal(m, b)
}
func (m *BatchNewX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchNewX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *BatchNewX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchNewX509SVIDRequest.Merge(m, src)
}
func (m *BatchNewX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_BatchNewX509SVIDRequest.Size(m)
}
func (m *BatchNewX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchNewX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchNewX509SVIDRequest proto.InternalMessageInfo

func (m *BatchNewX509SVIDRequest) GetParams() []*NewX509SVIDParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type BatchNewX509SVIDResponse struct {
	// Result for each X509-SVID requested.
	Results              []*BatchNewX509SVIDResponse_Result `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *BatchNewX509SVIDResponse) Reset()         { *m = BatchNewX509SVIDResponse{} }
func (m *BatchNewX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*BatchNewX509SVIDResponse) ProtoMessage()    {}
func (*BatchNewX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{5}
}

func (m *BatchNewX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchNewX509SVIDResponse.Unmarshal(m, b)
}
func (m *BatchNewX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchNewX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *BatchNewX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchNewX509SVIDResponse.Merge(m, src)
}
func (m *BatchNewX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_BatchNewX509SVIDResponse.Size(m)
}
func (m *BatchNewX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchNewX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchNewX509SVIDResponse proto.InternalMessageInfo

func (m *BatchNewX509SVIDResponse) GetResults() []*BatchNewX509SVIDResponse_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type BatchNewX509SVIDResponse_Result struct {
	// The status of creating the X509-SVID.
	Status *types.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The newly created X509-SVID. This will be set if the status is OK.
	Bundle               *types.X509SVID `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BatchNewX509SVIDResponse_Result) Reset()         { *m = BatchNewX509SVIDResponse_Result{} }
func (m *BatchNewX509SVIDResponse_Result) String() string { return proto.CompactTextString(m) }
func (*BatchNewX509SVIDResponse_Result) ProtoMessage()    {}
func (*BatchNewX509SVIDResponse_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{5, 0}
}

func (m *BatchNewX509SVIDResponse_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchNewX509SVIDResponse_Result.Unmarshal(m, b)
}
func (m *BatchNewX509SVIDResponse_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchNewX509SVIDResponse_Result.Marshal(b, m, deterministic)
}
func (m *BatchNewX509SVIDResponse_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchNewX509SVIDResponse_Result.Merge(m, src)
}
func (m *BatchNewX509SVIDResponse_Result) XXX_Size() int {
	return xxx_messageInfo_BatchNewX509SVIDResponse_Result.Size(m)
}
func (m *BatchNewX509SVIDResponse_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchNewX509SVIDResponse_Result.DiscardUnknown(m)
}

var xxx_messageInfo_BatchNewX509SVIDResponse_Result proto.InternalMessageInfo

func (m *BatchNewX509SVIDResponse_Result) GetStatus() *types.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BatchNewX509SVIDResponse_Result) GetBundle() *types.X509SVID {
	if m != nil {
		return m.Bundle
	}
	return nil
}

type NewJWTSVIDRequest struct {
	// Required. The entry ID of the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. List of audience claims to include in the JWT-SVID. At least
	// one must be set.
	Audience             []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewJWTSVIDRequest) Reset()         { *m = NewJWTSVIDRequest{} }
func (m *NewJWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*NewJWTSVIDRequest) ProtoMessage()    {}
func (*NewJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{6}
}

func (m *NewJWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewJWTSVIDRequest.Unmarshal(m, b)
}
func (m *NewJWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewJWTSVIDRequest.Marshal(b, m, deterministic)
}
func (m *NewJWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewJWTSVIDRequest.Merge(m, src)
}
func (m *NewJWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_NewJWTSVIDRequest.Size(m)
}
func (m *NewJWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewJWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewJWTSVIDRequest proto.InternalMessageInfo

func (m *NewJWTSVIDRequest) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func (m *NewJWTSVIDRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

type NewJWTSVIDResponse struct {
	// The newly issued JWT-SVID
	Svid                 *types.JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NewJWTSVIDResponse) Reset()         { *m = NewJWTSVIDResponse{} }
func (m *NewJWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*NewJWTSVIDResponse) ProtoMessage()    {}
func (*NewJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{7}
}

func (m *NewJWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewJWTSVIDResponse.Unmarshal(m, b)
}
func (m *NewJWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewJWTSVIDResponse.Marshal(b, m, deterministic)
}
func (m *NewJWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewJWTSVIDResponse.Merge(m, src)
}
func (m *NewJWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_NewJWTSVIDResponse.Size(m)
}
func (m *NewJWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewJWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewJWTSVIDResponse proto.InternalMessageInfo

func (m *NewJWTSVIDResponse) GetSvid() *types.JWTSVID {
	if m != nil {
		return m.Svid
	}
	return nil
}

type NewDownstreamX509CARequest struct {
	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the downstream entry.
	Csr                  []byte   `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewDownstreamX509CARequest) Reset()         { *m = NewDownstreamX509CARequest{} }
func (m *NewDownstreamX509CARequest) String() string { return proto.CompactTextString(m) }
func (*NewDownstreamX509CARequest) ProtoMessage()    {}
func (*NewDownstreamX509CARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{8}
}

func (m *NewDownstreamX509CARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewDownstreamX509CARequest.Unmarshal(m, b)
}
func (m *NewDownstreamX509CARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewDownstreamX509CARequest.Marshal(b, m, deterministic)
}
func (m *NewDownstreamX509CARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDownstreamX509CARequest.Merge(m, src)
}
func (m *NewDownstreamX509CARequest) XXX_Size() int {
	return xxx_messageInfo_NewDownstreamX509CARequest.Size(m)
}
func (m *NewDownstreamX509CARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDownstreamX509CARequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewDownstreamX509CARequest proto.InternalMessageInfo

func (m *NewDownstreamX509CARequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

type NewDownstreamX509CAResponse struct {
	// CA certificate and any intermediates required to form a chain of trust
	// back to the X.509 authorities (DER encoded). The CA certificate is the
	// first.
	CaCertChain [][]byte `protobuf:"bytes,1,rep,name=ca_cert_chain,json=caCertChain,proto3" json:"ca_cert_chain,omitempty"`
	// X.509 authorities (DER encoded).
	X509Authorities      [][]byte `protobuf:"bytes,2,rep,name=x509_authorities,json=x509Authorities,proto3" json:"x509_authorities,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewDownstreamX509CAResponse) Reset()         { *m = NewDownstreamX509CAResponse{} }
func (m *NewDownstreamX509CAResponse) String() string { return proto.CompactTextString(m) }
func (*NewDownstreamX509CAResponse) ProtoMessage()    {}
func (*NewDownstreamX509CAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{9}
}

func (m *NewDownstreamX509CAResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewDownstreamX509CAResponse.Unmarshal(m, b)
}
func (m *NewDownstreamX509CAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewDownstreamX509CAResponse.Marshal(b, m, deterministic)
}
func (m *NewDownstreamX509CAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDownstreamX509CAResponse.Merge(m, src)
}
func (m *NewDownstreamX509CAResponse) XXX_Size() int {
	return xxx_messageInfo_NewDownstreamX509CAResponse.Size(m)
}
func (m *NewDownstreamX509CAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDownstreamX509CAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewDownstreamX509CAResponse proto.InternalMessageInfo

func (m *NewDownstreamX509CAResponse) GetCaCertChain() [][]byte {
	if m != nil {
		return m.CaCertChain
	}
	return nil
}

func (m *NewDownstreamX509CAResponse) GetX509Authorities() [][]byte {
	if m != nil {
		return m.X509Authorities
	}
	return nil
}

type NewX509SVIDParams struct {
	// Required. The entry ID for the identity being requested.
	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	// Required. The ASN.1 DER encoded Certificate Signing Request (CSR). The
	// CSR is only used to convey the public key; other fields in the CSR are
	// ignored. The X509-SVID attributes are determined by the entry.
	Csr                  []byte   `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewX509SVIDParams) Reset()         { *m = NewX509SVIDParams{} }
func (m *NewX509SVIDParams) String() string { return proto.CompactTextString(m) }
func (*NewX509SVIDParams) ProtoMessage()    {}
func (*NewX509SVIDParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e88f76a4f58fcdb9, []int{10}
}

func (m *NewX509SVIDParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewX509SVIDParams.Unmarshal(m, b)
}
func (m *NewX509SVIDParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewX509SVIDParams.Marshal(b, m, deterministic)
}
func (m *NewX509SVIDParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewX509SVIDParams.Merge(m, src)
}
func (m *NewX509SVIDParams) XXX_Size() int {
	return xxx_messageInfo_NewX509SVIDParams.Size(m)
}
func (m *NewX509SVIDParams) XXX_DiscardUnknown() {
	xxx_messageInfo_NewX509SVIDParams.DiscardUnknown(m)
}

var xxx_messageInfo_NewX509SVIDParams proto.InternalMessageInfo

func (m *NewX509SVIDParams) GetEntryId() string {
	if m != nil {
		return m.EntryId
	}
	return ""
}

func (m *NewX509SVIDParams) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func init() {
	proto.RegisterType((*MintX509SVIDRequest)(nil), "spire.api.server.svid.v1.MintX509SVIDRequest")
	proto.RegisterType((*MintX509SVIDResponse)(nil), "spire.api.server.svid.v1.MintX509SVIDResponse")
	proto.RegisterType((*MintJWTSVIDRequest)(nil), "spire.api.server.svid.v1.MintJWTSVIDRequest")
	proto.RegisterType((*MintJWTSVIDResponse)(nil), "spire.api.server.svid.v1.MintJWTSVIDResponse")
	proto.RegisterType((*BatchNewX509SVIDRequest)(nil), "spire.api.server.svid.v1.BatchNewX509SVIDRequest")
	proto.RegisterType((*BatchNewX509SVIDResponse)(nil), "spire.api.server.svid.v1.BatchNewX509SVIDResponse")
	proto.RegisterType((*BatchNewX509SVIDResponse_Result)(nil), "spire.api.server.svid.v1.BatchNewX509SVIDResponse.Result")
	proto.RegisterType((*NewJWTSVIDRequest)(nil), "spire.api.server.svid.v1.NewJWTSVIDRequest")
	proto.RegisterType((*NewJWTSVIDResponse)(nil), "spire.api.server.svid.v1.NewJWTSVIDResponse")
	proto.RegisterType((*NewDownstreamX509CARequest)(nil), "spire.api.server.svid.v1.NewDownstreamX509CARequest")
	proto.RegisterType((*NewDownstreamX509CAResponse)(nil), "spire.api.server.svid.v1.NewDownstreamX509CAResponse")
	proto.RegisterType((*NewX509SVIDParams)(nil), "spire.api.server.svid.v1.NewX509SVIDParams")
}

func init() {
	proto.RegisterFile("spire/api/server/svid/v1/svid.proto", fileDescriptor_e88f76a4f58fcdb9)
}

var fileDescriptor_e88f76a4f58fcdb9 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x5d, 0x4f, 0xdb, 0x30,
	0x14, 0x55, 0x5b, 0x56, 0xe0, 0xb6, 0xd3, 0x98, 0x61, 0x5a, 0xc8, 0x5e, 0xaa, 0x4c, 0x93, 0x8a,
	0x00, 0x07, 0xba, 0xf1, 0x50, 0xa1, 0x7d, 0x40, 0x19, 0x52, 0x91, 0x86, 0x90, 0x99, 0xb6, 0x69,
	0x0f, 0xab, 0x4c, 0x6a, 0xa8, 0x51, 0x9b, 0x66, 0xb6, 0xd3, 0x8e, 0xd7, 0xfd, 0xbc, 0xbd, 0xef,
	0xff, 0x4c, 0x71, 0xdc, 0x36, 0xe9, 0x9a, 0xaa, 0x7d, 0x4a, 0x6c, 0x9f, 0x73, 0xcf, 0xf5, 0xbd,
	0xe7, 0xca, 0xf0, 0x52, 0x06, 0x5c, 0x30, 0x97, 0x06, 0xdc, 0x95, 0x4c, 0x0c, 0x98, 0x70, 0xe5,
	0x80, 0xb7, 0xdd, 0xc1, 0xa1, 0xfe, 0xe2, 0x40, 0xf4, 0x55, 0x1f, 0x59, 0x1a, 0x84, 0x69, 0xc0,
	0x71, 0x0c, 0xc2, 0xfa, 0x70, 0x70, 0x68, 0x6f, 0xc7, 0x74, 0xf5, 0x10, 0x30, 0xe9, 0xde, 0x0f,
	0xd5, 0x84, 0x64, 0xdb, 0xc9, 0x23, 0x19, 0xf0, 0xdb, 0x5b, 0x36, 0x3e, 0xb3, 0x52, 0x67, 0x8a,
	0xaa, 0x50, 0xce, 0x62, 0xfd, 0x3a, 0x3a, 0xa8, 0x4f, 0x22, 0x3a, 0x75, 0xd8, 0xfc, 0xc4, 0x7d,
	0xf5, 0xed, 0xe8, 0xa0, 0x7e, 0xfd, 0xa5, 0x79, 0x46, 0xd8, 0xcf, 0x90, 0x49, 0x85, 0x36, 0xa0,
	0xe0, 0x49, 0x61, 0xe5, 0x2a, 0xb9, 0x6a, 0x99, 0x44, 0xbf, 0xd1, 0x8e, 0x52, 0x5d, 0x2b, 0x5f,
	0xc9, 0x55, 0x1f, 0x91, 0xe8, 0xd7, 0x39, 0x81, 0xad, 0x34, 0x55, 0x06, 0x7d, 0x5f, 0x32, 0xb4,
	0x03, 0x2b, 0x91, 0x80, 0x26, 0x97, 0x6a, 0xcf, 0x70, 0x7c, 0x51, 0xad, 0x8e, 0xc7, 0x60, 0x0d,
	0x71, 0x38, 0xa0, 0x28, 0xc4, 0xc5, 0xd7, 0xcf, 0x49, 0xf1, 0x57, 0x90, 0xcf, 0xa0, 0x5f, 0x5f,
	0x35, 0xcf, 0xcf, 0x3f, 0x36, 0xcf, 0x48, 0x9e, 0xb7, 0x91, 0x0d, 0x6b, 0x34, 0x6c, 0x73, 0xe6,
	0x7b, 0xcc, 0xca, 0x57, 0x0a, 0xd5, 0x75, 0x32, 0x5e, 0x8f, 0xb2, 0x2d, 0x4c, 0xb2, 0x7d, 0x1f,
	0x5f, 0x74, 0x2c, 0x65, 0x92, 0xad, 0xa6, 0x92, 0xdd, 0x4a, 0xa9, 0x8d, 0xb0, 0x71, 0xae, 0x3f,
	0xe0, 0xf9, 0x29, 0x55, 0x5e, 0xe7, 0x92, 0x0d, 0xa7, 0xab, 0xd5, 0x80, 0x62, 0x40, 0x05, 0xed,
	0x49, 0x2b, 0x57, 0x29, 0x54, 0x4b, 0xb5, 0x5d, 0x9c, 0xd5, 0x5c, 0x9c, 0x60, 0x5f, 0x69, 0x0a,
	0x31, 0x54, 0xe7, 0x6f, 0x0e, 0xac, 0xff, 0x05, 0x4c, 0x9a, 0xd7, 0xb0, 0x2a, 0x98, 0x0c, 0xbb,
	0x6a, 0x24, 0x51, 0xcf, 0x96, 0xc8, 0x0a, 0x82, 0x89, 0x8e, 0x40, 0x46, 0x91, 0xec, 0x36, 0x14,
	0xe3, 0x2d, 0xb4, 0x0b, 0xc5, 0xd8, 0x31, 0xa6, 0x0e, 0x9b, 0xe9, 0xaa, 0xeb, 0x23, 0x62, 0x20,
	0x68, 0x1f, 0x8a, 0x37, 0xa1, 0xdf, 0xee, 0x32, 0x6d, 0x86, 0xcc, 0x0e, 0x1b, 0x90, 0x73, 0x01,
	0x4f, 0x2f, 0xd9, 0x70, 0xaa, 0xc5, 0xdb, 0xb0, 0xc6, 0x7c, 0x25, 0x1e, 0x5a, 0xa6, 0xf4, 0xeb,
	0x64, 0x55, 0xaf, 0x9b, 0x73, 0xdb, 0xea, 0xbc, 0x03, 0x94, 0x8c, 0xb5, 0x74, 0x0f, 0x31, 0xd8,
	0x97, 0x6c, 0x78, 0xd6, 0x1f, 0xfa, 0x52, 0x09, 0x46, 0x7b, 0x51, 0xb2, 0x8d, 0x93, 0x4c, 0xd3,
	0x3b, 0x5d, 0x78, 0x31, 0x13, 0x6f, 0x84, 0x1d, 0x78, 0xec, 0xd1, 0x96, 0xc7, 0x84, 0x6a, 0x79,
	0x1d, 0xca, 0x7d, 0xdd, 0x9b, 0x32, 0x29, 0x79, 0xb4, 0xc1, 0x84, 0x6a, 0x44, 0x5b, 0x68, 0x07,
	0x36, 0xa2, 0x91, 0x6b, 0xd1, 0x50, 0x75, 0xfa, 0x82, 0x2b, 0xce, 0xa4, 0xbe, 0x56, 0x99, 0x3c,
	0x89, 0xf6, 0x4f, 0x26, 0xdb, 0xce, 0x07, 0x5d, 0xa9, 0xb4, 0x3d, 0xe6, 0x55, 0xca, 0xe4, 0x9b,
	0x1f, 0xe7, 0x5b, 0xfb, 0xb3, 0x02, 0x2b, 0x11, 0x17, 0xf5, 0xa0, 0x9c, 0x9c, 0x4d, 0xb4, 0x9f,
	0x6d, 0x97, 0x19, 0xe3, 0x6f, 0xe3, 0x45, 0xe1, 0xa6, 0x10, 0xf7, 0x50, 0x4a, 0x0c, 0x17, 0xda,
	0x9b, 0x4f, 0x4f, 0x7b, 0xc1, 0xde, 0x5f, 0x10, 0x6d, 0xb4, 0x1e, 0x60, 0x63, 0xda, 0xe1, 0xe8,
	0x70, 0x99, 0x69, 0x88, 0x55, 0x6b, 0xcb, 0x0f, 0x10, 0xba, 0x03, 0x98, 0xd8, 0x0f, 0xcd, 0x9f,
	0xf2, 0xa9, 0x4b, 0xee, 0x2d, 0x06, 0x36, 0x42, 0xbf, 0x73, 0xb0, 0x39, 0xc3, 0x78, 0xe8, 0xcd,
	0xdc, 0x28, 0x19, 0xbe, 0xb6, 0x8f, 0x96, 0x64, 0xc5, 0x49, 0x9c, 0xbe, 0xfd, 0x7e, 0x7c, 0xc7,
	0x55, 0x27, 0xbc, 0xc1, 0x5e, 0xbf, 0x67, 0x5e, 0x1b, 0x37, 0x7e, 0x4a, 0xf4, 0xdb, 0xe1, 0x66,
	0x3d, 0x73, 0xc7, 0xd1, 0xf7, 0xa6, 0xa8, 0x41, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5a,
	0x7b, 0xf2, 0x21, 0x0e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SVIDClient is the client API for SVID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SVIDClient interface {
	// Mints a one-off X509-SVID outside of the normal node/workload
	// registration process.
	//
	// The caller must be local or present an admin X509-SVID.
	MintX509SVID(ctx context.Context, in *MintX509SVIDRequest, opts ...grpc.CallOption) (*MintX509SVIDResponse, error)
	// Mints a one-off JWT-SVID outside of the normal node/workload
	// registration process.
	//
	// The caller must be local or present an admin X509-SVID.
	MintJWTSVID(ctx context.Context, in *MintJWTSVIDRequest, opts ...grpc.CallOption) (*MintJWTSVIDResponse, error)
	// Creates one or more X509-SVIDs from registration entries.
	//
	// The caller must present an active agent X509-SVID that is authorized
	// to mint the requested entries. See the Entry GetAuthorizedEntries RPC.
	BatchNewX509SVID(ctx context.Context, in *BatchNewX509SVIDRequest, opts ...grpc.CallOption) (*BatchNewX509SVIDResponse, error)
	// Creates an JWT-SVID from a registration entry.
	//
	// The caller must present an active agent X509-SVID that is authorized
	// to mint the requested entry. See the Entry GetAuthorizedEntries RPC.
	NewJWTSVID(ctx context.Context, in *NewJWTSVIDRequest, opts ...grpc.CallOption) (*NewJWTSVIDResponse, error)
	// Creates an X509 CA certificate appropriate for use by a downstream
	// entity to mint X509-SVIDs.
	//
	// The caller must present a downstream X509-SVID.
	NewDownstreamX509CA(ctx context.Context, in *NewDownstreamX509CARequest, opts ...grpc.CallOption) (*NewDownstreamX509CAResponse, error)
}

type sVIDClient struct {
	cc grpc.ClientConnInterface
}

func NewSVIDClient(cc grpc.ClientConnInterface) SVIDClient {
	return &sVIDClient{cc}
}

func (c *sVIDClient) MintX509SVID(ctx context.Context, in *MintX509SVIDRequest, opts ...grpc.CallOption) (*MintX509SVIDResponse, error) {
	out := new(MintX509SVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.server.svid.v1.SVID/MintX509SVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDClient) MintJWTSVID(ctx context.Context, in *MintJWTSVIDRequest, opts ...grpc.CallOption) (*MintJWTSVIDResponse, error) {
	out := new(MintJWTSVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.server.svid.v1.SVID/MintJWTSVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDClient) BatchNewX509SVID(ctx context.Context, in *BatchNewX509SVIDRequest, opts ...grpc.CallOption) (*BatchNewX509SVIDResponse, error) {
	out := new(BatchNewX509SVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.server.svid.v1.SVID/BatchNewX509SVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDClient) NewJWTSVID(ctx context.Context, in *NewJWTSVIDRequest, opts ...grpc.CallOption) (*NewJWTSVIDResponse, error) {
	out := new(NewJWTSVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.server.svid.v1.SVID/NewJWTSVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sVIDClient) NewDownstreamX509CA(ctx context.Context, in *NewDownstreamX509CARequest, opts ...grpc.CallOption) (*NewDownstreamX509CAResponse, error) {
	out := new(NewDownstreamX509CAResponse)
	err := c.cc.Invoke(ctx, "/spire.api.server.svid.v1.SVID/NewDownstreamX509CA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVIDServer is the server API for SVID service.
type SVIDServer interface {
	// Mints a one-off X509-SVID outside of the normal node/workload
	// registration process.
	//
	// The caller must be local or present an admin X509-SVID.
	MintX509SVID(context.Context, *MintX509SVIDRequest) (*MintX509SVIDResponse, error)
	// Mints a one-off JWT-SVID outside of the normal node/workload
	// registration process.
	//
	// The caller must be local or present an admin X509-SVID.
	MintJWTSVID(context.Context, *MintJWTSVIDRequest) (*MintJWTSVIDResponse, error)
	// Creates one or more X509-SVIDs from registration entries.
	//
	// The caller must present an active agent X509-SVID that is authorized
	// to mint the requested entries. See the Entry GetAuthorizedEntries RPC.
	BatchNewX509SVID(context.Context, *BatchNewX509SVIDRequest) (*BatchNewX509SVIDResponse, error)
	// Creates an JWT-SVID from a registration entry.
	//
	// The caller must present an active agent X509-SVID that is authorized
	// to mint the requested entry. See the Entry GetAuthorizedEntries RPC.
	NewJWTSVID(context.Context, *NewJWTSVIDRequest) (*NewJWTSVIDResponse, error)
	// Creates an X509 CA certificate appropriate for use by a downstream
	// entity to mint X509-SVIDs.
	//
	// The caller must present a downstream X509-SVID.
	NewDownstreamX509CA(context.Context, *NewDownstreamX509CARequest) (*NewDownstreamX509CAResponse, error)
}

// UnimplementedSVIDServer can be embedded to have forward compatible implementations.
type UnimplementedSVIDServer struct {
}

func (*UnimplementedSVIDServer) MintX509SVID(ctx context.Context, req *MintX509SVIDRequest) (*MintX509SVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintX509SVID not implemented")
}
func (*UnimplementedSVIDServer) MintJWTSVID(ctx context.Context, req *MintJWTSVIDRequest) (*MintJWTSVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintJWTSVID not implemented")
}
func (*UnimplementedSVIDServer) BatchNewX509SVID(ctx context.Context, req *BatchNewX509SVIDRequest) (*BatchNewX509SVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchNewX509SVID not implemented")
}
func (*UnimplementedSVIDServer) NewJWTSVID(ctx context.Context, req *NewJWTSVIDRequest) (*NewJWTSVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewJWTSVID not implemented")
}
func (*UnimplementedSVIDServer) NewDownstreamX509CA(ctx context.Context, req *NewDownstreamX509CARequest) (*NewDownstreamX509CAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDownstreamX509CA not implemented")
}

func RegisterSVIDServer(s *grpc.Server, srv SVIDServer) {
	s.RegisterService(&_SVID_serviceDesc, srv)
}

func _SVID_MintX509SVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintX509SVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDServer).MintX509SVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.server.svid.v1.SVID/MintX509SVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDServer).MintX509SVID(ctx, req.(*MintX509SVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVID_MintJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintJWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDServer).MintJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.server.svid.v1.SVID/MintJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDServer).MintJWTSVID(ctx, req.(*MintJWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVID_BatchNewX509SVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchNewX509SVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDServer).BatchNewX509SVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.server.svid.v1.SVID/BatchNewX509SVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDServer).BatchNewX509SVID(ctx, req.(*BatchNewX509SVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVID_NewJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDServer).NewJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.server.svid.v1.SVID/NewJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDServer).NewJWTSVID(ctx, req.(*NewJWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SVID_NewDownstreamX509CA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDownstreamX509CARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVIDServer).NewDownstreamX509CA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.server.svid.v1.SVID/NewDownstreamX509CA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVIDServer).NewDownstreamX509CA(ctx, req.(*NewDownstreamX509CARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SVID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.server.svid.v1.SVID",
	HandlerType: (*SVIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintX509SVID",
			Handler:    _SVID_MintX509SVID_Handler,
		},
		{
			MethodName: "MintJWTSVID",
			Handler:    _SVID_MintJWTSVID_Handler,
		},
		{
			MethodName: "BatchNewX509SVID",
			Handler:    _SVID_BatchNewX509SVID_Handler,
		},
		{
			MethodName: "NewJWTSVID",
			Handler:    _SVID_NewJWTSVID_Handler,
		},
		{
			MethodName: "NewDownstreamX509CA",
			Handler:    _SVID_NewDownstreamX509CA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/api/server/svid/v1/svid.proto",
}
