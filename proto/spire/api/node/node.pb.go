// The Node API is exposed by the Spire Server to Node Agents.  A node
//agent uses this API to attest the node it is running on, to retrieve the
//list of identities that are allowed to run on that node, and to retrieve
//SVIDs by presenting certificate signing requests to the Spire Server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: spire/api/node/node.proto

package node

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//* Trust domain bundle
type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bundle identifier, i.e. the SPIFFE ID for the trust domain
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// bundle data (ASN.1 encoded X.509 certificates)
	CaCerts []byte `protobuf:"bytes,2,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{0}
}

func (x *Bundle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bundle) GetCaCerts() []byte {
	if x != nil {
		return x.CaCerts
	}
	return nil
}

// A type which contains the "Spiffe Verifiable Identity Document" and
// a TTL indicating when the SVID expires.
type X509SVID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// X509 SVID and intermediates necessary to form a chain of trust back
	// to a root CA in the bundle.
	CertChain []byte `protobuf:"bytes,3,opt,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	// SVID expiration timestamp (in seconds since Unix epoch)
	ExpiresAt int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *X509SVID) Reset() {
	*x = X509SVID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509SVID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVID) ProtoMessage() {}

func (x *X509SVID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVID.ProtoReflect.Descriptor instead.
func (*X509SVID) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{1}
}

func (x *X509SVID) GetCertChain() []byte {
	if x != nil {
		return x.CertChain
	}
	return nil
}

func (x *X509SVID) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// A message returned by the Spire Server, which includes a map of signed SVIDs and
//a list of all current Registration Entries which are relevant to the caller SPIFFE ID.
type X509SVIDUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map containing SVID values keyed by:
	//  - SPIFFE ID in message 'AttestResponse'        (Map[SPIFFE_ID] => SVID)
	//  - Entry  ID in message 'FetchX509SVIDResponse' (Map[Entry_ID]  => SVID)
	Svids map[string]*X509SVID `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A type representing a curated record that the Spire Server uses to set up
	// and manage the various registered nodes and workloads that are controlled by it.
	RegistrationEntries []*common.RegistrationEntry `protobuf:"bytes,3,rep,name=registration_entries,json=registrationEntries,proto3" json:"registration_entries,omitempty"`
	// Trust bundles associated with the SVIDs, keyed by trust domain SPIFFE
	// ID. Bundles included are the trust bundle for the server trust domain
	// and any federated trust domain bundles applicable to the SVIDs.
	Bundles map[string]*common.Bundle `protobuf:"bytes,5,rep,name=bundles,proto3" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *X509SVIDUpdate) Reset() {
	*x = X509SVIDUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509SVIDUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVIDUpdate) ProtoMessage() {}

func (x *X509SVIDUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVIDUpdate.ProtoReflect.Descriptor instead.
func (*X509SVIDUpdate) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{2}
}

func (x *X509SVIDUpdate) GetSvids() map[string]*X509SVID {
	if x != nil {
		return x.Svids
	}
	return nil
}

func (x *X509SVIDUpdate) GetRegistrationEntries() []*common.RegistrationEntry {
	if x != nil {
		return x.RegistrationEntries
	}
	return nil
}

func (x *X509SVIDUpdate) GetBundles() map[string]*common.Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

// JSR is a JWT SVID signing request.
type JSR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SPIFFE ID of the workload
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// List of intended audience
	Audience []string `protobuf:"bytes,2,rep,name=audience,proto3" json:"audience,omitempty"`
	// Time-to-live in seconds. If unspecified the JWT SVID will be assigned
	// a default time-to-live by the server.
	Ttl int32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *JSR) Reset() {
	*x = JSR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSR) ProtoMessage() {}

func (x *JSR) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSR.ProtoReflect.Descriptor instead.
func (*JSR) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{3}
}

func (x *JSR) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *JSR) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *JSR) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// JWTSVID is a signed JWT-SVID with fields lifted out for convenience.
type JWTSVID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JWT-SVID JWT token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// SVID expiration timestamp (seconds since Unix epoch)
	ExpiresAt int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// SVID issuance timestamp (seconds since Unix epoch)
	IssuedAt int64 `protobuf:"varint,3,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
}

func (x *JWTSVID) Reset() {
	*x = JWTSVID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTSVID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTSVID) ProtoMessage() {}

func (x *JWTSVID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTSVID.ProtoReflect.Descriptor instead.
func (*JWTSVID) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{4}
}

func (x *JWTSVID) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JWTSVID) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *JWTSVID) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

// Represents a request to attest the node.
type AttestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A type which contains attestation data for specific platform.
	AttestationData *common.AttestationData `protobuf:"bytes,1,opt,name=attestation_data,json=attestationData,proto3" json:"attestation_data,omitempty"`
	// Certificate signing request.
	Csr []byte `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	// Attestation challenge response
	Response []byte `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *AttestRequest) Reset() {
	*x = AttestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestRequest) ProtoMessage() {}

func (x *AttestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestRequest.ProtoReflect.Descriptor instead.
func (*AttestRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{5}
}

func (x *AttestRequest) GetAttestationData() *common.AttestationData {
	if x != nil {
		return x.AttestationData
	}
	return nil
}

func (x *AttestRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *AttestRequest) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

// Represents a response that contains  map of signed SVIDs and an array of
// all current Registration Entries which are relevant to the caller SPIFFE ID
type AttestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It includes a map of signed SVIDs and an array of all current
	// Registration Entries which are relevant to the caller SPIFFE ID.
	SvidUpdate *X509SVIDUpdate `protobuf:"bytes,1,opt,name=svid_update,json=svidUpdate,proto3" json:"svid_update,omitempty"`
	// This is a challenge issued by the server to the node. If populated, the
	// node is expected to respond with another AttestRequest with the response.
	// This field is mutually exclusive with the update field.
	Challenge []byte `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *AttestResponse) Reset() {
	*x = AttestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestResponse) ProtoMessage() {}

func (x *AttestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestResponse.ProtoReflect.Descriptor instead.
func (*AttestResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{6}
}

func (x *AttestResponse) GetSvidUpdate() *X509SVIDUpdate {
	if x != nil {
		return x.SvidUpdate
	}
	return nil
}

func (x *AttestResponse) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

// Represents a request with a list of CSR.
type FetchX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of CSRs keyed by entry ID
	Csrs map[string][]byte `protobuf:"bytes,3,rep,name=csrs,proto3" json:"csrs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchX509SVIDRequest) Reset() {
	*x = FetchX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchX509SVIDRequest) ProtoMessage() {}

func (x *FetchX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*FetchX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{7}
}

func (x *FetchX509SVIDRequest) GetCsrs() map[string][]byte {
	if x != nil {
		return x.Csrs
	}
	return nil
}

// Represents a response that contains  map of signed SVIDs and an array
// of all current Registration Entries which are relevant to the caller SPIFFE ID.
type FetchX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It includes a map of signed SVIDs and an array of all current Registration
	// Entries which are relevant to the caller SPIFFE ID.
	SvidUpdate *X509SVIDUpdate `protobuf:"bytes,1,opt,name=svid_update,json=svidUpdate,proto3" json:"svid_update,omitempty"`
}

func (x *FetchX509SVIDResponse) Reset() {
	*x = FetchX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchX509SVIDResponse) ProtoMessage() {}

func (x *FetchX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*FetchX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{8}
}

func (x *FetchX509SVIDResponse) GetSvidUpdate() *X509SVIDUpdate {
	if x != nil {
		return x.SvidUpdate
	}
	return nil
}

type FetchJWTSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The JWT signing request
	Jsr *JSR `protobuf:"bytes,1,opt,name=jsr,proto3" json:"jsr,omitempty"`
}

func (x *FetchJWTSVIDRequest) Reset() {
	*x = FetchJWTSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchJWTSVIDRequest) ProtoMessage() {}

func (x *FetchJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*FetchJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{9}
}

func (x *FetchJWTSVIDRequest) GetJsr() *JSR {
	if x != nil {
		return x.Jsr
	}
	return nil
}

type FetchJWTSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signed JWT-SVID
	Svid *JWTSVID `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
}

func (x *FetchJWTSVIDResponse) Reset() {
	*x = FetchJWTSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchJWTSVIDResponse) ProtoMessage() {}

func (x *FetchJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*FetchJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{10}
}

func (x *FetchJWTSVIDResponse) GetSvid() *JWTSVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

type FetchX509CASVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *FetchX509CASVIDRequest) Reset() {
	*x = FetchX509CASVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchX509CASVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchX509CASVIDRequest) ProtoMessage() {}

func (x *FetchX509CASVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchX509CASVIDRequest.ProtoReflect.Descriptor instead.
func (*FetchX509CASVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{11}
}

func (x *FetchX509CASVIDRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type FetchX509CASVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Svid   *X509SVID      `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	Bundle *common.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *FetchX509CASVIDResponse) Reset() {
	*x = FetchX509CASVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchX509CASVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchX509CASVIDResponse) ProtoMessage() {}

func (x *FetchX509CASVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchX509CASVIDResponse.ProtoReflect.Descriptor instead.
func (*FetchX509CASVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{12}
}

func (x *FetchX509CASVIDResponse) GetSvid() *X509SVID {
	if x != nil {
		return x.Svid
	}
	return nil
}

func (x *FetchX509CASVIDResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type PushJWTKeyUpstreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwtKey *common.PublicKey `protobuf:"bytes,1,opt,name=jwt_key,json=jwtKey,proto3" json:"jwt_key,omitempty"`
}

func (x *PushJWTKeyUpstreamRequest) Reset() {
	*x = PushJWTKeyUpstreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushJWTKeyUpstreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushJWTKeyUpstreamRequest) ProtoMessage() {}

func (x *PushJWTKeyUpstreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushJWTKeyUpstreamRequest.ProtoReflect.Descriptor instead.
func (*PushJWTKeyUpstreamRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{13}
}

func (x *PushJWTKeyUpstreamRequest) GetJwtKey() *common.PublicKey {
	if x != nil {
		return x.JwtKey
	}
	return nil
}

type PushJWTKeyUpstreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// up-to-date bundle of JWT signing keys
	JwtSigningKeys []*common.PublicKey `protobuf:"bytes,1,rep,name=jwt_signing_keys,json=jwtSigningKeys,proto3" json:"jwt_signing_keys,omitempty"`
}

func (x *PushJWTKeyUpstreamResponse) Reset() {
	*x = PushJWTKeyUpstreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushJWTKeyUpstreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushJWTKeyUpstreamResponse) ProtoMessage() {}

func (x *PushJWTKeyUpstreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushJWTKeyUpstreamResponse.ProtoReflect.Descriptor instead.
func (*PushJWTKeyUpstreamResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{14}
}

func (x *PushJWTKeyUpstreamResponse) GetJwtSigningKeys() []*common.PublicKey {
	if x != nil {
		return x.JwtSigningKeys
	}
	return nil
}

type FetchBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FetchBundleRequest) Reset() {
	*x = FetchBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBundleRequest) ProtoMessage() {}

func (x *FetchBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBundleRequest.ProtoReflect.Descriptor instead.
func (*FetchBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{15}
}

type FetchBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *FetchBundleResponse) Reset() {
	*x = FetchBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_node_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBundleResponse) ProtoMessage() {}

func (x *FetchBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_node_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBundleResponse.ProtoReflect.Descriptor instead.
func (*FetchBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_node_node_proto_rawDescGZIP(), []int{16}
}

func (x *FetchBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

var File_spire_api_node_node_proto protoreflect.FileDescriptor

var file_spire_api_node_node_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x19, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9e, 0x03, 0x0a, 0x0e,
	0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x73, 0x76, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x76,
	0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x76, 0x69, 0x64, 0x73, 0x12,
	0x52, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0a, 0x53, 0x76,
	0x69, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53,
	0x56, 0x49, 0x44, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50,
	0x0a, 0x0c, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x50, 0x0a, 0x03,
	0x4a, 0x53, 0x52, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x5b,
	0x0a, 0x07, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x0d,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x10, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x76, 0x69, 0x64, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x76,
	0x69, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x04, 0x63, 0x73, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x73, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63,
	0x73, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x43, 0x73, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x58, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x76, 0x69, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x57, 0x54, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x6a, 0x73, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4a, 0x53, 0x52, 0x52, 0x03, 0x6a, 0x73, 0x72,
	0x22, 0x43, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x76, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52,
	0x04, 0x73, 0x76, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x58, 0x35,
	0x30, 0x39, 0x43, 0x41, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73,
	0x72, 0x22, 0x75, 0x0a, 0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41,
	0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x73, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x35, 0x30, 0x39,
	0x53, 0x56, 0x49, 0x44, 0x52, 0x04, 0x73, 0x76, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x19, 0x50, 0x75, 0x73, 0x68,
	0x4a, 0x57, 0x54, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x6a, 0x77, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x06, 0x6a, 0x77, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5f, 0x0a, 0x1a, 0x50, 0x75, 0x73, 0x68, 0x4a,
	0x57, 0x54, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x6a, 0x77, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x6a, 0x77, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43,
	0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x32, 0xb9, 0x04, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0d, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0c, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x12, 0x23, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x58,
	0x35, 0x30, 0x39, 0x43, 0x41, 0x53, 0x56, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x50, 0x75,
	0x73, 0x68, 0x4a, 0x57, 0x54, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x29, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x4a, 0x57, 0x54, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x4a, 0x57, 0x54, 0x4b, 0x65, 0x79, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spire_api_node_node_proto_rawDescOnce sync.Once
	file_spire_api_node_node_proto_rawDescData = file_spire_api_node_node_proto_rawDesc
)

func file_spire_api_node_node_proto_rawDescGZIP() []byte {
	file_spire_api_node_node_proto_rawDescOnce.Do(func() {
		file_spire_api_node_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_api_node_node_proto_rawDescData)
	})
	return file_spire_api_node_node_proto_rawDescData
}

var file_spire_api_node_node_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_spire_api_node_node_proto_goTypes = []interface{}{
	(*Bundle)(nil),                     // 0: spire.api.node.Bundle
	(*X509SVID)(nil),                   // 1: spire.api.node.X509SVID
	(*X509SVIDUpdate)(nil),             // 2: spire.api.node.X509SVIDUpdate
	(*JSR)(nil),                        // 3: spire.api.node.JSR
	(*JWTSVID)(nil),                    // 4: spire.api.node.JWTSVID
	(*AttestRequest)(nil),              // 5: spire.api.node.AttestRequest
	(*AttestResponse)(nil),             // 6: spire.api.node.AttestResponse
	(*FetchX509SVIDRequest)(nil),       // 7: spire.api.node.FetchX509SVIDRequest
	(*FetchX509SVIDResponse)(nil),      // 8: spire.api.node.FetchX509SVIDResponse
	(*FetchJWTSVIDRequest)(nil),        // 9: spire.api.node.FetchJWTSVIDRequest
	(*FetchJWTSVIDResponse)(nil),       // 10: spire.api.node.FetchJWTSVIDResponse
	(*FetchX509CASVIDRequest)(nil),     // 11: spire.api.node.FetchX509CASVIDRequest
	(*FetchX509CASVIDResponse)(nil),    // 12: spire.api.node.FetchX509CASVIDResponse
	(*PushJWTKeyUpstreamRequest)(nil),  // 13: spire.api.node.PushJWTKeyUpstreamRequest
	(*PushJWTKeyUpstreamResponse)(nil), // 14: spire.api.node.PushJWTKeyUpstreamResponse
	(*FetchBundleRequest)(nil),         // 15: spire.api.node.FetchBundleRequest
	(*FetchBundleResponse)(nil),        // 16: spire.api.node.FetchBundleResponse
	nil,                                // 17: spire.api.node.X509SVIDUpdate.SvidsEntry
	nil,                                // 18: spire.api.node.X509SVIDUpdate.BundlesEntry
	nil,                                // 19: spire.api.node.FetchX509SVIDRequest.CsrsEntry
	(*common.RegistrationEntry)(nil),   // 20: spire.common.RegistrationEntry
	(*common.AttestationData)(nil),     // 21: spire.common.AttestationData
	(*common.Bundle)(nil),              // 22: spire.common.Bundle
	(*common.PublicKey)(nil),           // 23: spire.common.PublicKey
}
var file_spire_api_node_node_proto_depIdxs = []int32{
	17, // 0: spire.api.node.X509SVIDUpdate.svids:type_name -> spire.api.node.X509SVIDUpdate.SvidsEntry
	20, // 1: spire.api.node.X509SVIDUpdate.registration_entries:type_name -> spire.common.RegistrationEntry
	18, // 2: spire.api.node.X509SVIDUpdate.bundles:type_name -> spire.api.node.X509SVIDUpdate.BundlesEntry
	21, // 3: spire.api.node.AttestRequest.attestation_data:type_name -> spire.common.AttestationData
	2,  // 4: spire.api.node.AttestResponse.svid_update:type_name -> spire.api.node.X509SVIDUpdate
	19, // 5: spire.api.node.FetchX509SVIDRequest.csrs:type_name -> spire.api.node.FetchX509SVIDRequest.CsrsEntry
	2,  // 6: spire.api.node.FetchX509SVIDResponse.svid_update:type_name -> spire.api.node.X509SVIDUpdate
	3,  // 7: spire.api.node.FetchJWTSVIDRequest.jsr:type_name -> spire.api.node.JSR
	4,  // 8: spire.api.node.FetchJWTSVIDResponse.svid:type_name -> spire.api.node.JWTSVID
	1,  // 9: spire.api.node.FetchX509CASVIDResponse.svid:type_name -> spire.api.node.X509SVID
	22, // 10: spire.api.node.FetchX509CASVIDResponse.bundle:type_name -> spire.common.Bundle
	23, // 11: spire.api.node.PushJWTKeyUpstreamRequest.jwt_key:type_name -> spire.common.PublicKey
	23, // 12: spire.api.node.PushJWTKeyUpstreamResponse.jwt_signing_keys:type_name -> spire.common.PublicKey
	22, // 13: spire.api.node.FetchBundleResponse.bundle:type_name -> spire.common.Bundle
	1,  // 14: spire.api.node.X509SVIDUpdate.SvidsEntry.value:type_name -> spire.api.node.X509SVID
	22, // 15: spire.api.node.X509SVIDUpdate.BundlesEntry.value:type_name -> spire.common.Bundle
	5,  // 16: spire.api.node.Node.Attest:input_type -> spire.api.node.AttestRequest
	7,  // 17: spire.api.node.Node.FetchX509SVID:input_type -> spire.api.node.FetchX509SVIDRequest
	9,  // 18: spire.api.node.Node.FetchJWTSVID:input_type -> spire.api.node.FetchJWTSVIDRequest
	11, // 19: spire.api.node.Node.FetchX509CASVID:input_type -> spire.api.node.FetchX509CASVIDRequest
	13, // 20: spire.api.node.Node.PushJWTKeyUpstream:input_type -> spire.api.node.PushJWTKeyUpstreamRequest
	15, // 21: spire.api.node.Node.FetchBundle:input_type -> spire.api.node.FetchBundleRequest
	6,  // 22: spire.api.node.Node.Attest:output_type -> spire.api.node.AttestResponse
	8,  // 23: spire.api.node.Node.FetchX509SVID:output_type -> spire.api.node.FetchX509SVIDResponse
	10, // 24: spire.api.node.Node.FetchJWTSVID:output_type -> spire.api.node.FetchJWTSVIDResponse
	12, // 25: spire.api.node.Node.FetchX509CASVID:output_type -> spire.api.node.FetchX509CASVIDResponse
	14, // 26: spire.api.node.Node.PushJWTKeyUpstream:output_type -> spire.api.node.PushJWTKeyUpstreamResponse
	16, // 27: spire.api.node.Node.FetchBundle:output_type -> spire.api.node.FetchBundleResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_spire_api_node_node_proto_init() }
func file_spire_api_node_node_proto_init() {
	if File_spire_api_node_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_api_node_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509SVID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509SVIDUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTSVID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchJWTSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchJWTSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchX509CASVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchX509CASVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushJWTKeyUpstreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushJWTKeyUpstreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_node_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_api_node_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_node_node_proto_goTypes,
		DependencyIndexes: file_spire_api_node_node_proto_depIdxs,
		MessageInfos:      file_spire_api_node_node_proto_msgTypes,
	}.Build()
	File_spire_api_node_node_proto = out.File
	file_spire_api_node_node_proto_rawDesc = nil
	file_spire_api_node_node_proto_goTypes = nil
	file_spire_api_node_node_proto_depIdxs = nil
}
