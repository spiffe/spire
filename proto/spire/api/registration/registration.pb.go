// The Registration API is used to register SPIFFE IDs, and the
// attestation logic that should be performed on a workload before those
// IDs can be issued.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: spire/api/registration/registration.proto

package registration

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Mode controls the delete behavior if there are other records
// associated with the bundle (e.g. registration entries).
type DeleteFederatedBundleRequest_Mode int32

const (
	// RESTRICT prevents the bundle from being deleted in the presence of associated entries
	DeleteFederatedBundleRequest_RESTRICT DeleteFederatedBundleRequest_Mode = 0
	// DELETE deletes the bundle and associated entries
	DeleteFederatedBundleRequest_DELETE DeleteFederatedBundleRequest_Mode = 1
	// DISSOCIATE deletes the bundle and dissociates associated entries
	DeleteFederatedBundleRequest_DISSOCIATE DeleteFederatedBundleRequest_Mode = 2
)

// Enum value maps for DeleteFederatedBundleRequest_Mode.
var (
	DeleteFederatedBundleRequest_Mode_name = map[int32]string{
		0: "RESTRICT",
		1: "DELETE",
		2: "DISSOCIATE",
	}
	DeleteFederatedBundleRequest_Mode_value = map[string]int32{
		"RESTRICT":   0,
		"DELETE":     1,
		"DISSOCIATE": 2,
	}
)

func (x DeleteFederatedBundleRequest_Mode) Enum() *DeleteFederatedBundleRequest_Mode {
	p := new(DeleteFederatedBundleRequest_Mode)
	*p = x
	return p
}

func (x DeleteFederatedBundleRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteFederatedBundleRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_spire_api_registration_registration_proto_enumTypes[0].Descriptor()
}

func (DeleteFederatedBundleRequest_Mode) Type() protoreflect.EnumType {
	return &file_spire_api_registration_registration_proto_enumTypes[0]
}

func (x DeleteFederatedBundleRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteFederatedBundleRequest_Mode.Descriptor instead.
func (DeleteFederatedBundleRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{10, 0}
}

// A type that represents the id of an entry.
type RegistrationEntryID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RegistrationEntryID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RegistrationEntryID) Reset() {
	*x = RegistrationEntryID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationEntryID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationEntryID) ProtoMessage() {}

func (x *RegistrationEntryID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationEntryID.ProtoReflect.Descriptor instead.
func (*RegistrationEntryID) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{0}
}

func (x *RegistrationEntryID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A type that represents a parent Id.
type ParentID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ParentId.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ParentID) Reset() {
	*x = ParentID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParentID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParentID) ProtoMessage() {}

func (x *ParentID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParentID.ProtoReflect.Descriptor instead.
func (*ParentID) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{1}
}

func (x *ParentID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A type that represents a SPIFFE Id.
type SpiffeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SpiffeId.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SpiffeID) Reset() {
	*x = SpiffeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpiffeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpiffeID) ProtoMessage() {}

func (x *SpiffeID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpiffeID.ProtoReflect.Descriptor instead.
func (*SpiffeID) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{2}
}

func (x *SpiffeID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A type that represents a CreateEntryIfNotExists response
// If an entry already exists, the existing entry will be returned
// and `existing` will be set to true.
type CreateEntryIfNotExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry       *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Preexisting bool                      `protobuf:"varint,2,opt,name=preexisting,proto3" json:"preexisting,omitempty"`
}

func (x *CreateEntryIfNotExistsResponse) Reset() {
	*x = CreateEntryIfNotExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEntryIfNotExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEntryIfNotExistsResponse) ProtoMessage() {}

func (x *CreateEntryIfNotExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEntryIfNotExistsResponse.ProtoReflect.Descriptor instead.
func (*CreateEntryIfNotExistsResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEntryIfNotExistsResponse) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CreateEntryIfNotExistsResponse) GetPreexisting() bool {
	if x != nil {
		return x.Preexisting
	}
	return false
}

// A type used to update registration entries
type UpdateEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registration entry to update
	Entry *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *UpdateEntryRequest) Reset() {
	*x = UpdateEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntryRequest) ProtoMessage() {}

func (x *UpdateEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateEntryRequest) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

// A type that represents pagination for list responses
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{5}
}

func (x *Pagination) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

//
type ListAllEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListAllEntriesRequest) Reset() {
	*x = ListAllEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllEntriesRequest) ProtoMessage() {}

func (x *ListAllEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListAllEntriesRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{6}
}

func (x *ListAllEntriesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// It is used to list all registration entries with pagination
type ListAllEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries    []*common.RegistrationEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Pagination *Pagination                 `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListAllEntriesResponse) Reset() {
	*x = ListAllEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllEntriesResponse) ProtoMessage() {}

func (x *ListAllEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllEntriesResponse.ProtoReflect.Descriptor instead.
func (*ListAllEntriesResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{7}
}

func (x *ListAllEntriesResponse) GetEntries() []*common.RegistrationEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListAllEntriesResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// A CA bundle for a different Trust Domain than the one used and managed by the Server.
type FederatedBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common bundle format
	Bundle *common.Bundle `protobuf:"bytes,3,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *FederatedBundle) Reset() {
	*x = FederatedBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedBundle) ProtoMessage() {}

func (x *FederatedBundle) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedBundle.ProtoReflect.Descriptor instead.
func (*FederatedBundle) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{8}
}

func (x *FederatedBundle) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

// A type that represents a federated bundle id.
type FederatedBundleID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SPIFFE ID of the federated bundle
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FederatedBundleID) Reset() {
	*x = FederatedBundleID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedBundleID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedBundleID) ProtoMessage() {}

func (x *FederatedBundleID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedBundleID.ProtoReflect.Descriptor instead.
func (*FederatedBundleID) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{9}
}

func (x *FederatedBundleID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFederatedBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode DeleteFederatedBundleRequest_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=spire.api.registration.DeleteFederatedBundleRequest_Mode" json:"mode,omitempty"`
}

func (x *DeleteFederatedBundleRequest) Reset() {
	*x = DeleteFederatedBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFederatedBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFederatedBundleRequest) ProtoMessage() {}

func (x *DeleteFederatedBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFederatedBundleRequest.ProtoReflect.Descriptor instead.
func (*DeleteFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFederatedBundleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteFederatedBundleRequest) GetMode() DeleteFederatedBundleRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return DeleteFederatedBundleRequest_RESTRICT
}

// JoinToken message is used for registering a new token
type JoinToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The join token. If not set, one will be generated
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// TTL in seconds
	Ttl int32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *JoinToken) Reset() {
	*x = JoinToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinToken) ProtoMessage() {}

func (x *JoinToken) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinToken.ProtoReflect.Descriptor instead.
func (*JoinToken) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{11}
}

func (x *JoinToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinToken) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// CA Bundle of the server
type Bundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common bundle format
	Bundle *common.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *Bundle) Reset() {
	*x = Bundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bundle) ProtoMessage() {}

func (x *Bundle) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bundle.ProtoReflect.Descriptor instead.
func (*Bundle) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{12}
}

func (x *Bundle) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

// Represents a ListAgents request
type ListAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{13}
}

// Represents a ListAgents response
type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all attested agents
	Nodes []*common.AttestedNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{14}
}

func (x *ListAgentsResponse) GetNodes() []*common.AttestedNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Represents an evict request
type EvictAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Agent identity of the node to be evicted.
	// For example: "spiffe://example.org/spire/agent/join_token/feea6adc-3254-4052-9a18-5eeb74bf214f"
	SpiffeID string `protobuf:"bytes,1,opt,name=spiffeID,proto3" json:"spiffeID,omitempty"`
}

func (x *EvictAgentRequest) Reset() {
	*x = EvictAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictAgentRequest) ProtoMessage() {}

func (x *EvictAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictAgentRequest.ProtoReflect.Descriptor instead.
func (*EvictAgentRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{15}
}

func (x *EvictAgentRequest) GetSpiffeID() string {
	if x != nil {
		return x.SpiffeID
	}
	return ""
}

// Represents an evict response
type EvictAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node contains the evicted node
	Node *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *EvictAgentResponse) Reset() {
	*x = EvictAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictAgentResponse) ProtoMessage() {}

func (x *EvictAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictAgentResponse.ProtoReflect.Descriptor instead.
func (*EvictAgentResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{16}
}

func (x *EvictAgentResponse) GetNode() *common.AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type MintX509SVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SPIFFE ID of the X509-SVID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// ASN.1 encoded CSR. The CSR is only used to convey the public key and
	// prove possession of the private key. The rest of the CSR is ignored.
	Csr []byte `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	// TTL of the X509-SVID, in seconds. The server default will be used if
	// unset. The TTL is advisory only. The actual lifetime of the X509-SVID
	// may be lower depending on the remaining lifetime of the active SPIRE
	// Server CA.
	Ttl int32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// DNS names to include as DNS SANs in the X509-SVID. If set, the first
	// in the list is also set as the X509-SVID common name.
	DnsNames []string `protobuf:"bytes,4,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
}

func (x *MintX509SVIDRequest) Reset() {
	*x = MintX509SVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintX509SVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintX509SVIDRequest) ProtoMessage() {}

func (x *MintX509SVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintX509SVIDRequest.ProtoReflect.Descriptor instead.
func (*MintX509SVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{17}
}

func (x *MintX509SVIDRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *MintX509SVIDRequest) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

func (x *MintX509SVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *MintX509SVIDRequest) GetDnsNames() []string {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

type MintX509SVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// X509-SVID chain. This includes the X509-SVID itself and any
	// intermediates necessary to chain back to certificates in the root_cas.
	SvidChain [][]byte `protobuf:"bytes,1,rep,name=svid_chain,json=svidChain,proto3" json:"svid_chain,omitempty"`
	// X.509 root certificates
	RootCas [][]byte `protobuf:"bytes,2,rep,name=root_cas,json=rootCas,proto3" json:"root_cas,omitempty"`
}

func (x *MintX509SVIDResponse) Reset() {
	*x = MintX509SVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintX509SVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintX509SVIDResponse) ProtoMessage() {}

func (x *MintX509SVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintX509SVIDResponse.ProtoReflect.Descriptor instead.
func (*MintX509SVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{18}
}

func (x *MintX509SVIDResponse) GetSvidChain() [][]byte {
	if x != nil {
		return x.SvidChain
	}
	return nil
}

func (x *MintX509SVIDResponse) GetRootCas() [][]byte {
	if x != nil {
		return x.RootCas
	}
	return nil
}

type MintJWTSVIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SPIFFE ID of the JWT-SVID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// TTL of the JWT-SVID, in seconds. The server default will be used if
	// unset. The TTL is advisory only. The actual lifetime of the JWT-SVID may
	// be lower depending on the remaining lifetime of the active SPIRE Server
	// CA.
	Ttl int32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// List of audience claims to include in the JWT-SVID. At least one must
	// be set.
	Audience []string `protobuf:"bytes,3,rep,name=audience,proto3" json:"audience,omitempty"`
}

func (x *MintJWTSVIDRequest) Reset() {
	*x = MintJWTSVIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintJWTSVIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintJWTSVIDRequest) ProtoMessage() {}

func (x *MintJWTSVIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintJWTSVIDRequest.ProtoReflect.Descriptor instead.
func (*MintJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{19}
}

func (x *MintJWTSVIDRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *MintJWTSVIDRequest) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *MintJWTSVIDRequest) GetAudience() []string {
	if x != nil {
		return x.Audience
	}
	return nil
}

type MintJWTSVIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JWT-SVID token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MintJWTSVIDResponse) Reset() {
	*x = MintJWTSVIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintJWTSVIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintJWTSVIDResponse) ProtoMessage() {}

func (x *MintJWTSVIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintJWTSVIDResponse.ProtoReflect.Descriptor instead.
func (*MintJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{20}
}

func (x *MintJWTSVIDResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type NodeSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node SPIFFE ID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Node selectors
	Selectors []*common.Selector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *NodeSelectors) Reset() {
	*x = NodeSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSelectors) ProtoMessage() {}

func (x *NodeSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSelectors.ProtoReflect.Descriptor instead.
func (*NodeSelectors) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{21}
}

func (x *NodeSelectors) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *NodeSelectors) GetSelectors() []*common.Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

// Represents a GetNodeSelectors request
type GetNodeSelectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
}

func (x *GetNodeSelectorsRequest) Reset() {
	*x = GetNodeSelectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsRequest) ProtoMessage() {}

func (x *GetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{22}
}

func (x *GetNodeSelectorsRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

// Represents a GetNodeSelectors response
type GetNodeSelectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors *NodeSelectors `protobuf:"bytes,1,opt,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *GetNodeSelectorsResponse) Reset() {
	*x = GetNodeSelectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_api_registration_registration_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsResponse) ProtoMessage() {}

func (x *GetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_registration_registration_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_spire_api_registration_registration_proto_rawDescGZIP(), []int{23}
}

func (x *GetNodeSelectorsResponse) GetSelectors() *NodeSelectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

var File_spire_api_registration_registration_proto protoreflect.FileDescriptor

var file_spire_api_registration_registration_proto_rawDesc = []byte{
	0x0a, 0x29, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25,
	0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x1a, 0x0a, 0x08, 0x53, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x66, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x4b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3f, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a,
	0x0f, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x23,
	0x0a, 0x11, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x36, 0x0a, 0x06, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x2f, 0x0a, 0x11, 0x45, 0x76, 0x69, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44,
	0x22, 0x44, 0x0a, 0x12, 0x45, 0x76, 0x69, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x74, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x14, 0x4d,
	0x69, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x76, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x76, 0x69, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x73, 0x22, 0x5f, 0x0a,
	0x12, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x2b,
	0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x0d, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22,
	0x36, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x32, 0x86, 0x11, 0x0a, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x12, 0x71, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x1a, 0x36, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x44, 0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x13, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x21, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x16, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x17, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x53, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44, 0x12, 0x20, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x44, 0x1a, 0x21, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x78, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x6a, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x49, 0x44, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x56, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x27,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x13, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x57, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x63, 0x0a,
	0x0a, 0x45, 0x76, 0x69, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x76, 0x69, 0x63, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x58,
	0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69,
	0x6e, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56, 0x49,
	0x44, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x4a,
	0x57, 0x54, 0x53, 0x56, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x4a, 0x57, 0x54, 0x53, 0x56,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_spire_api_registration_registration_proto_rawDescOnce sync.Once
	file_spire_api_registration_registration_proto_rawDescData = file_spire_api_registration_registration_proto_rawDesc
)

func file_spire_api_registration_registration_proto_rawDescGZIP() []byte {
	file_spire_api_registration_registration_proto_rawDescOnce.Do(func() {
		file_spire_api_registration_registration_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_api_registration_registration_proto_rawDescData)
	})
	return file_spire_api_registration_registration_proto_rawDescData
}

var file_spire_api_registration_registration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spire_api_registration_registration_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_spire_api_registration_registration_proto_goTypes = []interface{}{
	(DeleteFederatedBundleRequest_Mode)(0), // 0: spire.api.registration.DeleteFederatedBundleRequest.Mode
	(*RegistrationEntryID)(nil),            // 1: spire.api.registration.RegistrationEntryID
	(*ParentID)(nil),                       // 2: spire.api.registration.ParentID
	(*SpiffeID)(nil),                       // 3: spire.api.registration.SpiffeID
	(*CreateEntryIfNotExistsResponse)(nil), // 4: spire.api.registration.CreateEntryIfNotExistsResponse
	(*UpdateEntryRequest)(nil),             // 5: spire.api.registration.UpdateEntryRequest
	(*Pagination)(nil),                     // 6: spire.api.registration.Pagination
	(*ListAllEntriesRequest)(nil),          // 7: spire.api.registration.ListAllEntriesRequest
	(*ListAllEntriesResponse)(nil),         // 8: spire.api.registration.ListAllEntriesResponse
	(*FederatedBundle)(nil),                // 9: spire.api.registration.FederatedBundle
	(*FederatedBundleID)(nil),              // 10: spire.api.registration.FederatedBundleID
	(*DeleteFederatedBundleRequest)(nil),   // 11: spire.api.registration.DeleteFederatedBundleRequest
	(*JoinToken)(nil),                      // 12: spire.api.registration.JoinToken
	(*Bundle)(nil),                         // 13: spire.api.registration.Bundle
	(*ListAgentsRequest)(nil),              // 14: spire.api.registration.ListAgentsRequest
	(*ListAgentsResponse)(nil),             // 15: spire.api.registration.ListAgentsResponse
	(*EvictAgentRequest)(nil),              // 16: spire.api.registration.EvictAgentRequest
	(*EvictAgentResponse)(nil),             // 17: spire.api.registration.EvictAgentResponse
	(*MintX509SVIDRequest)(nil),            // 18: spire.api.registration.MintX509SVIDRequest
	(*MintX509SVIDResponse)(nil),           // 19: spire.api.registration.MintX509SVIDResponse
	(*MintJWTSVIDRequest)(nil),             // 20: spire.api.registration.MintJWTSVIDRequest
	(*MintJWTSVIDResponse)(nil),            // 21: spire.api.registration.MintJWTSVIDResponse
	(*NodeSelectors)(nil),                  // 22: spire.api.registration.NodeSelectors
	(*GetNodeSelectorsRequest)(nil),        // 23: spire.api.registration.GetNodeSelectorsRequest
	(*GetNodeSelectorsResponse)(nil),       // 24: spire.api.registration.GetNodeSelectorsResponse
	(*common.RegistrationEntry)(nil),       // 25: spire.common.RegistrationEntry
	(*common.Bundle)(nil),                  // 26: spire.common.Bundle
	(*common.AttestedNode)(nil),            // 27: spire.common.AttestedNode
	(*common.Selector)(nil),                // 28: spire.common.Selector
	(*common.Empty)(nil),                   // 29: spire.common.Empty
	(*common.Selectors)(nil),               // 30: spire.common.Selectors
	(*common.RegistrationEntries)(nil),     // 31: spire.common.RegistrationEntries
}
var file_spire_api_registration_registration_proto_depIdxs = []int32{
	25, // 0: spire.api.registration.CreateEntryIfNotExistsResponse.entry:type_name -> spire.common.RegistrationEntry
	25, // 1: spire.api.registration.UpdateEntryRequest.entry:type_name -> spire.common.RegistrationEntry
	6,  // 2: spire.api.registration.ListAllEntriesRequest.pagination:type_name -> spire.api.registration.Pagination
	25, // 3: spire.api.registration.ListAllEntriesResponse.entries:type_name -> spire.common.RegistrationEntry
	6,  // 4: spire.api.registration.ListAllEntriesResponse.pagination:type_name -> spire.api.registration.Pagination
	26, // 5: spire.api.registration.FederatedBundle.bundle:type_name -> spire.common.Bundle
	0,  // 6: spire.api.registration.DeleteFederatedBundleRequest.mode:type_name -> spire.api.registration.DeleteFederatedBundleRequest.Mode
	26, // 7: spire.api.registration.Bundle.bundle:type_name -> spire.common.Bundle
	27, // 8: spire.api.registration.ListAgentsResponse.nodes:type_name -> spire.common.AttestedNode
	27, // 9: spire.api.registration.EvictAgentResponse.node:type_name -> spire.common.AttestedNode
	28, // 10: spire.api.registration.NodeSelectors.selectors:type_name -> spire.common.Selector
	22, // 11: spire.api.registration.GetNodeSelectorsResponse.selectors:type_name -> spire.api.registration.NodeSelectors
	25, // 12: spire.api.registration.Registration.CreateEntry:input_type -> spire.common.RegistrationEntry
	25, // 13: spire.api.registration.Registration.CreateEntryIfNotExists:input_type -> spire.common.RegistrationEntry
	1,  // 14: spire.api.registration.Registration.DeleteEntry:input_type -> spire.api.registration.RegistrationEntryID
	1,  // 15: spire.api.registration.Registration.FetchEntry:input_type -> spire.api.registration.RegistrationEntryID
	29, // 16: spire.api.registration.Registration.FetchEntries:input_type -> spire.common.Empty
	5,  // 17: spire.api.registration.Registration.UpdateEntry:input_type -> spire.api.registration.UpdateEntryRequest
	2,  // 18: spire.api.registration.Registration.ListByParentID:input_type -> spire.api.registration.ParentID
	28, // 19: spire.api.registration.Registration.ListBySelector:input_type -> spire.common.Selector
	30, // 20: spire.api.registration.Registration.ListBySelectors:input_type -> spire.common.Selectors
	3,  // 21: spire.api.registration.Registration.ListBySpiffeID:input_type -> spire.api.registration.SpiffeID
	7,  // 22: spire.api.registration.Registration.ListAllEntriesWithPages:input_type -> spire.api.registration.ListAllEntriesRequest
	9,  // 23: spire.api.registration.Registration.CreateFederatedBundle:input_type -> spire.api.registration.FederatedBundle
	10, // 24: spire.api.registration.Registration.FetchFederatedBundle:input_type -> spire.api.registration.FederatedBundleID
	29, // 25: spire.api.registration.Registration.ListFederatedBundles:input_type -> spire.common.Empty
	9,  // 26: spire.api.registration.Registration.UpdateFederatedBundle:input_type -> spire.api.registration.FederatedBundle
	11, // 27: spire.api.registration.Registration.DeleteFederatedBundle:input_type -> spire.api.registration.DeleteFederatedBundleRequest
	12, // 28: spire.api.registration.Registration.CreateJoinToken:input_type -> spire.api.registration.JoinToken
	29, // 29: spire.api.registration.Registration.FetchBundle:input_type -> spire.common.Empty
	16, // 30: spire.api.registration.Registration.EvictAgent:input_type -> spire.api.registration.EvictAgentRequest
	14, // 31: spire.api.registration.Registration.ListAgents:input_type -> spire.api.registration.ListAgentsRequest
	18, // 32: spire.api.registration.Registration.MintX509SVID:input_type -> spire.api.registration.MintX509SVIDRequest
	20, // 33: spire.api.registration.Registration.MintJWTSVID:input_type -> spire.api.registration.MintJWTSVIDRequest
	23, // 34: spire.api.registration.Registration.GetNodeSelectors:input_type -> spire.api.registration.GetNodeSelectorsRequest
	1,  // 35: spire.api.registration.Registration.CreateEntry:output_type -> spire.api.registration.RegistrationEntryID
	4,  // 36: spire.api.registration.Registration.CreateEntryIfNotExists:output_type -> spire.api.registration.CreateEntryIfNotExistsResponse
	25, // 37: spire.api.registration.Registration.DeleteEntry:output_type -> spire.common.RegistrationEntry
	25, // 38: spire.api.registration.Registration.FetchEntry:output_type -> spire.common.RegistrationEntry
	31, // 39: spire.api.registration.Registration.FetchEntries:output_type -> spire.common.RegistrationEntries
	25, // 40: spire.api.registration.Registration.UpdateEntry:output_type -> spire.common.RegistrationEntry
	31, // 41: spire.api.registration.Registration.ListByParentID:output_type -> spire.common.RegistrationEntries
	31, // 42: spire.api.registration.Registration.ListBySelector:output_type -> spire.common.RegistrationEntries
	31, // 43: spire.api.registration.Registration.ListBySelectors:output_type -> spire.common.RegistrationEntries
	31, // 44: spire.api.registration.Registration.ListBySpiffeID:output_type -> spire.common.RegistrationEntries
	8,  // 45: spire.api.registration.Registration.ListAllEntriesWithPages:output_type -> spire.api.registration.ListAllEntriesResponse
	29, // 46: spire.api.registration.Registration.CreateFederatedBundle:output_type -> spire.common.Empty
	9,  // 47: spire.api.registration.Registration.FetchFederatedBundle:output_type -> spire.api.registration.FederatedBundle
	9,  // 48: spire.api.registration.Registration.ListFederatedBundles:output_type -> spire.api.registration.FederatedBundle
	29, // 49: spire.api.registration.Registration.UpdateFederatedBundle:output_type -> spire.common.Empty
	29, // 50: spire.api.registration.Registration.DeleteFederatedBundle:output_type -> spire.common.Empty
	12, // 51: spire.api.registration.Registration.CreateJoinToken:output_type -> spire.api.registration.JoinToken
	13, // 52: spire.api.registration.Registration.FetchBundle:output_type -> spire.api.registration.Bundle
	17, // 53: spire.api.registration.Registration.EvictAgent:output_type -> spire.api.registration.EvictAgentResponse
	15, // 54: spire.api.registration.Registration.ListAgents:output_type -> spire.api.registration.ListAgentsResponse
	19, // 55: spire.api.registration.Registration.MintX509SVID:output_type -> spire.api.registration.MintX509SVIDResponse
	21, // 56: spire.api.registration.Registration.MintJWTSVID:output_type -> spire.api.registration.MintJWTSVIDResponse
	24, // 57: spire.api.registration.Registration.GetNodeSelectors:output_type -> spire.api.registration.GetNodeSelectorsResponse
	35, // [35:58] is the sub-list for method output_type
	12, // [12:35] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_spire_api_registration_registration_proto_init() }
func file_spire_api_registration_registration_proto_init() {
	if File_spire_api_registration_registration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_api_registration_registration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationEntryID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParentID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpiffeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEntryIfNotExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedBundleID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFederatedBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintX509SVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintX509SVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintJWTSVIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintJWTSVIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSelectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_api_registration_registration_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSelectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_api_registration_registration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_api_registration_registration_proto_goTypes,
		DependencyIndexes: file_spire_api_registration_registration_proto_depIdxs,
		EnumInfos:         file_spire_api_registration_registration_proto_enumTypes,
		MessageInfos:      file_spire_api_registration_registration_proto_msgTypes,
	}.Build()
	File_spire_api_registration_registration_proto = out.File
	file_spire_api_registration_registration_proto_rawDesc = nil
	file_spire_api_registration_registration_proto_goTypes = nil
	file_spire_api_registration_registration_proto_depIdxs = nil
}
