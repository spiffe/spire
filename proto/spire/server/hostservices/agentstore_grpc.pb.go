// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hostservices

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AgentStoreClient is the client API for AgentStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentStoreClient interface {
	GetAgentInfo(ctx context.Context, in *GetAgentInfoRequest, opts ...grpc.CallOption) (*GetAgentInfoResponse, error)
}

type agentStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentStoreClient(cc grpc.ClientConnInterface) AgentStoreClient {
	return &agentStoreClient{cc}
}

func (c *agentStoreClient) GetAgentInfo(ctx context.Context, in *GetAgentInfoRequest, opts ...grpc.CallOption) (*GetAgentInfoResponse, error) {
	out := new(GetAgentInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.hostservices.AgentStore/GetAgentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentStoreServer is the server API for AgentStore service.
// All implementations must embed UnimplementedAgentStoreServer
// for forward compatibility
type AgentStoreServer interface {
	GetAgentInfo(context.Context, *GetAgentInfoRequest) (*GetAgentInfoResponse, error)
	mustEmbedUnimplementedAgentStoreServer()
}

// UnimplementedAgentStoreServer must be embedded to have forward compatible implementations.
type UnimplementedAgentStoreServer struct {
}

func (UnimplementedAgentStoreServer) GetAgentInfo(context.Context, *GetAgentInfoRequest) (*GetAgentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInfo not implemented")
}
func (UnimplementedAgentStoreServer) mustEmbedUnimplementedAgentStoreServer() {}

// UnsafeAgentStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentStoreServer will
// result in compilation errors.
type UnsafeAgentStoreServer interface {
	mustEmbedUnimplementedAgentStoreServer()
}

func RegisterAgentStoreServer(s grpc.ServiceRegistrar, srv AgentStoreServer) {
	s.RegisterService(&_AgentStore_serviceDesc, srv)
}

func _AgentStore_GetAgentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentStoreServer).GetAgentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.hostservices.AgentStore/GetAgentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentStoreServer).GetAgentInfo(ctx, req.(*GetAgentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.hostservices.AgentStore",
	HandlerType: (*AgentStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentInfo",
			Handler:    _AgentStore_GetAgentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/server/hostservices/agentstore.proto",
}
