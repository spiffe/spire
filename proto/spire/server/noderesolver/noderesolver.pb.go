// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spire/server/noderesolver/noderesolver.proto

package noderesolver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//* Represents a request with a list of BaseSPIFFEIDs.
type ResolveRequest struct {
	//* A list of BaseSPIFFE Ids.
	BaseSpiffeIdList     []string `protobuf:"bytes,1,rep,name=baseSpiffeIdList,proto3" json:"baseSpiffeIdList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveRequest) Reset()         { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()    {}
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c3852f338623715, []int{0}
}

func (m *ResolveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveRequest.Unmarshal(m, b)
}
func (m *ResolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveRequest.Marshal(b, m, deterministic)
}
func (m *ResolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveRequest.Merge(m, src)
}
func (m *ResolveRequest) XXX_Size() int {
	return xxx_messageInfo_ResolveRequest.Size(m)
}
func (m *ResolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveRequest proto.InternalMessageInfo

func (m *ResolveRequest) GetBaseSpiffeIdList() []string {
	if m != nil {
		return m.BaseSpiffeIdList
	}
	return nil
}

//* Represents a response with a map of SPIFFE ID to a list of Selectors.
type ResolveResponse struct {
	//* Map[SPIFFE_ID] => Selectors.
	Map                  map[string]*common.Selectors `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ResolveResponse) Reset()         { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string { return proto.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()    {}
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c3852f338623715, []int{1}
}

func (m *ResolveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveResponse.Unmarshal(m, b)
}
func (m *ResolveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveResponse.Marshal(b, m, deterministic)
}
func (m *ResolveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveResponse.Merge(m, src)
}
func (m *ResolveResponse) XXX_Size() int {
	return xxx_messageInfo_ResolveResponse.Size(m)
}
func (m *ResolveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveResponse proto.InternalMessageInfo

func (m *ResolveResponse) GetMap() map[string]*common.Selectors {
	if m != nil {
		return m.Map
	}
	return nil
}

func init() {
	proto.RegisterType((*ResolveRequest)(nil), "spire.server.noderesolver.ResolveRequest")
	proto.RegisterType((*ResolveResponse)(nil), "spire.server.noderesolver.ResolveResponse")
	proto.RegisterMapType((map[string]*common.Selectors)(nil), "spire.server.noderesolver.ResolveResponse.MapEntry")
}

func init() {
	proto.RegisterFile("spire/server/noderesolver/noderesolver.proto", fileDescriptor_7c3852f338623715)
}

var fileDescriptor_7c3852f338623715 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4b, 0x4f, 0xc2, 0x40,
	0x10, 0xc7, 0x53, 0x88, 0x0f, 0x06, 0x1f, 0x64, 0x2f, 0x42, 0x4f, 0x0d, 0x89, 0x06, 0x89, 0xb6,
	0x09, 0x1c, 0x7c, 0xc4, 0x93, 0x86, 0x18, 0x12, 0x5f, 0x29, 0x37, 0x4e, 0x16, 0x98, 0x62, 0x63,
	0xd9, 0x5d, 0x77, 0xb7, 0x24, 0x7c, 0x24, 0xef, 0x7e, 0x40, 0xc3, 0xee, 0x42, 0x2c, 0x06, 0xe5,
	0xb4, 0xdb, 0x9d, 0xdf, 0x7f, 0x66, 0xfe, 0x9d, 0x81, 0x33, 0xc9, 0x13, 0x81, 0x81, 0x44, 0x31,
	0x45, 0x11, 0x50, 0x36, 0x42, 0x81, 0x92, 0xa5, 0xab, 0x1f, 0x3e, 0x17, 0x4c, 0x31, 0x52, 0xd3,
	0xb4, 0x6f, 0x68, 0xff, 0x27, 0xe0, 0x7a, 0x26, 0xd1, 0x90, 0x4d, 0x26, 0x8c, 0x06, 0x3c, 0xcd,
	0xc6, 0xc9, 0xe2, 0x30, 0x62, 0xb7, 0x96, 0x23, 0xcc, 0x61, 0x42, 0xf5, 0x1b, 0x38, 0x08, 0x4d,
	0xa2, 0x10, 0x3f, 0x32, 0x94, 0x8a, 0x34, 0xa1, 0x32, 0x88, 0x24, 0xf6, 0x78, 0x12, 0xc7, 0xd8,
	0x1d, 0x3d, 0x24, 0x52, 0x55, 0x1d, 0xaf, 0xd8, 0x28, 0x85, 0xbf, 0xde, 0xeb, 0x9f, 0x0e, 0x1c,
	0x2e, 0xe5, 0x92, 0x33, 0x2a, 0x91, 0x74, 0xa0, 0x38, 0x89, 0xb8, 0x96, 0x94, 0x5b, 0x6d, 0x7f,
	0x6d, 0xdf, 0xfe, 0x8a, 0xd0, 0x7f, 0x8c, 0x78, 0x87, 0x2a, 0x31, 0x0b, 0xe7, 0x7a, 0xf7, 0x19,
	0x76, 0x17, 0x0f, 0xa4, 0x02, 0xc5, 0x77, 0x9c, 0x55, 0x1d, 0xcf, 0x69, 0x94, 0xc2, 0xf9, 0x95,
	0x9c, 0xc3, 0xd6, 0x34, 0x4a, 0x33, 0xac, 0x16, 0x3c, 0xa7, 0x51, 0x6e, 0x1d, 0xd9, 0x32, 0xd6,
	0x5a, 0x0f, 0x53, 0x1c, 0x2a, 0x26, 0x64, 0x68, 0xa8, 0xeb, 0xc2, 0xa5, 0xd3, 0xfa, 0x2a, 0xc0,
	0xde, 0x13, 0x1b, 0xa1, 0x2d, 0x2b, 0xc8, 0x2b, 0xec, 0xd8, 0x3b, 0x39, 0xdd, 0xa4, 0x4d, 0xfd,
	0x7b, 0xdc, 0xe6, 0xe6, 0x8e, 0x48, 0x1f, 0x4a, 0x77, 0x8c, 0xc6, 0xc9, 0x38, 0x13, 0x48, 0x8e,
	0xf3, 0x3d, 0xda, 0x01, 0x2d, 0xe3, 0x8b, 0xfc, 0x27, 0xff, 0x61, 0x36, 0x77, 0x0c, 0xfb, 0xf7,
	0xa8, 0x5e, 0x74, 0xb8, 0x4b, 0x63, 0xb6, 0xf4, 0x90, 0x17, 0xe6, 0x98, 0x55, 0x0f, 0x7f, 0xa2,
	0xa6, 0xce, 0xed, 0x55, 0xff, 0x62, 0x9c, 0xa8, 0xb7, 0x6c, 0x30, 0xa7, 0x03, 0xa9, 0xa7, 0x1f,
	0x98, 0x7d, 0xd2, 0x1b, 0x14, 0xac, 0x5d, 0xe3, 0xc1, 0xb6, 0x06, 0xda, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x89, 0xaf, 0x41, 0x58, 0xea, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeResolverClient is the client API for NodeResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeResolverClient interface {
	//* Retrieves a list of properties reflecting the current state of a particular node(s).
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	//* Responsible for configuration of the plugin.
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	//* Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type nodeResolverClient struct {
	cc *grpc.ClientConn
}

func NewNodeResolverClient(cc *grpc.ClientConn) NodeResolverClient {
	return &nodeResolverClient{cc}
}

func (c *nodeResolverClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/spire.server.noderesolver.NodeResolver/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeResolverClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.server.noderesolver.NodeResolver/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeResolverClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.noderesolver.NodeResolver/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeResolverServer is the server API for NodeResolver service.
type NodeResolverServer interface {
	//* Retrieves a list of properties reflecting the current state of a particular node(s).
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	//* Responsible for configuration of the plugin.
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	//* Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
}

// UnimplementedNodeResolverServer can be embedded to have forward compatible implementations.
type UnimplementedNodeResolverServer struct {
}

func (*UnimplementedNodeResolverServer) Resolve(ctx context.Context, req *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (*UnimplementedNodeResolverServer) Configure(ctx context.Context, req *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedNodeResolverServer) GetPluginInfo(ctx context.Context, req *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}

func RegisterNodeResolverServer(s *grpc.Server, srv NodeResolverServer) {
	s.RegisterService(&_NodeResolver_serviceDesc, srv)
}

func _NodeResolver_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeResolverServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.noderesolver.NodeResolver/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeResolverServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeResolver_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeResolverServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.noderesolver.NodeResolver/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeResolverServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeResolver_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeResolverServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.noderesolver.NodeResolver/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeResolverServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.noderesolver.NodeResolver",
	HandlerType: (*NodeResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _NodeResolver_Resolve_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _NodeResolver_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _NodeResolver_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/server/noderesolver/noderesolver.proto",
}
