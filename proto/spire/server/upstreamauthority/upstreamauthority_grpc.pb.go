// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upstreamauthority

import (
	context "context"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UpstreamAuthorityClient is the client API for UpstreamAuthority service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpstreamAuthorityClient interface {
	// Mints an X.509 CA and responds with the signed X.509 CA certificate
	// chain and upstream X.509 roots. If supported by the implementation,
	// subsequent responses on the stream contain upstream X.509 root updates,
	// otherwise the RPC is completed after sending the initial response.
	//
	// Implementation note:
	// The stream should be kept open in the face of transient errors
	// encountered while tracking changes to the upstream X.509 roots as SPIRE
	// core will not reopen a closed stream until the next X.509 CA rotation.
	MintX509CA(ctx context.Context, in *MintX509CARequest, opts ...grpc.CallOption) (UpstreamAuthority_MintX509CAClient, error)
	// Publishes a JWT signing key upstream and responds with the upstream JWT
	// keys. If supported by the implementation, subsequent responses on the
	// stream contain upstream JWT key updates, otherwise the RPC is completed
	// after sending the initial response.
	//
	// This RPC is optional and will return NotImplemented if unsupported.
	//
	// Implementation note:
	// The stream should be kept open in the face of transient errors
	// encountered while tracking changes to the upstream JWT keys as SPIRE
	// core will not reopen a closed stream until the next JWT key rotation.
	PublishJWTKey(ctx context.Context, in *PublishJWTKeyRequest, opts ...grpc.CallOption) (UpstreamAuthority_PublishJWTKeyClient, error)
	// Standard SPIRE plugin RPCs
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type upstreamAuthorityClient struct {
	cc grpc.ClientConnInterface
}

func NewUpstreamAuthorityClient(cc grpc.ClientConnInterface) UpstreamAuthorityClient {
	return &upstreamAuthorityClient{cc}
}

func (c *upstreamAuthorityClient) MintX509CA(ctx context.Context, in *MintX509CARequest, opts ...grpc.CallOption) (UpstreamAuthority_MintX509CAClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpstreamAuthority_serviceDesc.Streams[0], "/spire.server.upstreamauthority.UpstreamAuthority/MintX509CA", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamAuthorityMintX509CAClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpstreamAuthority_MintX509CAClient interface {
	Recv() (*MintX509CAResponse, error)
	grpc.ClientStream
}

type upstreamAuthorityMintX509CAClient struct {
	grpc.ClientStream
}

func (x *upstreamAuthorityMintX509CAClient) Recv() (*MintX509CAResponse, error) {
	m := new(MintX509CAResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamAuthorityClient) PublishJWTKey(ctx context.Context, in *PublishJWTKeyRequest, opts ...grpc.CallOption) (UpstreamAuthority_PublishJWTKeyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UpstreamAuthority_serviceDesc.Streams[1], "/spire.server.upstreamauthority.UpstreamAuthority/PublishJWTKey", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamAuthorityPublishJWTKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpstreamAuthority_PublishJWTKeyClient interface {
	Recv() (*PublishJWTKeyResponse, error)
	grpc.ClientStream
}

type upstreamAuthorityPublishJWTKeyClient struct {
	grpc.ClientStream
}

func (x *upstreamAuthorityPublishJWTKeyClient) Recv() (*PublishJWTKeyResponse, error) {
	m := new(PublishJWTKeyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamAuthorityClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.server.upstreamauthority.UpstreamAuthority/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamAuthorityClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.upstreamauthority.UpstreamAuthority/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamAuthorityServer is the server API for UpstreamAuthority service.
// All implementations must embed UnimplementedUpstreamAuthorityServer
// for forward compatibility
type UpstreamAuthorityServer interface {
	// Mints an X.509 CA and responds with the signed X.509 CA certificate
	// chain and upstream X.509 roots. If supported by the implementation,
	// subsequent responses on the stream contain upstream X.509 root updates,
	// otherwise the RPC is completed after sending the initial response.
	//
	// Implementation note:
	// The stream should be kept open in the face of transient errors
	// encountered while tracking changes to the upstream X.509 roots as SPIRE
	// core will not reopen a closed stream until the next X.509 CA rotation.
	MintX509CA(*MintX509CARequest, UpstreamAuthority_MintX509CAServer) error
	// Publishes a JWT signing key upstream and responds with the upstream JWT
	// keys. If supported by the implementation, subsequent responses on the
	// stream contain upstream JWT key updates, otherwise the RPC is completed
	// after sending the initial response.
	//
	// This RPC is optional and will return NotImplemented if unsupported.
	//
	// Implementation note:
	// The stream should be kept open in the face of transient errors
	// encountered while tracking changes to the upstream JWT keys as SPIRE
	// core will not reopen a closed stream until the next JWT key rotation.
	PublishJWTKey(*PublishJWTKeyRequest, UpstreamAuthority_PublishJWTKeyServer) error
	// Standard SPIRE plugin RPCs
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
	mustEmbedUnimplementedUpstreamAuthorityServer()
}

// UnimplementedUpstreamAuthorityServer must be embedded to have forward compatible implementations.
type UnimplementedUpstreamAuthorityServer struct {
}

func (UnimplementedUpstreamAuthorityServer) MintX509CA(*MintX509CARequest, UpstreamAuthority_MintX509CAServer) error {
	return status.Errorf(codes.Unimplemented, "method MintX509CA not implemented")
}
func (UnimplementedUpstreamAuthorityServer) PublishJWTKey(*PublishJWTKeyRequest, UpstreamAuthority_PublishJWTKeyServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishJWTKey not implemented")
}
func (UnimplementedUpstreamAuthorityServer) Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedUpstreamAuthorityServer) GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}
func (UnimplementedUpstreamAuthorityServer) mustEmbedUnimplementedUpstreamAuthorityServer() {}

// UnsafeUpstreamAuthorityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpstreamAuthorityServer will
// result in compilation errors.
type UnsafeUpstreamAuthorityServer interface {
	mustEmbedUnimplementedUpstreamAuthorityServer()
}

func RegisterUpstreamAuthorityServer(s grpc.ServiceRegistrar, srv UpstreamAuthorityServer) {
	s.RegisterService(&_UpstreamAuthority_serviceDesc, srv)
}

func _UpstreamAuthority_MintX509CA_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MintX509CARequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpstreamAuthorityServer).MintX509CA(m, &upstreamAuthorityMintX509CAServer{stream})
}

type UpstreamAuthority_MintX509CAServer interface {
	Send(*MintX509CAResponse) error
	grpc.ServerStream
}

type upstreamAuthorityMintX509CAServer struct {
	grpc.ServerStream
}

func (x *upstreamAuthorityMintX509CAServer) Send(m *MintX509CAResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpstreamAuthority_PublishJWTKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublishJWTKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpstreamAuthorityServer).PublishJWTKey(m, &upstreamAuthorityPublishJWTKeyServer{stream})
}

type UpstreamAuthority_PublishJWTKeyServer interface {
	Send(*PublishJWTKeyResponse) error
	grpc.ServerStream
}

type upstreamAuthorityPublishJWTKeyServer struct {
	grpc.ServerStream
}

func (x *upstreamAuthorityPublishJWTKeyServer) Send(m *PublishJWTKeyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UpstreamAuthority_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamAuthorityServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamauthority.UpstreamAuthority/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamAuthorityServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamAuthority_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamAuthorityServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.upstreamauthority.UpstreamAuthority/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamAuthorityServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpstreamAuthority_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.upstreamauthority.UpstreamAuthority",
	HandlerType: (*UpstreamAuthorityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _UpstreamAuthority_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _UpstreamAuthority_GetPluginInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MintX509CA",
			Handler:       _UpstreamAuthority_MintX509CA_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishJWTKey",
			Handler:       _UpstreamAuthority_PublishJWTKey_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spire/server/upstreamauthority/upstreamauthority.proto",
}
