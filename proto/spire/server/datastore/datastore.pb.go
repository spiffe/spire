// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: spire/server/datastore/datastore.proto

package datastore

import (
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Mode controls the delete behavior if there are other records
// associated with the bundle (e.g. registration entries).
type DeleteBundleRequest_Mode int32

const (
	// RESTRICT prevents the bundle from being deleted in the presence of associated entries
	DeleteBundleRequest_RESTRICT DeleteBundleRequest_Mode = 0
	// DELETE deletes the bundle and associated entries
	DeleteBundleRequest_DELETE DeleteBundleRequest_Mode = 1
	// DISSOCIATE deletes the bundle and dissociates associated entries
	DeleteBundleRequest_DISSOCIATE DeleteBundleRequest_Mode = 2
)

// Enum value maps for DeleteBundleRequest_Mode.
var (
	DeleteBundleRequest_Mode_name = map[int32]string{
		0: "RESTRICT",
		1: "DELETE",
		2: "DISSOCIATE",
	}
	DeleteBundleRequest_Mode_value = map[string]int32{
		"RESTRICT":   0,
		"DELETE":     1,
		"DISSOCIATE": 2,
	}
)

func (x DeleteBundleRequest_Mode) Enum() *DeleteBundleRequest_Mode {
	p := new(DeleteBundleRequest_Mode)
	*p = x
	return p
}

func (x DeleteBundleRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteBundleRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_spire_server_datastore_datastore_proto_enumTypes[0].Descriptor()
}

func (DeleteBundleRequest_Mode) Type() protoreflect.EnumType {
	return &file_spire_server_datastore_datastore_proto_enumTypes[0]
}

func (x DeleteBundleRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteBundleRequest_Mode.Descriptor instead.
func (DeleteBundleRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{14, 0}
}

type BySelectors_MatchBehavior int32

const (
	BySelectors_MATCH_EXACT  BySelectors_MatchBehavior = 0
	BySelectors_MATCH_SUBSET BySelectors_MatchBehavior = 1
)

// Enum value maps for BySelectors_MatchBehavior.
var (
	BySelectors_MatchBehavior_name = map[int32]string{
		0: "MATCH_EXACT",
		1: "MATCH_SUBSET",
	}
	BySelectors_MatchBehavior_value = map[string]int32{
		"MATCH_EXACT":  0,
		"MATCH_SUBSET": 1,
	}
)

func (x BySelectors_MatchBehavior) Enum() *BySelectors_MatchBehavior {
	p := new(BySelectors_MatchBehavior)
	*p = x
	return p
}

func (x BySelectors_MatchBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BySelectors_MatchBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_spire_server_datastore_datastore_proto_enumTypes[1].Descriptor()
}

func (BySelectors_MatchBehavior) Type() protoreflect.EnumType {
	return &file_spire_server_datastore_datastore_proto_enumTypes[1]
}

func (x BySelectors_MatchBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BySelectors_MatchBehavior.Descriptor instead.
func (BySelectors_MatchBehavior) EnumDescriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{41, 0}
}

type ByFederatesWith_MatchBehavior int32

const (
	ByFederatesWith_MATCH_EXACT  ByFederatesWith_MatchBehavior = 0
	ByFederatesWith_MATCH_SUBSET ByFederatesWith_MatchBehavior = 1
)

// Enum value maps for ByFederatesWith_MatchBehavior.
var (
	ByFederatesWith_MatchBehavior_name = map[int32]string{
		0: "MATCH_EXACT",
		1: "MATCH_SUBSET",
	}
	ByFederatesWith_MatchBehavior_value = map[string]int32{
		"MATCH_EXACT":  0,
		"MATCH_SUBSET": 1,
	}
)

func (x ByFederatesWith_MatchBehavior) Enum() *ByFederatesWith_MatchBehavior {
	p := new(ByFederatesWith_MatchBehavior)
	*p = x
	return p
}

func (x ByFederatesWith_MatchBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ByFederatesWith_MatchBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_spire_server_datastore_datastore_proto_enumTypes[2].Descriptor()
}

func (ByFederatesWith_MatchBehavior) Type() protoreflect.EnumType {
	return &file_spire_server_datastore_datastore_proto_enumTypes[2]
}

func (x ByFederatesWith_MatchBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ByFederatesWith_MatchBehavior.Descriptor instead.
func (ByFederatesWith_MatchBehavior) EnumDescriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{42, 0}
}

type CreateBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *CreateBundleRequest) Reset() {
	*x = CreateBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBundleRequest) ProtoMessage() {}

func (x *CreateBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBundleRequest.ProtoReflect.Descriptor instead.
func (*CreateBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBundleRequest) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type CreateBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *CreateBundleResponse) Reset() {
	*x = CreateBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBundleResponse) ProtoMessage() {}

func (x *CreateBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBundleResponse.ProtoReflect.Descriptor instead.
func (*CreateBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type FetchBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
}

func (x *FetchBundleRequest) Reset() {
	*x = FetchBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBundleRequest) ProtoMessage() {}

func (x *FetchBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBundleRequest.ProtoReflect.Descriptor instead.
func (*FetchBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{2}
}

func (x *FetchBundleRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

type FetchBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *FetchBundleResponse) Reset() {
	*x = FetchBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBundleResponse) ProtoMessage() {}

func (x *FetchBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBundleResponse.ProtoReflect.Descriptor instead.
func (*FetchBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{3}
}

func (x *FetchBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type CountBundlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountBundlesRequest) Reset() {
	*x = CountBundlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBundlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBundlesRequest) ProtoMessage() {}

func (x *CountBundlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBundlesRequest.ProtoReflect.Descriptor instead.
func (*CountBundlesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{4}
}

type CountBundlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundles int32 `protobuf:"varint,1,opt,name=bundles,proto3" json:"bundles,omitempty"`
}

func (x *CountBundlesResponse) Reset() {
	*x = CountBundlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBundlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBundlesResponse) ProtoMessage() {}

func (x *CountBundlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBundlesResponse.ProtoReflect.Descriptor instead.
func (*CountBundlesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{5}
}

func (x *CountBundlesResponse) GetBundles() int32 {
	if x != nil {
		return x.Bundles
	}
	return 0
}

type ListBundlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListBundlesRequest) Reset() {
	*x = ListBundlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBundlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBundlesRequest) ProtoMessage() {}

func (x *ListBundlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBundlesRequest.ProtoReflect.Descriptor instead.
func (*ListBundlesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{6}
}

func (x *ListBundlesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListBundlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundles    []*common.Bundle `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListBundlesResponse) Reset() {
	*x = ListBundlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBundlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBundlesResponse) ProtoMessage() {}

func (x *ListBundlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBundlesResponse.ProtoReflect.Descriptor instead.
func (*ListBundlesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{7}
}

func (x *ListBundlesResponse) GetBundles() []*common.Bundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *ListBundlesResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle    *common.Bundle     `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
	InputMask *common.BundleMask `protobuf:"bytes,2,opt,name=input_mask,json=inputMask,proto3" json:"input_mask,omitempty"`
}

func (x *UpdateBundleRequest) Reset() {
	*x = UpdateBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBundleRequest) ProtoMessage() {}

func (x *UpdateBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBundleRequest.ProtoReflect.Descriptor instead.
func (*UpdateBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateBundleRequest) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *UpdateBundleRequest) GetInputMask() *common.BundleMask {
	if x != nil {
		return x.InputMask
	}
	return nil
}

type UpdateBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *UpdateBundleResponse) Reset() {
	*x = UpdateBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBundleResponse) ProtoMessage() {}

func (x *UpdateBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBundleResponse.ProtoReflect.Descriptor instead.
func (*UpdateBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type SetBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *SetBundleRequest) Reset() {
	*x = SetBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBundleRequest) ProtoMessage() {}

func (x *SetBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBundleRequest.ProtoReflect.Descriptor instead.
func (*SetBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{10}
}

func (x *SetBundleRequest) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type SetBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *SetBundleResponse) Reset() {
	*x = SetBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBundleResponse) ProtoMessage() {}

func (x *SetBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBundleResponse.ProtoReflect.Descriptor instead.
func (*SetBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{11}
}

func (x *SetBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type AppendBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *AppendBundleRequest) Reset() {
	*x = AppendBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendBundleRequest) ProtoMessage() {}

func (x *AppendBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendBundleRequest.ProtoReflect.Descriptor instead.
func (*AppendBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{12}
}

func (x *AppendBundleRequest) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type AppendBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *AppendBundleResponse) Reset() {
	*x = AppendBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendBundleResponse) ProtoMessage() {}

func (x *AppendBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendBundleResponse.ProtoReflect.Descriptor instead.
func (*AppendBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{13}
}

func (x *AppendBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type DeleteBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomainId string                   `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	Mode          DeleteBundleRequest_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=spire.server.datastore.DeleteBundleRequest_Mode" json:"mode,omitempty"`
}

func (x *DeleteBundleRequest) Reset() {
	*x = DeleteBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBundleRequest) ProtoMessage() {}

func (x *DeleteBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBundleRequest.ProtoReflect.Descriptor instead.
func (*DeleteBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteBundleRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *DeleteBundleRequest) GetMode() DeleteBundleRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return DeleteBundleRequest_RESTRICT
}

type DeleteBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle *common.Bundle `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle,omitempty"`
}

func (x *DeleteBundleResponse) Reset() {
	*x = DeleteBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBundleResponse) ProtoMessage() {}

func (x *DeleteBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBundleResponse.ProtoReflect.Descriptor instead.
func (*DeleteBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteBundleResponse) GetBundle() *common.Bundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type PruneBundleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trust domain of the bundle to prune
	TrustDomainId string `protobuf:"bytes,1,opt,name=trust_domain_id,json=trustDomainId,proto3" json:"trust_domain_id,omitempty"`
	// Expiration time
	ExpiresBefore int64 `protobuf:"varint,2,opt,name=expires_before,json=expiresBefore,proto3" json:"expires_before,omitempty"`
}

func (x *PruneBundleRequest) Reset() {
	*x = PruneBundleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneBundleRequest) ProtoMessage() {}

func (x *PruneBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneBundleRequest.ProtoReflect.Descriptor instead.
func (*PruneBundleRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{16}
}

func (x *PruneBundleRequest) GetTrustDomainId() string {
	if x != nil {
		return x.TrustDomainId
	}
	return ""
}

func (x *PruneBundleRequest) GetExpiresBefore() int64 {
	if x != nil {
		return x.ExpiresBefore
	}
	return 0
}

type PruneBundleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BundleChanged bool `protobuf:"varint,1,opt,name=bundle_changed,json=bundleChanged,proto3" json:"bundle_changed,omitempty"`
}

func (x *PruneBundleResponse) Reset() {
	*x = PruneBundleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneBundleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneBundleResponse) ProtoMessage() {}

func (x *PruneBundleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneBundleResponse.ProtoReflect.Descriptor instead.
func (*PruneBundleResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{17}
}

func (x *PruneBundleResponse) GetBundleChanged() bool {
	if x != nil {
		return x.BundleChanged
	}
	return false
}

type NodeSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node SPIFFE ID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Node selectors
	Selectors []*common.Selector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *NodeSelectors) Reset() {
	*x = NodeSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSelectors) ProtoMessage() {}

func (x *NodeSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSelectors.ProtoReflect.Descriptor instead.
func (*NodeSelectors) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{18}
}

func (x *NodeSelectors) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *NodeSelectors) GetSelectors() []*common.Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type SetNodeSelectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors *NodeSelectors `protobuf:"bytes,1,opt,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *SetNodeSelectorsRequest) Reset() {
	*x = SetNodeSelectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeSelectorsRequest) ProtoMessage() {}

func (x *SetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*SetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{19}
}

func (x *SetNodeSelectorsRequest) GetSelectors() *NodeSelectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type SetNodeSelectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNodeSelectorsResponse) Reset() {
	*x = SetNodeSelectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeSelectorsResponse) ProtoMessage() {}

func (x *SetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*SetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{20}
}

type GetNodeSelectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// When enabled, read-only connection will be used to connect to database read instances. Some staleness of data will be observed.
	TolerateStale bool `protobuf:"varint,2,opt,name=tolerate_stale,json=tolerateStale,proto3" json:"tolerate_stale,omitempty"`
}

func (x *GetNodeSelectorsRequest) Reset() {
	*x = GetNodeSelectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsRequest) ProtoMessage() {}

func (x *GetNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{21}
}

func (x *GetNodeSelectorsRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *GetNodeSelectorsRequest) GetTolerateStale() bool {
	if x != nil {
		return x.TolerateStale
	}
	return false
}

type GetNodeSelectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors *NodeSelectors `protobuf:"bytes,1,opt,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *GetNodeSelectorsResponse) Reset() {
	*x = GetNodeSelectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeSelectorsResponse) ProtoMessage() {}

func (x *GetNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*GetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{22}
}

func (x *GetNodeSelectorsResponse) GetSelectors() *NodeSelectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type ListNodeSelectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When enabled, read-only connection will be used to connect to database read instances. Some staleness of data will be observed.
	TolerateStale bool                   `protobuf:"varint,1,opt,name=tolerate_stale,json=tolerateStale,proto3" json:"tolerate_stale,omitempty"`
	ValidAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=valid_at,json=validAt,proto3" json:"valid_at,omitempty"`
}

func (x *ListNodeSelectorsRequest) Reset() {
	*x = ListNodeSelectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeSelectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeSelectorsRequest) ProtoMessage() {}

func (x *ListNodeSelectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeSelectorsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{23}
}

func (x *ListNodeSelectorsRequest) GetTolerateStale() bool {
	if x != nil {
		return x.TolerateStale
	}
	return false
}

func (x *ListNodeSelectorsRequest) GetValidAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidAt
	}
	return nil
}

type ListNodeSelectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors []*NodeSelectors `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
}

func (x *ListNodeSelectorsResponse) Reset() {
	*x = ListNodeSelectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeSelectorsResponse) ProtoMessage() {}

func (x *ListNodeSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeSelectorsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{24}
}

func (x *ListNodeSelectorsResponse) GetSelectors() []*NodeSelectors {
	if x != nil {
		return x.Selectors
	}
	return nil
}

type CreateAttestedNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateAttestedNodeResponse) Reset() {
	*x = CreateAttestedNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestedNodeResponse) ProtoMessage() {}

func (x *CreateAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{25}
}

func (x *CreateAttestedNodeResponse) GetNode() *common.AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type FetchAttestedNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
}

func (x *FetchAttestedNodeRequest) Reset() {
	*x = FetchAttestedNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttestedNodeRequest) ProtoMessage() {}

func (x *FetchAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*FetchAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{26}
}

func (x *FetchAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

type FetchAttestedNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *FetchAttestedNodeResponse) Reset() {
	*x = FetchAttestedNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAttestedNodeResponse) ProtoMessage() {}

func (x *FetchAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*FetchAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{27}
}

func (x *FetchAttestedNodeResponse) GetNode() *common.AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type CountAttestedNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountAttestedNodesRequest) Reset() {
	*x = CountAttestedNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAttestedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAttestedNodesRequest) ProtoMessage() {}

func (x *CountAttestedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAttestedNodesRequest.ProtoReflect.Descriptor instead.
func (*CountAttestedNodesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{28}
}

type CountAttestedNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes int32 `protobuf:"varint,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *CountAttestedNodesResponse) Reset() {
	*x = CountAttestedNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAttestedNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAttestedNodesResponse) ProtoMessage() {}

func (x *CountAttestedNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAttestedNodesResponse.ProtoReflect.Descriptor instead.
func (*CountAttestedNodesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{29}
}

func (x *CountAttestedNodesResponse) GetNodes() int32 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

type CreateAttestedNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *CreateAttestedNodeRequest) Reset() {
	*x = CreateAttestedNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAttestedNodeRequest) ProtoMessage() {}

func (x *CreateAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{30}
}

func (x *CreateAttestedNodeRequest) GetNode() *common.AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type ListAttestedNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByExpiresBefore   *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=by_expires_before,json=byExpiresBefore,proto3" json:"by_expires_before,omitempty"`
	Pagination        *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ByAttestationType string                 `protobuf:"bytes,3,opt,name=by_attestation_type,json=byAttestationType,proto3" json:"by_attestation_type,omitempty"`
	BySelectorMatch   *BySelectors           `protobuf:"bytes,4,opt,name=by_selector_match,json=bySelectorMatch,proto3" json:"by_selector_match,omitempty"`
	ByBanned          *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=by_banned,json=byBanned,proto3" json:"by_banned,omitempty"`
	FetchSelectors    bool                   `protobuf:"varint,6,opt,name=fetch_selectors,json=fetchSelectors,proto3" json:"fetch_selectors,omitempty"`
}

func (x *ListAttestedNodesRequest) Reset() {
	*x = ListAttestedNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttestedNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestedNodesRequest) ProtoMessage() {}

func (x *ListAttestedNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestedNodesRequest.ProtoReflect.Descriptor instead.
func (*ListAttestedNodesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{31}
}

func (x *ListAttestedNodesRequest) GetByExpiresBefore() *wrapperspb.Int64Value {
	if x != nil {
		return x.ByExpiresBefore
	}
	return nil
}

func (x *ListAttestedNodesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListAttestedNodesRequest) GetByAttestationType() string {
	if x != nil {
		return x.ByAttestationType
	}
	return ""
}

func (x *ListAttestedNodesRequest) GetBySelectorMatch() *BySelectors {
	if x != nil {
		return x.BySelectorMatch
	}
	return nil
}

func (x *ListAttestedNodesRequest) GetByBanned() *wrapperspb.BoolValue {
	if x != nil {
		return x.ByBanned
	}
	return nil
}

func (x *ListAttestedNodesRequest) GetFetchSelectors() bool {
	if x != nil {
		return x.FetchSelectors
	}
	return false
}

type ListAttestedNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes      []*common.AttestedNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Pagination *Pagination            `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListAttestedNodesResponse) Reset() {
	*x = ListAttestedNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAttestedNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAttestedNodesResponse) ProtoMessage() {}

func (x *ListAttestedNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAttestedNodesResponse.ProtoReflect.Descriptor instead.
func (*ListAttestedNodesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{32}
}

func (x *ListAttestedNodesResponse) GetNodes() []*common.AttestedNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListAttestedNodesResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateAttestedNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId            string                   `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	CertSerialNumber    string                   `protobuf:"bytes,2,opt,name=cert_serial_number,json=certSerialNumber,proto3" json:"cert_serial_number,omitempty"`
	CertNotAfter        int64                    `protobuf:"varint,3,opt,name=cert_not_after,json=certNotAfter,proto3" json:"cert_not_after,omitempty"`
	NewCertSerialNumber string                   `protobuf:"bytes,4,opt,name=new_cert_serial_number,json=newCertSerialNumber,proto3" json:"new_cert_serial_number,omitempty"`
	NewCertNotAfter     int64                    `protobuf:"varint,5,opt,name=new_cert_not_after,json=newCertNotAfter,proto3" json:"new_cert_not_after,omitempty"`
	InputMask           *common.AttestedNodeMask `protobuf:"bytes,6,opt,name=input_mask,json=inputMask,proto3" json:"input_mask,omitempty"`
}

func (x *UpdateAttestedNodeRequest) Reset() {
	*x = UpdateAttestedNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestedNodeRequest) ProtoMessage() {}

func (x *UpdateAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

func (x *UpdateAttestedNodeRequest) GetCertSerialNumber() string {
	if x != nil {
		return x.CertSerialNumber
	}
	return ""
}

func (x *UpdateAttestedNodeRequest) GetCertNotAfter() int64 {
	if x != nil {
		return x.CertNotAfter
	}
	return 0
}

func (x *UpdateAttestedNodeRequest) GetNewCertSerialNumber() string {
	if x != nil {
		return x.NewCertSerialNumber
	}
	return ""
}

func (x *UpdateAttestedNodeRequest) GetNewCertNotAfter() int64 {
	if x != nil {
		return x.NewCertNotAfter
	}
	return 0
}

func (x *UpdateAttestedNodeRequest) GetInputMask() *common.AttestedNodeMask {
	if x != nil {
		return x.InputMask
	}
	return nil
}

type UpdateAttestedNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *UpdateAttestedNodeResponse) Reset() {
	*x = UpdateAttestedNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAttestedNodeResponse) ProtoMessage() {}

func (x *UpdateAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*UpdateAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateAttestedNodeResponse) GetNode() *common.AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type DeleteAttestedNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
}

func (x *DeleteAttestedNodeRequest) Reset() {
	*x = DeleteAttestedNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttestedNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttestedNodeRequest) ProtoMessage() {}

func (x *DeleteAttestedNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttestedNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteAttestedNodeRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteAttestedNodeRequest) GetSpiffeId() string {
	if x != nil {
		return x.SpiffeId
	}
	return ""
}

type DeleteAttestedNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *DeleteAttestedNodeResponse) Reset() {
	*x = DeleteAttestedNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAttestedNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAttestedNodeResponse) ProtoMessage() {}

func (x *DeleteAttestedNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAttestedNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteAttestedNodeResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteAttestedNodeResponse) GetNode() *common.AttestedNode {
	if x != nil {
		return x.Node
	}
	return nil
}

type CreateRegistrationEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *CreateRegistrationEntryRequest) Reset() {
	*x = CreateRegistrationEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationEntryRequest) ProtoMessage() {}

func (x *CreateRegistrationEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{37}
}

func (x *CreateRegistrationEntryRequest) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type CreateRegistrationEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *CreateRegistrationEntryResponse) Reset() {
	*x = CreateRegistrationEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationEntryResponse) ProtoMessage() {}

func (x *CreateRegistrationEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{38}
}

func (x *CreateRegistrationEntryResponse) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type FetchRegistrationEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (x *FetchRegistrationEntryRequest) Reset() {
	*x = FetchRegistrationEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRegistrationEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRegistrationEntryRequest) ProtoMessage() {}

func (x *FetchRegistrationEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRegistrationEntryRequest.ProtoReflect.Descriptor instead.
func (*FetchRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{39}
}

func (x *FetchRegistrationEntryRequest) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

type FetchRegistrationEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *FetchRegistrationEntryResponse) Reset() {
	*x = FetchRegistrationEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRegistrationEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRegistrationEntryResponse) ProtoMessage() {}

func (x *FetchRegistrationEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRegistrationEntryResponse.ProtoReflect.Descriptor instead.
func (*FetchRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{40}
}

func (x *FetchRegistrationEntryResponse) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type BySelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selectors []*common.Selector        `protobuf:"bytes,1,rep,name=selectors,proto3" json:"selectors,omitempty"`
	Match     BySelectors_MatchBehavior `protobuf:"varint,2,opt,name=match,proto3,enum=spire.server.datastore.BySelectors_MatchBehavior" json:"match,omitempty"`
}

func (x *BySelectors) Reset() {
	*x = BySelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BySelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BySelectors) ProtoMessage() {}

func (x *BySelectors) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BySelectors.ProtoReflect.Descriptor instead.
func (*BySelectors) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{41}
}

func (x *BySelectors) GetSelectors() []*common.Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *BySelectors) GetMatch() BySelectors_MatchBehavior {
	if x != nil {
		return x.Match
	}
	return BySelectors_MATCH_EXACT
}

type ByFederatesWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrustDomains []string                      `protobuf:"bytes,1,rep,name=trust_domains,json=trustDomains,proto3" json:"trust_domains,omitempty"`
	Match        ByFederatesWith_MatchBehavior `protobuf:"varint,2,opt,name=match,proto3,enum=spire.server.datastore.ByFederatesWith_MatchBehavior" json:"match,omitempty"`
}

func (x *ByFederatesWith) Reset() {
	*x = ByFederatesWith{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByFederatesWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByFederatesWith) ProtoMessage() {}

func (x *ByFederatesWith) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByFederatesWith.ProtoReflect.Descriptor instead.
func (*ByFederatesWith) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{42}
}

func (x *ByFederatesWith) GetTrustDomains() []string {
	if x != nil {
		return x.TrustDomains
	}
	return nil
}

func (x *ByFederatesWith) GetMatch() ByFederatesWith_MatchBehavior {
	if x != nil {
		return x.Match
	}
	return ByFederatesWith_MATCH_EXACT
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PageSize int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{43}
}

func (x *Pagination) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Pagination) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CountRegistrationEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountRegistrationEntriesRequest) Reset() {
	*x = CountRegistrationEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRegistrationEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRegistrationEntriesRequest) ProtoMessage() {}

func (x *CountRegistrationEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRegistrationEntriesRequest.ProtoReflect.Descriptor instead.
func (*CountRegistrationEntriesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{44}
}

type CountRegistrationEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries int32 `protobuf:"varint,1,opt,name=entries,proto3" json:"entries,omitempty"`
}

func (x *CountRegistrationEntriesResponse) Reset() {
	*x = CountRegistrationEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRegistrationEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRegistrationEntriesResponse) ProtoMessage() {}

func (x *CountRegistrationEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRegistrationEntriesResponse.ProtoReflect.Descriptor instead.
func (*CountRegistrationEntriesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{45}
}

func (x *CountRegistrationEntriesResponse) GetEntries() int32 {
	if x != nil {
		return x.Entries
	}
	return 0
}

type ListRegistrationEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByParentId  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=by_parent_id,json=byParentId,proto3" json:"by_parent_id,omitempty"`
	BySelectors *BySelectors            `protobuf:"bytes,2,opt,name=by_selectors,json=bySelectors,proto3" json:"by_selectors,omitempty"`
	BySpiffeId  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=by_spiffe_id,json=bySpiffeId,proto3" json:"by_spiffe_id,omitempty"`
	Pagination  *Pagination             `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// When enabled, read-only connection will be used to connect to database read instances. Some staleness of data will be observed.
	TolerateStale   bool             `protobuf:"varint,5,opt,name=tolerate_stale,json=tolerateStale,proto3" json:"tolerate_stale,omitempty"`
	ByFederatesWith *ByFederatesWith `protobuf:"bytes,6,opt,name=by_federates_with,json=byFederatesWith,proto3" json:"by_federates_with,omitempty"`
}

func (x *ListRegistrationEntriesRequest) Reset() {
	*x = ListRegistrationEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegistrationEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationEntriesRequest) ProtoMessage() {}

func (x *ListRegistrationEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListRegistrationEntriesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{46}
}

func (x *ListRegistrationEntriesRequest) GetByParentId() *wrapperspb.StringValue {
	if x != nil {
		return x.ByParentId
	}
	return nil
}

func (x *ListRegistrationEntriesRequest) GetBySelectors() *BySelectors {
	if x != nil {
		return x.BySelectors
	}
	return nil
}

func (x *ListRegistrationEntriesRequest) GetBySpiffeId() *wrapperspb.StringValue {
	if x != nil {
		return x.BySpiffeId
	}
	return nil
}

func (x *ListRegistrationEntriesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListRegistrationEntriesRequest) GetTolerateStale() bool {
	if x != nil {
		return x.TolerateStale
	}
	return false
}

func (x *ListRegistrationEntriesRequest) GetByFederatesWith() *ByFederatesWith {
	if x != nil {
		return x.ByFederatesWith
	}
	return nil
}

type ListRegistrationEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries    []*common.RegistrationEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Pagination *Pagination                 `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListRegistrationEntriesResponse) Reset() {
	*x = ListRegistrationEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegistrationEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistrationEntriesResponse) ProtoMessage() {}

func (x *ListRegistrationEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistrationEntriesResponse.ProtoReflect.Descriptor instead.
func (*ListRegistrationEntriesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{47}
}

func (x *ListRegistrationEntriesResponse) GetEntries() []*common.RegistrationEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListRegistrationEntriesResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateRegistrationEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *common.RegistrationEntry     `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Mask  *common.RegistrationEntryMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *UpdateRegistrationEntryRequest) Reset() {
	*x = UpdateRegistrationEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationEntryRequest) ProtoMessage() {}

func (x *UpdateRegistrationEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationEntryRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateRegistrationEntryRequest) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *UpdateRegistrationEntryRequest) GetMask() *common.RegistrationEntryMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type UpdateRegistrationEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *UpdateRegistrationEntryResponse) Reset() {
	*x = UpdateRegistrationEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationEntryResponse) ProtoMessage() {}

func (x *UpdateRegistrationEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationEntryResponse.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateRegistrationEntryResponse) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type DeleteRegistrationEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId string `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (x *DeleteRegistrationEntryRequest) Reset() {
	*x = DeleteRegistrationEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegistrationEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistrationEntryRequest) ProtoMessage() {}

func (x *DeleteRegistrationEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistrationEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegistrationEntryRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteRegistrationEntryRequest) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

type DeleteRegistrationEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *DeleteRegistrationEntryResponse) Reset() {
	*x = DeleteRegistrationEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegistrationEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistrationEntryResponse) ProtoMessage() {}

func (x *DeleteRegistrationEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistrationEntryResponse.ProtoReflect.Descriptor instead.
func (*DeleteRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteRegistrationEntryResponse) GetEntry() *common.RegistrationEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type PruneRegistrationEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiresBefore int64 `protobuf:"varint,1,opt,name=expires_before,json=expiresBefore,proto3" json:"expires_before,omitempty"`
}

func (x *PruneRegistrationEntriesRequest) Reset() {
	*x = PruneRegistrationEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneRegistrationEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneRegistrationEntriesRequest) ProtoMessage() {}

func (x *PruneRegistrationEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneRegistrationEntriesRequest.ProtoReflect.Descriptor instead.
func (*PruneRegistrationEntriesRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{52}
}

func (x *PruneRegistrationEntriesRequest) GetExpiresBefore() int64 {
	if x != nil {
		return x.ExpiresBefore
	}
	return 0
}

type PruneRegistrationEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PruneRegistrationEntriesResponse) Reset() {
	*x = PruneRegistrationEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneRegistrationEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneRegistrationEntriesResponse) ProtoMessage() {}

func (x *PruneRegistrationEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneRegistrationEntriesResponse.ProtoReflect.Descriptor instead.
func (*PruneRegistrationEntriesResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{53}
}

type JoinToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token value
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Expiration in seconds since unix epoch
	Expiry int64 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *JoinToken) Reset() {
	*x = JoinToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinToken) ProtoMessage() {}

func (x *JoinToken) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinToken.ProtoReflect.Descriptor instead.
func (*JoinToken) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{54}
}

func (x *JoinToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinToken) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

type CreateJoinTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinToken *JoinToken `protobuf:"bytes,1,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *CreateJoinTokenRequest) Reset() {
	*x = CreateJoinTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJoinTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJoinTokenRequest) ProtoMessage() {}

func (x *CreateJoinTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJoinTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateJoinTokenRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{55}
}

func (x *CreateJoinTokenRequest) GetJoinToken() *JoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

type CreateJoinTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinToken *JoinToken `protobuf:"bytes,1,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *CreateJoinTokenResponse) Reset() {
	*x = CreateJoinTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJoinTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJoinTokenResponse) ProtoMessage() {}

func (x *CreateJoinTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJoinTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateJoinTokenResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{56}
}

func (x *CreateJoinTokenResponse) GetJoinToken() *JoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

type FetchJoinTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *FetchJoinTokenRequest) Reset() {
	*x = FetchJoinTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchJoinTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchJoinTokenRequest) ProtoMessage() {}

func (x *FetchJoinTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchJoinTokenRequest.ProtoReflect.Descriptor instead.
func (*FetchJoinTokenRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{57}
}

func (x *FetchJoinTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type FetchJoinTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinToken *JoinToken `protobuf:"bytes,1,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *FetchJoinTokenResponse) Reset() {
	*x = FetchJoinTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchJoinTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchJoinTokenResponse) ProtoMessage() {}

func (x *FetchJoinTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchJoinTokenResponse.ProtoReflect.Descriptor instead.
func (*FetchJoinTokenResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{58}
}

func (x *FetchJoinTokenResponse) GetJoinToken() *JoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

type DeleteJoinTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeleteJoinTokenRequest) Reset() {
	*x = DeleteJoinTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJoinTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJoinTokenRequest) ProtoMessage() {}

func (x *DeleteJoinTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJoinTokenRequest.ProtoReflect.Descriptor instead.
func (*DeleteJoinTokenRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{59}
}

func (x *DeleteJoinTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DeleteJoinTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinToken *JoinToken `protobuf:"bytes,1,opt,name=join_token,json=joinToken,proto3" json:"join_token,omitempty"`
}

func (x *DeleteJoinTokenResponse) Reset() {
	*x = DeleteJoinTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJoinTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJoinTokenResponse) ProtoMessage() {}

func (x *DeleteJoinTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJoinTokenResponse.ProtoReflect.Descriptor instead.
func (*DeleteJoinTokenResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{60}
}

func (x *DeleteJoinTokenResponse) GetJoinToken() *JoinToken {
	if x != nil {
		return x.JoinToken
	}
	return nil
}

type PruneJoinTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiresBefore int64 `protobuf:"varint,1,opt,name=expires_before,json=expiresBefore,proto3" json:"expires_before,omitempty"`
}

func (x *PruneJoinTokensRequest) Reset() {
	*x = PruneJoinTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneJoinTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneJoinTokensRequest) ProtoMessage() {}

func (x *PruneJoinTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneJoinTokensRequest.ProtoReflect.Descriptor instead.
func (*PruneJoinTokensRequest) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{61}
}

func (x *PruneJoinTokensRequest) GetExpiresBefore() int64 {
	if x != nil {
		return x.ExpiresBefore
	}
	return 0
}

type PruneJoinTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PruneJoinTokensResponse) Reset() {
	*x = PruneJoinTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spire_server_datastore_datastore_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PruneJoinTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PruneJoinTokensResponse) ProtoMessage() {}

func (x *PruneJoinTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spire_server_datastore_datastore_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PruneJoinTokensResponse.ProtoReflect.Descriptor instead.
func (*PruneJoinTokensResponse) Descriptor() ([]byte, []int) {
	return file_spire_server_datastore_datastore_proto_rawDescGZIP(), []int{62}
}

var File_spire_server_datastore_datastore_proto protoreflect.FileDescriptor

var file_spire_server_datastore_datastore_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x89, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x44, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x40, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x22, 0x41, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x62,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x44, 0x0a, 0x14, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x53, 0x4f,
	0x43, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0x44, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x63, 0x0a,
	0x12, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0x3c, 0x0a, 0x13, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x22, 0x62, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x22,
	0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0x78, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x74, 0x22, 0x60, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x18, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66,
	0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a,
	0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x4b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x8a,
	0x03, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x62,
	0x79, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x62, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x79, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x62, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x62, 0x79, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x79, 0x5f,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x79, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xad, 0x02, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6e, 0x65, 0x77, 0x43, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x6e, 0x65, 0x77, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x4c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x57, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x58,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xc0, 0x01,
	0x0a, 0x0b, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x32, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x42, 0x79, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x05, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x79, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x32, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x45, 0x54, 0x10, 0x01, 0x22, 0x3f, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c,
	0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xa8, 0x03, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x0c, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x62, 0x79, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x79, 0x5f, 0x73, 0x70,
	0x69, 0x66, 0x66, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x53,
	0x70, 0x69, 0x66, 0x66, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x62, 0x79, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x79, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x52, 0x0f, 0x62, 0x79, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x22, 0xa0, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x1e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x58, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3b, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x48,
	0x0a, 0x1f, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x50, 0x72, 0x75, 0x6e,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x09,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x5a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x2d, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x5a, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x6a,
	0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x16, 0x50, 0x72, 0x75, 0x6e,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x50, 0x72, 0x75,
	0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xfb, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a,
	0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x66, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12,
	0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x28, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0b, 0x50,
	0x72, 0x75, 0x6e, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x75, 0x6e, 0x65, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x2f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x30,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x36, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x36, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x36, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37,
	0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x0f, 0x50, 0x72,
	0x75, 0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2e, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x2e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x70, 0x69, 0x66, 0x66, 0x65, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_spire_server_datastore_datastore_proto_rawDescOnce sync.Once
	file_spire_server_datastore_datastore_proto_rawDescData = file_spire_server_datastore_datastore_proto_rawDesc
)

func file_spire_server_datastore_datastore_proto_rawDescGZIP() []byte {
	file_spire_server_datastore_datastore_proto_rawDescOnce.Do(func() {
		file_spire_server_datastore_datastore_proto_rawDescData = protoimpl.X.CompressGZIP(file_spire_server_datastore_datastore_proto_rawDescData)
	})
	return file_spire_server_datastore_datastore_proto_rawDescData
}

var file_spire_server_datastore_datastore_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spire_server_datastore_datastore_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_spire_server_datastore_datastore_proto_goTypes = []interface{}{
	(DeleteBundleRequest_Mode)(0),            // 0: spire.server.datastore.DeleteBundleRequest.Mode
	(BySelectors_MatchBehavior)(0),           // 1: spire.server.datastore.BySelectors.MatchBehavior
	(ByFederatesWith_MatchBehavior)(0),       // 2: spire.server.datastore.ByFederatesWith.MatchBehavior
	(*CreateBundleRequest)(nil),              // 3: spire.server.datastore.CreateBundleRequest
	(*CreateBundleResponse)(nil),             // 4: spire.server.datastore.CreateBundleResponse
	(*FetchBundleRequest)(nil),               // 5: spire.server.datastore.FetchBundleRequest
	(*FetchBundleResponse)(nil),              // 6: spire.server.datastore.FetchBundleResponse
	(*CountBundlesRequest)(nil),              // 7: spire.server.datastore.CountBundlesRequest
	(*CountBundlesResponse)(nil),             // 8: spire.server.datastore.CountBundlesResponse
	(*ListBundlesRequest)(nil),               // 9: spire.server.datastore.ListBundlesRequest
	(*ListBundlesResponse)(nil),              // 10: spire.server.datastore.ListBundlesResponse
	(*UpdateBundleRequest)(nil),              // 11: spire.server.datastore.UpdateBundleRequest
	(*UpdateBundleResponse)(nil),             // 12: spire.server.datastore.UpdateBundleResponse
	(*SetBundleRequest)(nil),                 // 13: spire.server.datastore.SetBundleRequest
	(*SetBundleResponse)(nil),                // 14: spire.server.datastore.SetBundleResponse
	(*AppendBundleRequest)(nil),              // 15: spire.server.datastore.AppendBundleRequest
	(*AppendBundleResponse)(nil),             // 16: spire.server.datastore.AppendBundleResponse
	(*DeleteBundleRequest)(nil),              // 17: spire.server.datastore.DeleteBundleRequest
	(*DeleteBundleResponse)(nil),             // 18: spire.server.datastore.DeleteBundleResponse
	(*PruneBundleRequest)(nil),               // 19: spire.server.datastore.PruneBundleRequest
	(*PruneBundleResponse)(nil),              // 20: spire.server.datastore.PruneBundleResponse
	(*NodeSelectors)(nil),                    // 21: spire.server.datastore.NodeSelectors
	(*SetNodeSelectorsRequest)(nil),          // 22: spire.server.datastore.SetNodeSelectorsRequest
	(*SetNodeSelectorsResponse)(nil),         // 23: spire.server.datastore.SetNodeSelectorsResponse
	(*GetNodeSelectorsRequest)(nil),          // 24: spire.server.datastore.GetNodeSelectorsRequest
	(*GetNodeSelectorsResponse)(nil),         // 25: spire.server.datastore.GetNodeSelectorsResponse
	(*ListNodeSelectorsRequest)(nil),         // 26: spire.server.datastore.ListNodeSelectorsRequest
	(*ListNodeSelectorsResponse)(nil),        // 27: spire.server.datastore.ListNodeSelectorsResponse
	(*CreateAttestedNodeResponse)(nil),       // 28: spire.server.datastore.CreateAttestedNodeResponse
	(*FetchAttestedNodeRequest)(nil),         // 29: spire.server.datastore.FetchAttestedNodeRequest
	(*FetchAttestedNodeResponse)(nil),        // 30: spire.server.datastore.FetchAttestedNodeResponse
	(*CountAttestedNodesRequest)(nil),        // 31: spire.server.datastore.CountAttestedNodesRequest
	(*CountAttestedNodesResponse)(nil),       // 32: spire.server.datastore.CountAttestedNodesResponse
	(*CreateAttestedNodeRequest)(nil),        // 33: spire.server.datastore.CreateAttestedNodeRequest
	(*ListAttestedNodesRequest)(nil),         // 34: spire.server.datastore.ListAttestedNodesRequest
	(*ListAttestedNodesResponse)(nil),        // 35: spire.server.datastore.ListAttestedNodesResponse
	(*UpdateAttestedNodeRequest)(nil),        // 36: spire.server.datastore.UpdateAttestedNodeRequest
	(*UpdateAttestedNodeResponse)(nil),       // 37: spire.server.datastore.UpdateAttestedNodeResponse
	(*DeleteAttestedNodeRequest)(nil),        // 38: spire.server.datastore.DeleteAttestedNodeRequest
	(*DeleteAttestedNodeResponse)(nil),       // 39: spire.server.datastore.DeleteAttestedNodeResponse
	(*CreateRegistrationEntryRequest)(nil),   // 40: spire.server.datastore.CreateRegistrationEntryRequest
	(*CreateRegistrationEntryResponse)(nil),  // 41: spire.server.datastore.CreateRegistrationEntryResponse
	(*FetchRegistrationEntryRequest)(nil),    // 42: spire.server.datastore.FetchRegistrationEntryRequest
	(*FetchRegistrationEntryResponse)(nil),   // 43: spire.server.datastore.FetchRegistrationEntryResponse
	(*BySelectors)(nil),                      // 44: spire.server.datastore.BySelectors
	(*ByFederatesWith)(nil),                  // 45: spire.server.datastore.ByFederatesWith
	(*Pagination)(nil),                       // 46: spire.server.datastore.Pagination
	(*CountRegistrationEntriesRequest)(nil),  // 47: spire.server.datastore.CountRegistrationEntriesRequest
	(*CountRegistrationEntriesResponse)(nil), // 48: spire.server.datastore.CountRegistrationEntriesResponse
	(*ListRegistrationEntriesRequest)(nil),   // 49: spire.server.datastore.ListRegistrationEntriesRequest
	(*ListRegistrationEntriesResponse)(nil),  // 50: spire.server.datastore.ListRegistrationEntriesResponse
	(*UpdateRegistrationEntryRequest)(nil),   // 51: spire.server.datastore.UpdateRegistrationEntryRequest
	(*UpdateRegistrationEntryResponse)(nil),  // 52: spire.server.datastore.UpdateRegistrationEntryResponse
	(*DeleteRegistrationEntryRequest)(nil),   // 53: spire.server.datastore.DeleteRegistrationEntryRequest
	(*DeleteRegistrationEntryResponse)(nil),  // 54: spire.server.datastore.DeleteRegistrationEntryResponse
	(*PruneRegistrationEntriesRequest)(nil),  // 55: spire.server.datastore.PruneRegistrationEntriesRequest
	(*PruneRegistrationEntriesResponse)(nil), // 56: spire.server.datastore.PruneRegistrationEntriesResponse
	(*JoinToken)(nil),                        // 57: spire.server.datastore.JoinToken
	(*CreateJoinTokenRequest)(nil),           // 58: spire.server.datastore.CreateJoinTokenRequest
	(*CreateJoinTokenResponse)(nil),          // 59: spire.server.datastore.CreateJoinTokenResponse
	(*FetchJoinTokenRequest)(nil),            // 60: spire.server.datastore.FetchJoinTokenRequest
	(*FetchJoinTokenResponse)(nil),           // 61: spire.server.datastore.FetchJoinTokenResponse
	(*DeleteJoinTokenRequest)(nil),           // 62: spire.server.datastore.DeleteJoinTokenRequest
	(*DeleteJoinTokenResponse)(nil),          // 63: spire.server.datastore.DeleteJoinTokenResponse
	(*PruneJoinTokensRequest)(nil),           // 64: spire.server.datastore.PruneJoinTokensRequest
	(*PruneJoinTokensResponse)(nil),          // 65: spire.server.datastore.PruneJoinTokensResponse
	(*common.Bundle)(nil),                    // 66: spire.common.Bundle
	(*common.BundleMask)(nil),                // 67: spire.common.BundleMask
	(*common.Selector)(nil),                  // 68: spire.common.Selector
	(*timestamppb.Timestamp)(nil),            // 69: google.protobuf.Timestamp
	(*common.AttestedNode)(nil),              // 70: spire.common.AttestedNode
	(*wrapperspb.Int64Value)(nil),            // 71: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),             // 72: google.protobuf.BoolValue
	(*common.AttestedNodeMask)(nil),          // 73: spire.common.AttestedNodeMask
	(*common.RegistrationEntry)(nil),         // 74: spire.common.RegistrationEntry
	(*wrapperspb.StringValue)(nil),           // 75: google.protobuf.StringValue
	(*common.RegistrationEntryMask)(nil),     // 76: spire.common.RegistrationEntryMask
	(*plugin.ConfigureRequest)(nil),          // 77: spire.common.plugin.ConfigureRequest
	(*plugin.GetPluginInfoRequest)(nil),      // 78: spire.common.plugin.GetPluginInfoRequest
	(*plugin.ConfigureResponse)(nil),         // 79: spire.common.plugin.ConfigureResponse
	(*plugin.GetPluginInfoResponse)(nil),     // 80: spire.common.plugin.GetPluginInfoResponse
}
var file_spire_server_datastore_datastore_proto_depIdxs = []int32{
	66, // 0: spire.server.datastore.CreateBundleRequest.bundle:type_name -> spire.common.Bundle
	66, // 1: spire.server.datastore.CreateBundleResponse.bundle:type_name -> spire.common.Bundle
	66, // 2: spire.server.datastore.FetchBundleResponse.bundle:type_name -> spire.common.Bundle
	46, // 3: spire.server.datastore.ListBundlesRequest.pagination:type_name -> spire.server.datastore.Pagination
	66, // 4: spire.server.datastore.ListBundlesResponse.bundles:type_name -> spire.common.Bundle
	46, // 5: spire.server.datastore.ListBundlesResponse.pagination:type_name -> spire.server.datastore.Pagination
	66, // 6: spire.server.datastore.UpdateBundleRequest.bundle:type_name -> spire.common.Bundle
	67, // 7: spire.server.datastore.UpdateBundleRequest.input_mask:type_name -> spire.common.BundleMask
	66, // 8: spire.server.datastore.UpdateBundleResponse.bundle:type_name -> spire.common.Bundle
	66, // 9: spire.server.datastore.SetBundleRequest.bundle:type_name -> spire.common.Bundle
	66, // 10: spire.server.datastore.SetBundleResponse.bundle:type_name -> spire.common.Bundle
	66, // 11: spire.server.datastore.AppendBundleRequest.bundle:type_name -> spire.common.Bundle
	66, // 12: spire.server.datastore.AppendBundleResponse.bundle:type_name -> spire.common.Bundle
	0,  // 13: spire.server.datastore.DeleteBundleRequest.mode:type_name -> spire.server.datastore.DeleteBundleRequest.Mode
	66, // 14: spire.server.datastore.DeleteBundleResponse.bundle:type_name -> spire.common.Bundle
	68, // 15: spire.server.datastore.NodeSelectors.selectors:type_name -> spire.common.Selector
	21, // 16: spire.server.datastore.SetNodeSelectorsRequest.selectors:type_name -> spire.server.datastore.NodeSelectors
	21, // 17: spire.server.datastore.GetNodeSelectorsResponse.selectors:type_name -> spire.server.datastore.NodeSelectors
	69, // 18: spire.server.datastore.ListNodeSelectorsRequest.valid_at:type_name -> google.protobuf.Timestamp
	21, // 19: spire.server.datastore.ListNodeSelectorsResponse.selectors:type_name -> spire.server.datastore.NodeSelectors
	70, // 20: spire.server.datastore.CreateAttestedNodeResponse.node:type_name -> spire.common.AttestedNode
	70, // 21: spire.server.datastore.FetchAttestedNodeResponse.node:type_name -> spire.common.AttestedNode
	70, // 22: spire.server.datastore.CreateAttestedNodeRequest.node:type_name -> spire.common.AttestedNode
	71, // 23: spire.server.datastore.ListAttestedNodesRequest.by_expires_before:type_name -> google.protobuf.Int64Value
	46, // 24: spire.server.datastore.ListAttestedNodesRequest.pagination:type_name -> spire.server.datastore.Pagination
	44, // 25: spire.server.datastore.ListAttestedNodesRequest.by_selector_match:type_name -> spire.server.datastore.BySelectors
	72, // 26: spire.server.datastore.ListAttestedNodesRequest.by_banned:type_name -> google.protobuf.BoolValue
	70, // 27: spire.server.datastore.ListAttestedNodesResponse.nodes:type_name -> spire.common.AttestedNode
	46, // 28: spire.server.datastore.ListAttestedNodesResponse.pagination:type_name -> spire.server.datastore.Pagination
	73, // 29: spire.server.datastore.UpdateAttestedNodeRequest.input_mask:type_name -> spire.common.AttestedNodeMask
	70, // 30: spire.server.datastore.UpdateAttestedNodeResponse.node:type_name -> spire.common.AttestedNode
	70, // 31: spire.server.datastore.DeleteAttestedNodeResponse.node:type_name -> spire.common.AttestedNode
	74, // 32: spire.server.datastore.CreateRegistrationEntryRequest.entry:type_name -> spire.common.RegistrationEntry
	74, // 33: spire.server.datastore.CreateRegistrationEntryResponse.entry:type_name -> spire.common.RegistrationEntry
	74, // 34: spire.server.datastore.FetchRegistrationEntryResponse.entry:type_name -> spire.common.RegistrationEntry
	68, // 35: spire.server.datastore.BySelectors.selectors:type_name -> spire.common.Selector
	1,  // 36: spire.server.datastore.BySelectors.match:type_name -> spire.server.datastore.BySelectors.MatchBehavior
	2,  // 37: spire.server.datastore.ByFederatesWith.match:type_name -> spire.server.datastore.ByFederatesWith.MatchBehavior
	75, // 38: spire.server.datastore.ListRegistrationEntriesRequest.by_parent_id:type_name -> google.protobuf.StringValue
	44, // 39: spire.server.datastore.ListRegistrationEntriesRequest.by_selectors:type_name -> spire.server.datastore.BySelectors
	75, // 40: spire.server.datastore.ListRegistrationEntriesRequest.by_spiffe_id:type_name -> google.protobuf.StringValue
	46, // 41: spire.server.datastore.ListRegistrationEntriesRequest.pagination:type_name -> spire.server.datastore.Pagination
	45, // 42: spire.server.datastore.ListRegistrationEntriesRequest.by_federates_with:type_name -> spire.server.datastore.ByFederatesWith
	74, // 43: spire.server.datastore.ListRegistrationEntriesResponse.entries:type_name -> spire.common.RegistrationEntry
	46, // 44: spire.server.datastore.ListRegistrationEntriesResponse.pagination:type_name -> spire.server.datastore.Pagination
	74, // 45: spire.server.datastore.UpdateRegistrationEntryRequest.entry:type_name -> spire.common.RegistrationEntry
	76, // 46: spire.server.datastore.UpdateRegistrationEntryRequest.mask:type_name -> spire.common.RegistrationEntryMask
	74, // 47: spire.server.datastore.UpdateRegistrationEntryResponse.entry:type_name -> spire.common.RegistrationEntry
	74, // 48: spire.server.datastore.DeleteRegistrationEntryResponse.entry:type_name -> spire.common.RegistrationEntry
	57, // 49: spire.server.datastore.CreateJoinTokenRequest.join_token:type_name -> spire.server.datastore.JoinToken
	57, // 50: spire.server.datastore.CreateJoinTokenResponse.join_token:type_name -> spire.server.datastore.JoinToken
	57, // 51: spire.server.datastore.FetchJoinTokenResponse.join_token:type_name -> spire.server.datastore.JoinToken
	57, // 52: spire.server.datastore.DeleteJoinTokenResponse.join_token:type_name -> spire.server.datastore.JoinToken
	3,  // 53: spire.server.datastore.DataStore.CreateBundle:input_type -> spire.server.datastore.CreateBundleRequest
	5,  // 54: spire.server.datastore.DataStore.FetchBundle:input_type -> spire.server.datastore.FetchBundleRequest
	7,  // 55: spire.server.datastore.DataStore.CountBundles:input_type -> spire.server.datastore.CountBundlesRequest
	9,  // 56: spire.server.datastore.DataStore.ListBundles:input_type -> spire.server.datastore.ListBundlesRequest
	11, // 57: spire.server.datastore.DataStore.UpdateBundle:input_type -> spire.server.datastore.UpdateBundleRequest
	13, // 58: spire.server.datastore.DataStore.SetBundle:input_type -> spire.server.datastore.SetBundleRequest
	15, // 59: spire.server.datastore.DataStore.AppendBundle:input_type -> spire.server.datastore.AppendBundleRequest
	17, // 60: spire.server.datastore.DataStore.DeleteBundle:input_type -> spire.server.datastore.DeleteBundleRequest
	19, // 61: spire.server.datastore.DataStore.PruneBundle:input_type -> spire.server.datastore.PruneBundleRequest
	33, // 62: spire.server.datastore.DataStore.CreateAttestedNode:input_type -> spire.server.datastore.CreateAttestedNodeRequest
	29, // 63: spire.server.datastore.DataStore.FetchAttestedNode:input_type -> spire.server.datastore.FetchAttestedNodeRequest
	31, // 64: spire.server.datastore.DataStore.CountAttestedNodes:input_type -> spire.server.datastore.CountAttestedNodesRequest
	34, // 65: spire.server.datastore.DataStore.ListAttestedNodes:input_type -> spire.server.datastore.ListAttestedNodesRequest
	36, // 66: spire.server.datastore.DataStore.UpdateAttestedNode:input_type -> spire.server.datastore.UpdateAttestedNodeRequest
	38, // 67: spire.server.datastore.DataStore.DeleteAttestedNode:input_type -> spire.server.datastore.DeleteAttestedNodeRequest
	22, // 68: spire.server.datastore.DataStore.SetNodeSelectors:input_type -> spire.server.datastore.SetNodeSelectorsRequest
	24, // 69: spire.server.datastore.DataStore.GetNodeSelectors:input_type -> spire.server.datastore.GetNodeSelectorsRequest
	26, // 70: spire.server.datastore.DataStore.ListNodeSelectors:input_type -> spire.server.datastore.ListNodeSelectorsRequest
	40, // 71: spire.server.datastore.DataStore.CreateRegistrationEntry:input_type -> spire.server.datastore.CreateRegistrationEntryRequest
	42, // 72: spire.server.datastore.DataStore.FetchRegistrationEntry:input_type -> spire.server.datastore.FetchRegistrationEntryRequest
	47, // 73: spire.server.datastore.DataStore.CountRegistrationEntries:input_type -> spire.server.datastore.CountRegistrationEntriesRequest
	49, // 74: spire.server.datastore.DataStore.ListRegistrationEntries:input_type -> spire.server.datastore.ListRegistrationEntriesRequest
	51, // 75: spire.server.datastore.DataStore.UpdateRegistrationEntry:input_type -> spire.server.datastore.UpdateRegistrationEntryRequest
	53, // 76: spire.server.datastore.DataStore.DeleteRegistrationEntry:input_type -> spire.server.datastore.DeleteRegistrationEntryRequest
	55, // 77: spire.server.datastore.DataStore.PruneRegistrationEntries:input_type -> spire.server.datastore.PruneRegistrationEntriesRequest
	58, // 78: spire.server.datastore.DataStore.CreateJoinToken:input_type -> spire.server.datastore.CreateJoinTokenRequest
	60, // 79: spire.server.datastore.DataStore.FetchJoinToken:input_type -> spire.server.datastore.FetchJoinTokenRequest
	62, // 80: spire.server.datastore.DataStore.DeleteJoinToken:input_type -> spire.server.datastore.DeleteJoinTokenRequest
	64, // 81: spire.server.datastore.DataStore.PruneJoinTokens:input_type -> spire.server.datastore.PruneJoinTokensRequest
	77, // 82: spire.server.datastore.DataStore.Configure:input_type -> spire.common.plugin.ConfigureRequest
	78, // 83: spire.server.datastore.DataStore.GetPluginInfo:input_type -> spire.common.plugin.GetPluginInfoRequest
	4,  // 84: spire.server.datastore.DataStore.CreateBundle:output_type -> spire.server.datastore.CreateBundleResponse
	6,  // 85: spire.server.datastore.DataStore.FetchBundle:output_type -> spire.server.datastore.FetchBundleResponse
	8,  // 86: spire.server.datastore.DataStore.CountBundles:output_type -> spire.server.datastore.CountBundlesResponse
	10, // 87: spire.server.datastore.DataStore.ListBundles:output_type -> spire.server.datastore.ListBundlesResponse
	12, // 88: spire.server.datastore.DataStore.UpdateBundle:output_type -> spire.server.datastore.UpdateBundleResponse
	14, // 89: spire.server.datastore.DataStore.SetBundle:output_type -> spire.server.datastore.SetBundleResponse
	16, // 90: spire.server.datastore.DataStore.AppendBundle:output_type -> spire.server.datastore.AppendBundleResponse
	18, // 91: spire.server.datastore.DataStore.DeleteBundle:output_type -> spire.server.datastore.DeleteBundleResponse
	20, // 92: spire.server.datastore.DataStore.PruneBundle:output_type -> spire.server.datastore.PruneBundleResponse
	28, // 93: spire.server.datastore.DataStore.CreateAttestedNode:output_type -> spire.server.datastore.CreateAttestedNodeResponse
	30, // 94: spire.server.datastore.DataStore.FetchAttestedNode:output_type -> spire.server.datastore.FetchAttestedNodeResponse
	32, // 95: spire.server.datastore.DataStore.CountAttestedNodes:output_type -> spire.server.datastore.CountAttestedNodesResponse
	35, // 96: spire.server.datastore.DataStore.ListAttestedNodes:output_type -> spire.server.datastore.ListAttestedNodesResponse
	37, // 97: spire.server.datastore.DataStore.UpdateAttestedNode:output_type -> spire.server.datastore.UpdateAttestedNodeResponse
	39, // 98: spire.server.datastore.DataStore.DeleteAttestedNode:output_type -> spire.server.datastore.DeleteAttestedNodeResponse
	23, // 99: spire.server.datastore.DataStore.SetNodeSelectors:output_type -> spire.server.datastore.SetNodeSelectorsResponse
	25, // 100: spire.server.datastore.DataStore.GetNodeSelectors:output_type -> spire.server.datastore.GetNodeSelectorsResponse
	27, // 101: spire.server.datastore.DataStore.ListNodeSelectors:output_type -> spire.server.datastore.ListNodeSelectorsResponse
	41, // 102: spire.server.datastore.DataStore.CreateRegistrationEntry:output_type -> spire.server.datastore.CreateRegistrationEntryResponse
	43, // 103: spire.server.datastore.DataStore.FetchRegistrationEntry:output_type -> spire.server.datastore.FetchRegistrationEntryResponse
	48, // 104: spire.server.datastore.DataStore.CountRegistrationEntries:output_type -> spire.server.datastore.CountRegistrationEntriesResponse
	50, // 105: spire.server.datastore.DataStore.ListRegistrationEntries:output_type -> spire.server.datastore.ListRegistrationEntriesResponse
	52, // 106: spire.server.datastore.DataStore.UpdateRegistrationEntry:output_type -> spire.server.datastore.UpdateRegistrationEntryResponse
	54, // 107: spire.server.datastore.DataStore.DeleteRegistrationEntry:output_type -> spire.server.datastore.DeleteRegistrationEntryResponse
	56, // 108: spire.server.datastore.DataStore.PruneRegistrationEntries:output_type -> spire.server.datastore.PruneRegistrationEntriesResponse
	59, // 109: spire.server.datastore.DataStore.CreateJoinToken:output_type -> spire.server.datastore.CreateJoinTokenResponse
	61, // 110: spire.server.datastore.DataStore.FetchJoinToken:output_type -> spire.server.datastore.FetchJoinTokenResponse
	63, // 111: spire.server.datastore.DataStore.DeleteJoinToken:output_type -> spire.server.datastore.DeleteJoinTokenResponse
	65, // 112: spire.server.datastore.DataStore.PruneJoinTokens:output_type -> spire.server.datastore.PruneJoinTokensResponse
	79, // 113: spire.server.datastore.DataStore.Configure:output_type -> spire.common.plugin.ConfigureResponse
	80, // 114: spire.server.datastore.DataStore.GetPluginInfo:output_type -> spire.common.plugin.GetPluginInfoResponse
	84, // [84:115] is the sub-list for method output_type
	53, // [53:84] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_spire_server_datastore_datastore_proto_init() }
func file_spire_server_datastore_datastore_proto_init() {
	if File_spire_server_datastore_datastore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spire_server_datastore_datastore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBundlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBundlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBundlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBundlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneBundleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneBundleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeSelectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeSelectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSelectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeSelectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeSelectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeSelectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAttestedNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAttestedNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAttestedNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAttestedNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAttestedNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAttestedNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttestedNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAttestedNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttestedNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAttestedNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttestedNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAttestedNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRegistrationEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRegistrationEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BySelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByFederatesWith); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRegistrationEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRegistrationEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegistrationEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegistrationEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegistrationEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegistrationEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneRegistrationEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneRegistrationEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJoinTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJoinTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchJoinTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchJoinTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJoinTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJoinTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneJoinTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spire_server_datastore_datastore_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PruneJoinTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spire_server_datastore_datastore_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spire_server_datastore_datastore_proto_goTypes,
		DependencyIndexes: file_spire_server_datastore_datastore_proto_depIdxs,
		EnumInfos:         file_spire_server_datastore_datastore_proto_enumTypes,
		MessageInfos:      file_spire_server_datastore_datastore_proto_msgTypes,
	}.Build()
	File_spire_server_datastore_datastore_proto = out.File
	file_spire_server_datastore_datastore_proto_rawDesc = nil
	file_spire_server_datastore_datastore_proto_goTypes = nil
	file_spire_server_datastore_datastore_proto_depIdxs = nil
}
