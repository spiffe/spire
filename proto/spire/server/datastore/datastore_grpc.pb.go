// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package datastore

import (
	context "context"
	plugin "github.com/spiffe/spire/proto/spire/common/plugin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DataStoreClient is the client API for DataStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStoreClient interface {
	// Creates a bundle
	CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (*CreateBundleResponse, error)
	// Fetches a specific bundle
	FetchBundle(ctx context.Context, in *FetchBundleRequest, opts ...grpc.CallOption) (*FetchBundleResponse, error)
	// Counts bundles (optionally filtered)
	CountBundles(ctx context.Context, in *CountBundlesRequest, opts ...grpc.CallOption) (*CountBundlesResponse, error)
	// Lists bundles (optionally filtered)
	ListBundles(ctx context.Context, in *ListBundlesRequest, opts ...grpc.CallOption) (*ListBundlesResponse, error)
	// Updates a specific bundle
	UpdateBundle(ctx context.Context, in *UpdateBundleRequest, opts ...grpc.CallOption) (*UpdateBundleResponse, error)
	// Sets bundle contents (creates if it does not exist)
	SetBundle(ctx context.Context, in *SetBundleRequest, opts ...grpc.CallOption) (*SetBundleResponse, error)
	// Appends contents from a specific bundle (creates if it does not exist)
	AppendBundle(ctx context.Context, in *AppendBundleRequest, opts ...grpc.CallOption) (*AppendBundleResponse, error)
	// Deletes a specific bundle
	DeleteBundle(ctx context.Context, in *DeleteBundleRequest, opts ...grpc.CallOption) (*DeleteBundleResponse, error)
	// Prunes all expired certificates and JWT signing keys from a bundle
	PruneBundle(ctx context.Context, in *PruneBundleRequest, opts ...grpc.CallOption) (*PruneBundleResponse, error)
	// Creates an attested node
	CreateAttestedNode(ctx context.Context, in *CreateAttestedNodeRequest, opts ...grpc.CallOption) (*CreateAttestedNodeResponse, error)
	// Fetches a specific attested node
	FetchAttestedNode(ctx context.Context, in *FetchAttestedNodeRequest, opts ...grpc.CallOption) (*FetchAttestedNodeResponse, error)
	// Counts attested nodes
	CountAttestedNodes(ctx context.Context, in *CountAttestedNodesRequest, opts ...grpc.CallOption) (*CountAttestedNodesResponse, error)
	// Lists attested nodes (optionally filtered)
	ListAttestedNodes(ctx context.Context, in *ListAttestedNodesRequest, opts ...grpc.CallOption) (*ListAttestedNodesResponse, error)
	// Updates a specific attested node
	UpdateAttestedNode(ctx context.Context, in *UpdateAttestedNodeRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeResponse, error)
	// Deletes a specific attested node
	DeleteAttestedNode(ctx context.Context, in *DeleteAttestedNodeRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeResponse, error)
	// Sets the set of selectors for a specific node id
	SetNodeSelectors(ctx context.Context, in *SetNodeSelectorsRequest, opts ...grpc.CallOption) (*SetNodeSelectorsResponse, error)
	// Gets the set of node selectors for a specific node id
	GetNodeSelectors(ctx context.Context, in *GetNodeSelectorsRequest, opts ...grpc.CallOption) (*GetNodeSelectorsResponse, error)
	// Lists all node selectors
	ListNodeSelectors(ctx context.Context, in *ListNodeSelectorsRequest, opts ...grpc.CallOption) (*ListNodeSelectorsResponse, error)
	// Creates a registration entry
	CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error)
	// Fetches a specific registration entry
	FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error)
	// Counts registration entries
	CountRegistrationEntries(ctx context.Context, in *CountRegistrationEntriesRequest, opts ...grpc.CallOption) (*CountRegistrationEntriesResponse, error)
	// Lists registration entries (optionally filtered)
	ListRegistrationEntries(ctx context.Context, in *ListRegistrationEntriesRequest, opts ...grpc.CallOption) (*ListRegistrationEntriesResponse, error)
	// Updates a specific registration entry
	UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error)
	// Deletes a specific registration entry
	DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error)
	// Prunes all registration entries that expire before the specified timestamp
	PruneRegistrationEntries(ctx context.Context, in *PruneRegistrationEntriesRequest, opts ...grpc.CallOption) (*PruneRegistrationEntriesResponse, error)
	// Creates a join token
	CreateJoinToken(ctx context.Context, in *CreateJoinTokenRequest, opts ...grpc.CallOption) (*CreateJoinTokenResponse, error)
	// Fetches a specific join token
	FetchJoinToken(ctx context.Context, in *FetchJoinTokenRequest, opts ...grpc.CallOption) (*FetchJoinTokenResponse, error)
	// Delete a specific join token
	DeleteJoinToken(ctx context.Context, in *DeleteJoinTokenRequest, opts ...grpc.CallOption) (*DeleteJoinTokenResponse, error)
	// Prunes all join tokens that expire before the specified timestamp
	PruneJoinTokens(ctx context.Context, in *PruneJoinTokensRequest, opts ...grpc.CallOption) (*PruneJoinTokensResponse, error)
	// Applies the plugin configuration
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the installed plugin
	GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error)
}

type dataStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStoreClient(cc grpc.ClientConnInterface) DataStoreClient {
	return &dataStoreClient{cc}
}

func (c *dataStoreClient) CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (*CreateBundleResponse, error) {
	out := new(CreateBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchBundle(ctx context.Context, in *FetchBundleRequest, opts ...grpc.CallOption) (*FetchBundleResponse, error) {
	out := new(FetchBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CountBundles(ctx context.Context, in *CountBundlesRequest, opts ...grpc.CallOption) (*CountBundlesResponse, error) {
	out := new(CountBundlesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CountBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListBundles(ctx context.Context, in *ListBundlesRequest, opts ...grpc.CallOption) (*ListBundlesResponse, error) {
	out := new(ListBundlesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/ListBundles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateBundle(ctx context.Context, in *UpdateBundleRequest, opts ...grpc.CallOption) (*UpdateBundleResponse, error) {
	out := new(UpdateBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) SetBundle(ctx context.Context, in *SetBundleRequest, opts ...grpc.CallOption) (*SetBundleResponse, error) {
	out := new(SetBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/SetBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) AppendBundle(ctx context.Context, in *AppendBundleRequest, opts ...grpc.CallOption) (*AppendBundleResponse, error) {
	out := new(AppendBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/AppendBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteBundle(ctx context.Context, in *DeleteBundleRequest, opts ...grpc.CallOption) (*DeleteBundleResponse, error) {
	out := new(DeleteBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) PruneBundle(ctx context.Context, in *PruneBundleRequest, opts ...grpc.CallOption) (*PruneBundleResponse, error) {
	out := new(PruneBundleResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/PruneBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateAttestedNode(ctx context.Context, in *CreateAttestedNodeRequest, opts ...grpc.CallOption) (*CreateAttestedNodeResponse, error) {
	out := new(CreateAttestedNodeResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateAttestedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchAttestedNode(ctx context.Context, in *FetchAttestedNodeRequest, opts ...grpc.CallOption) (*FetchAttestedNodeResponse, error) {
	out := new(FetchAttestedNodeResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchAttestedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CountAttestedNodes(ctx context.Context, in *CountAttestedNodesRequest, opts ...grpc.CallOption) (*CountAttestedNodesResponse, error) {
	out := new(CountAttestedNodesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CountAttestedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListAttestedNodes(ctx context.Context, in *ListAttestedNodesRequest, opts ...grpc.CallOption) (*ListAttestedNodesResponse, error) {
	out := new(ListAttestedNodesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/ListAttestedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateAttestedNode(ctx context.Context, in *UpdateAttestedNodeRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeResponse, error) {
	out := new(UpdateAttestedNodeResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateAttestedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteAttestedNode(ctx context.Context, in *DeleteAttestedNodeRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeResponse, error) {
	out := new(DeleteAttestedNodeResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteAttestedNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) SetNodeSelectors(ctx context.Context, in *SetNodeSelectorsRequest, opts ...grpc.CallOption) (*SetNodeSelectorsResponse, error) {
	out := new(SetNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/SetNodeSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) GetNodeSelectors(ctx context.Context, in *GetNodeSelectorsRequest, opts ...grpc.CallOption) (*GetNodeSelectorsResponse, error) {
	out := new(GetNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/GetNodeSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListNodeSelectors(ctx context.Context, in *ListNodeSelectorsRequest, opts ...grpc.CallOption) (*ListNodeSelectorsResponse, error) {
	out := new(ListNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/ListNodeSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error) {
	out := new(CreateRegistrationEntryResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateRegistrationEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error) {
	out := new(FetchRegistrationEntryResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchRegistrationEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CountRegistrationEntries(ctx context.Context, in *CountRegistrationEntriesRequest, opts ...grpc.CallOption) (*CountRegistrationEntriesResponse, error) {
	out := new(CountRegistrationEntriesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CountRegistrationEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListRegistrationEntries(ctx context.Context, in *ListRegistrationEntriesRequest, opts ...grpc.CallOption) (*ListRegistrationEntriesResponse, error) {
	out := new(ListRegistrationEntriesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/ListRegistrationEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error) {
	out := new(UpdateRegistrationEntryResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateRegistrationEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error) {
	out := new(DeleteRegistrationEntryResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteRegistrationEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) PruneRegistrationEntries(ctx context.Context, in *PruneRegistrationEntriesRequest, opts ...grpc.CallOption) (*PruneRegistrationEntriesResponse, error) {
	out := new(PruneRegistrationEntriesResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/PruneRegistrationEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateJoinToken(ctx context.Context, in *CreateJoinTokenRequest, opts ...grpc.CallOption) (*CreateJoinTokenResponse, error) {
	out := new(CreateJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateJoinToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchJoinToken(ctx context.Context, in *FetchJoinTokenRequest, opts ...grpc.CallOption) (*FetchJoinTokenResponse, error) {
	out := new(FetchJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchJoinToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteJoinToken(ctx context.Context, in *DeleteJoinTokenRequest, opts ...grpc.CallOption) (*DeleteJoinTokenResponse, error) {
	out := new(DeleteJoinTokenResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteJoinToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) PruneJoinTokens(ctx context.Context, in *PruneJoinTokensRequest, opts ...grpc.CallOption) (*PruneJoinTokensResponse, error) {
	out := new(PruneJoinTokensResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/PruneJoinTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) GetPluginInfo(ctx context.Context, in *plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*plugin.GetPluginInfoResponse, error) {
	out := new(plugin.GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/spire.server.datastore.DataStore/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStoreServer is the server API for DataStore service.
// All implementations must embed UnimplementedDataStoreServer
// for forward compatibility
type DataStoreServer interface {
	// Creates a bundle
	CreateBundle(context.Context, *CreateBundleRequest) (*CreateBundleResponse, error)
	// Fetches a specific bundle
	FetchBundle(context.Context, *FetchBundleRequest) (*FetchBundleResponse, error)
	// Counts bundles (optionally filtered)
	CountBundles(context.Context, *CountBundlesRequest) (*CountBundlesResponse, error)
	// Lists bundles (optionally filtered)
	ListBundles(context.Context, *ListBundlesRequest) (*ListBundlesResponse, error)
	// Updates a specific bundle
	UpdateBundle(context.Context, *UpdateBundleRequest) (*UpdateBundleResponse, error)
	// Sets bundle contents (creates if it does not exist)
	SetBundle(context.Context, *SetBundleRequest) (*SetBundleResponse, error)
	// Appends contents from a specific bundle (creates if it does not exist)
	AppendBundle(context.Context, *AppendBundleRequest) (*AppendBundleResponse, error)
	// Deletes a specific bundle
	DeleteBundle(context.Context, *DeleteBundleRequest) (*DeleteBundleResponse, error)
	// Prunes all expired certificates and JWT signing keys from a bundle
	PruneBundle(context.Context, *PruneBundleRequest) (*PruneBundleResponse, error)
	// Creates an attested node
	CreateAttestedNode(context.Context, *CreateAttestedNodeRequest) (*CreateAttestedNodeResponse, error)
	// Fetches a specific attested node
	FetchAttestedNode(context.Context, *FetchAttestedNodeRequest) (*FetchAttestedNodeResponse, error)
	// Counts attested nodes
	CountAttestedNodes(context.Context, *CountAttestedNodesRequest) (*CountAttestedNodesResponse, error)
	// Lists attested nodes (optionally filtered)
	ListAttestedNodes(context.Context, *ListAttestedNodesRequest) (*ListAttestedNodesResponse, error)
	// Updates a specific attested node
	UpdateAttestedNode(context.Context, *UpdateAttestedNodeRequest) (*UpdateAttestedNodeResponse, error)
	// Deletes a specific attested node
	DeleteAttestedNode(context.Context, *DeleteAttestedNodeRequest) (*DeleteAttestedNodeResponse, error)
	// Sets the set of selectors for a specific node id
	SetNodeSelectors(context.Context, *SetNodeSelectorsRequest) (*SetNodeSelectorsResponse, error)
	// Gets the set of node selectors for a specific node id
	GetNodeSelectors(context.Context, *GetNodeSelectorsRequest) (*GetNodeSelectorsResponse, error)
	// Lists all node selectors
	ListNodeSelectors(context.Context, *ListNodeSelectorsRequest) (*ListNodeSelectorsResponse, error)
	// Creates a registration entry
	CreateRegistrationEntry(context.Context, *CreateRegistrationEntryRequest) (*CreateRegistrationEntryResponse, error)
	// Fetches a specific registration entry
	FetchRegistrationEntry(context.Context, *FetchRegistrationEntryRequest) (*FetchRegistrationEntryResponse, error)
	// Counts registration entries
	CountRegistrationEntries(context.Context, *CountRegistrationEntriesRequest) (*CountRegistrationEntriesResponse, error)
	// Lists registration entries (optionally filtered)
	ListRegistrationEntries(context.Context, *ListRegistrationEntriesRequest) (*ListRegistrationEntriesResponse, error)
	// Updates a specific registration entry
	UpdateRegistrationEntry(context.Context, *UpdateRegistrationEntryRequest) (*UpdateRegistrationEntryResponse, error)
	// Deletes a specific registration entry
	DeleteRegistrationEntry(context.Context, *DeleteRegistrationEntryRequest) (*DeleteRegistrationEntryResponse, error)
	// Prunes all registration entries that expire before the specified timestamp
	PruneRegistrationEntries(context.Context, *PruneRegistrationEntriesRequest) (*PruneRegistrationEntriesResponse, error)
	// Creates a join token
	CreateJoinToken(context.Context, *CreateJoinTokenRequest) (*CreateJoinTokenResponse, error)
	// Fetches a specific join token
	FetchJoinToken(context.Context, *FetchJoinTokenRequest) (*FetchJoinTokenResponse, error)
	// Delete a specific join token
	DeleteJoinToken(context.Context, *DeleteJoinTokenRequest) (*DeleteJoinTokenResponse, error)
	// Prunes all join tokens that expire before the specified timestamp
	PruneJoinTokens(context.Context, *PruneJoinTokensRequest) (*PruneJoinTokensResponse, error)
	// Applies the plugin configuration
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
	// Returns the version and related metadata of the installed plugin
	GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error)
	mustEmbedUnimplementedDataStoreServer()
}

// UnimplementedDataStoreServer must be embedded to have forward compatible implementations.
type UnimplementedDataStoreServer struct {
}

func (UnimplementedDataStoreServer) CreateBundle(context.Context, *CreateBundleRequest) (*CreateBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBundle not implemented")
}
func (UnimplementedDataStoreServer) FetchBundle(context.Context, *FetchBundleRequest) (*FetchBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBundle not implemented")
}
func (UnimplementedDataStoreServer) CountBundles(context.Context, *CountBundlesRequest) (*CountBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBundles not implemented")
}
func (UnimplementedDataStoreServer) ListBundles(context.Context, *ListBundlesRequest) (*ListBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBundles not implemented")
}
func (UnimplementedDataStoreServer) UpdateBundle(context.Context, *UpdateBundleRequest) (*UpdateBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBundle not implemented")
}
func (UnimplementedDataStoreServer) SetBundle(context.Context, *SetBundleRequest) (*SetBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBundle not implemented")
}
func (UnimplementedDataStoreServer) AppendBundle(context.Context, *AppendBundleRequest) (*AppendBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendBundle not implemented")
}
func (UnimplementedDataStoreServer) DeleteBundle(context.Context, *DeleteBundleRequest) (*DeleteBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBundle not implemented")
}
func (UnimplementedDataStoreServer) PruneBundle(context.Context, *PruneBundleRequest) (*PruneBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneBundle not implemented")
}
func (UnimplementedDataStoreServer) CreateAttestedNode(context.Context, *CreateAttestedNodeRequest) (*CreateAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttestedNode not implemented")
}
func (UnimplementedDataStoreServer) FetchAttestedNode(context.Context, *FetchAttestedNodeRequest) (*FetchAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAttestedNode not implemented")
}
func (UnimplementedDataStoreServer) CountAttestedNodes(context.Context, *CountAttestedNodesRequest) (*CountAttestedNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAttestedNodes not implemented")
}
func (UnimplementedDataStoreServer) ListAttestedNodes(context.Context, *ListAttestedNodesRequest) (*ListAttestedNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttestedNodes not implemented")
}
func (UnimplementedDataStoreServer) UpdateAttestedNode(context.Context, *UpdateAttestedNodeRequest) (*UpdateAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttestedNode not implemented")
}
func (UnimplementedDataStoreServer) DeleteAttestedNode(context.Context, *DeleteAttestedNodeRequest) (*DeleteAttestedNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttestedNode not implemented")
}
func (UnimplementedDataStoreServer) SetNodeSelectors(context.Context, *SetNodeSelectorsRequest) (*SetNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeSelectors not implemented")
}
func (UnimplementedDataStoreServer) GetNodeSelectors(context.Context, *GetNodeSelectorsRequest) (*GetNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSelectors not implemented")
}
func (UnimplementedDataStoreServer) ListNodeSelectors(context.Context, *ListNodeSelectorsRequest) (*ListNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodeSelectors not implemented")
}
func (UnimplementedDataStoreServer) CreateRegistrationEntry(context.Context, *CreateRegistrationEntryRequest) (*CreateRegistrationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistrationEntry not implemented")
}
func (UnimplementedDataStoreServer) FetchRegistrationEntry(context.Context, *FetchRegistrationEntryRequest) (*FetchRegistrationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRegistrationEntry not implemented")
}
func (UnimplementedDataStoreServer) CountRegistrationEntries(context.Context, *CountRegistrationEntriesRequest) (*CountRegistrationEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRegistrationEntries not implemented")
}
func (UnimplementedDataStoreServer) ListRegistrationEntries(context.Context, *ListRegistrationEntriesRequest) (*ListRegistrationEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistrationEntries not implemented")
}
func (UnimplementedDataStoreServer) UpdateRegistrationEntry(context.Context, *UpdateRegistrationEntryRequest) (*UpdateRegistrationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistrationEntry not implemented")
}
func (UnimplementedDataStoreServer) DeleteRegistrationEntry(context.Context, *DeleteRegistrationEntryRequest) (*DeleteRegistrationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistrationEntry not implemented")
}
func (UnimplementedDataStoreServer) PruneRegistrationEntries(context.Context, *PruneRegistrationEntriesRequest) (*PruneRegistrationEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneRegistrationEntries not implemented")
}
func (UnimplementedDataStoreServer) CreateJoinToken(context.Context, *CreateJoinTokenRequest) (*CreateJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJoinToken not implemented")
}
func (UnimplementedDataStoreServer) FetchJoinToken(context.Context, *FetchJoinTokenRequest) (*FetchJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchJoinToken not implemented")
}
func (UnimplementedDataStoreServer) DeleteJoinToken(context.Context, *DeleteJoinTokenRequest) (*DeleteJoinTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJoinToken not implemented")
}
func (UnimplementedDataStoreServer) PruneJoinTokens(context.Context, *PruneJoinTokensRequest) (*PruneJoinTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneJoinTokens not implemented")
}
func (UnimplementedDataStoreServer) Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedDataStoreServer) GetPluginInfo(context.Context, *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}
func (UnimplementedDataStoreServer) mustEmbedUnimplementedDataStoreServer() {}

// UnsafeDataStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStoreServer will
// result in compilation errors.
type UnsafeDataStoreServer interface {
	mustEmbedUnimplementedDataStoreServer()
}

func RegisterDataStoreServer(s grpc.ServiceRegistrar, srv DataStoreServer) {
	s.RegisterService(&_DataStore_serviceDesc, srv)
}

func _DataStore_CreateBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateBundle(ctx, req.(*CreateBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchBundle(ctx, req.(*FetchBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CountBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CountBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CountBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CountBundles(ctx, req.(*CountBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListBundles(ctx, req.(*ListBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateBundle(ctx, req.(*UpdateBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_SetBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).SetBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/SetBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).SetBundle(ctx, req.(*SetBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_AppendBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).AppendBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/AppendBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).AppendBundle(ctx, req.(*AppendBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteBundle(ctx, req.(*DeleteBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_PruneBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).PruneBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/PruneBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).PruneBundle(ctx, req.(*PruneBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateAttestedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateAttestedNode(ctx, req.(*CreateAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchAttestedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchAttestedNode(ctx, req.(*FetchAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CountAttestedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAttestedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CountAttestedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CountAttestedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CountAttestedNodes(ctx, req.(*CountAttestedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListAttestedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttestedNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListAttestedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListAttestedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListAttestedNodes(ctx, req.(*ListAttestedNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateAttestedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateAttestedNode(ctx, req.(*UpdateAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteAttestedNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttestedNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteAttestedNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteAttestedNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteAttestedNode(ctx, req.(*DeleteAttestedNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_SetNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).SetNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/SetNodeSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).SetNodeSelectors(ctx, req.(*SetNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_GetNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).GetNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/GetNodeSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).GetNodeSelectors(ctx, req.(*GetNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListNodeSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListNodeSelectors(ctx, req.(*ListNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, req.(*CreateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, req.(*FetchRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CountRegistrationEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CountRegistrationEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CountRegistrationEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CountRegistrationEntries(ctx, req.(*CountRegistrationEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListRegistrationEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistrationEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListRegistrationEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListRegistrationEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListRegistrationEntries(ctx, req.(*ListRegistrationEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, req.(*UpdateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, req.(*DeleteRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_PruneRegistrationEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneRegistrationEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).PruneRegistrationEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/PruneRegistrationEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).PruneRegistrationEntries(ctx, req.(*PruneRegistrationEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateJoinToken(ctx, req.(*CreateJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchJoinToken(ctx, req.(*FetchJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJoinTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteJoinToken(ctx, req.(*DeleteJoinTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_PruneJoinTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneJoinTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).PruneJoinTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/PruneJoinTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).PruneJoinTokens(ctx, req.(*PruneJoinTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).GetPluginInfo(ctx, req.(*plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.datastore.DataStore",
	HandlerType: (*DataStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBundle",
			Handler:    _DataStore_CreateBundle_Handler,
		},
		{
			MethodName: "FetchBundle",
			Handler:    _DataStore_FetchBundle_Handler,
		},
		{
			MethodName: "CountBundles",
			Handler:    _DataStore_CountBundles_Handler,
		},
		{
			MethodName: "ListBundles",
			Handler:    _DataStore_ListBundles_Handler,
		},
		{
			MethodName: "UpdateBundle",
			Handler:    _DataStore_UpdateBundle_Handler,
		},
		{
			MethodName: "SetBundle",
			Handler:    _DataStore_SetBundle_Handler,
		},
		{
			MethodName: "AppendBundle",
			Handler:    _DataStore_AppendBundle_Handler,
		},
		{
			MethodName: "DeleteBundle",
			Handler:    _DataStore_DeleteBundle_Handler,
		},
		{
			MethodName: "PruneBundle",
			Handler:    _DataStore_PruneBundle_Handler,
		},
		{
			MethodName: "CreateAttestedNode",
			Handler:    _DataStore_CreateAttestedNode_Handler,
		},
		{
			MethodName: "FetchAttestedNode",
			Handler:    _DataStore_FetchAttestedNode_Handler,
		},
		{
			MethodName: "CountAttestedNodes",
			Handler:    _DataStore_CountAttestedNodes_Handler,
		},
		{
			MethodName: "ListAttestedNodes",
			Handler:    _DataStore_ListAttestedNodes_Handler,
		},
		{
			MethodName: "UpdateAttestedNode",
			Handler:    _DataStore_UpdateAttestedNode_Handler,
		},
		{
			MethodName: "DeleteAttestedNode",
			Handler:    _DataStore_DeleteAttestedNode_Handler,
		},
		{
			MethodName: "SetNodeSelectors",
			Handler:    _DataStore_SetNodeSelectors_Handler,
		},
		{
			MethodName: "GetNodeSelectors",
			Handler:    _DataStore_GetNodeSelectors_Handler,
		},
		{
			MethodName: "ListNodeSelectors",
			Handler:    _DataStore_ListNodeSelectors_Handler,
		},
		{
			MethodName: "CreateRegistrationEntry",
			Handler:    _DataStore_CreateRegistrationEntry_Handler,
		},
		{
			MethodName: "FetchRegistrationEntry",
			Handler:    _DataStore_FetchRegistrationEntry_Handler,
		},
		{
			MethodName: "CountRegistrationEntries",
			Handler:    _DataStore_CountRegistrationEntries_Handler,
		},
		{
			MethodName: "ListRegistrationEntries",
			Handler:    _DataStore_ListRegistrationEntries_Handler,
		},
		{
			MethodName: "UpdateRegistrationEntry",
			Handler:    _DataStore_UpdateRegistrationEntry_Handler,
		},
		{
			MethodName: "DeleteRegistrationEntry",
			Handler:    _DataStore_DeleteRegistrationEntry_Handler,
		},
		{
			MethodName: "PruneRegistrationEntries",
			Handler:    _DataStore_PruneRegistrationEntries_Handler,
		},
		{
			MethodName: "CreateJoinToken",
			Handler:    _DataStore_CreateJoinToken_Handler,
		},
		{
			MethodName: "FetchJoinToken",
			Handler:    _DataStore_FetchJoinToken_Handler,
		},
		{
			MethodName: "DeleteJoinToken",
			Handler:    _DataStore_DeleteJoinToken_Handler,
		},
		{
			MethodName: "PruneJoinTokens",
			Handler:    _DataStore_PruneJoinTokens_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _DataStore_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _DataStore_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spire/server/datastore/datastore.proto",
}
