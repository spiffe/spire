// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	In                   string   `protobuf:"bytes,1,opt,name=in,proto3" json:"in,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetIn() string {
	if m != nil {
		return m.In
	}
	return ""
}

type Response struct {
	Out                  string   `protobuf:"bytes,1,opt,name=out,proto3" json:"out,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOut() string {
	if m != nil {
		return m.Out
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "test.Request")
	proto.RegisterType((*Response)(nil), "test.Response")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0xe9, 0x2a, 0xab, 0x3b, 0x8b, 0xbb, 0x92, 0x93, 0x2e, 0x1e, 0x64, 0x41, 0x11, 0x94,
	0x44, 0xea, 0x45, 0xf0, 0x66, 0x2f, 0x1e, 0xa5, 0x7a, 0xda, 0x9b, 0x5b, 0xa6, 0x35, 0xd0, 0x66,
	0x62, 0xfe, 0xf8, 0x26, 0xbe, 0xaf, 0x24, 0x4d, 0xd4, 0xd3, 0x7a, 0x9a, 0xf9, 0x75, 0x66, 0x3e,
	0x3e, 0x1a, 0x00, 0x87, 0xd6, 0x71, 0x6d, 0xc8, 0x11, 0xdb, 0x0f, 0xfd, 0xea, 0xbe, 0x93, 0xee,
	0xdd, 0x6f, 0x79, 0x43, 0x83, 0xb0, 0x5a, 0xb6, 0x2d, 0x86, 0x62, 0x50, 0xc4, 0x25, 0xd1, 0xd0,
	0x30, 0x90, 0x12, 0xba, 0xf7, 0x9d, 0xcc, 0x65, 0xbc, 0x5f, 0x9f, 0xc2, 0x41, 0x8d, 0x1f, 0x1e,
	0xad, 0x63, 0x0b, 0x98, 0x48, 0x75, 0x52, 0x9c, 0x17, 0x57, 0xb3, 0x7a, 0x22, 0xd5, 0xfa, 0x0c,
	0x0e, 0x6b, 0xb4, 0x9a, 0x94, 0x45, 0x76, 0x0c, 0x7b, 0xe4, 0x5d, 0x1a, 0x86, 0xb6, 0xfc, 0x2a,
	0x00, 0x5e, 0xd1, 0xba, 0xe7, 0x48, 0x63, 0xd7, 0x00, 0xd5, 0x5b, 0xdf, 0xa7, 0x74, 0xc4, 0xa3,
	0x62, 0x22, 0xaf, 0x16, 0x39, 0x26, 0xda, 0x06, 0x66, 0x15, 0xa9, 0x56, 0x76, 0xde, 0x20, 0xbb,
	0xe0, 0x51, 0x95, 0x8f, 0x92, 0x3c, 0xd9, 0xfd, 0xcc, 0x33, 0xe3, 0xf2, 0xbf, 0xb5, 0x91, 0x5d,
	0x3e, 0xc0, 0x3c, 0x68, 0xbd, 0xa0, 0xf9, 0x94, 0x0d, 0xb2, 0x1b, 0x98, 0x07, 0xaf, 0x1c, 0x77,
	0x8b, 0x95, 0x15, 0x2c, 0xc3, 0xf1, 0x13, 0xfd, 0x02, 0x6e, 0x61, 0x19, 0x00, 0x7f, 0x3f, 0xed,
	0x86, 0x3c, 0x4e, 0x37, 0xf1, 0x51, 0xb6, 0xd3, 0xf8, 0x87, 0xef, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x9e, 0x00, 0xb1, 0xff, 0xaf, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestPluginClient is the client API for TestPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestPluginClient interface {
	CallPlugin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error)
}

type testPluginClient struct {
	cc *grpc.ClientConn
}

func NewTestPluginClient(cc *grpc.ClientConn) TestPluginClient {
	return &testPluginClient{cc}
}

func (c *testPluginClient) CallPlugin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/test.TestPlugin/CallPlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPluginClient) Configure(ctx context.Context, in *plugin.ConfigureRequest, opts ...grpc.CallOption) (*plugin.ConfigureResponse, error) {
	out := new(plugin.ConfigureResponse)
	err := c.cc.Invoke(ctx, "/test.TestPlugin/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestPluginServer is the server API for TestPlugin service.
type TestPluginServer interface {
	CallPlugin(context.Context, *Request) (*Response, error)
	Configure(context.Context, *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error)
}

func RegisterTestPluginServer(s *grpc.Server, srv TestPluginServer) {
	s.RegisterService(&_TestPlugin_serviceDesc, srv)
}

func _TestPlugin_CallPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPluginServer).CallPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestPlugin/CallPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPluginServer).CallPlugin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPlugin_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPluginServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestPlugin/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPluginServer).Configure(ctx, req.(*plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestPlugin",
	HandlerType: (*TestPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallPlugin",
			Handler:    _TestPlugin_CallPlugin_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _TestPlugin_Configure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	CallService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) CallService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/test.TestService/CallService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	CallService(context.Context, *Request) (*Response, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_CallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).CallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/CallService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).CallService(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallService",
			Handler:    _TestService_CallService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

// TestHostServiceClient is the client API for TestHostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestHostServiceClient interface {
	CallHostService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type testHostServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestHostServiceClient(cc *grpc.ClientConn) TestHostServiceClient {
	return &testHostServiceClient{cc}
}

func (c *testHostServiceClient) CallHostService(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/test.TestHostService/CallHostService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestHostServiceServer is the server API for TestHostService service.
type TestHostServiceServer interface {
	CallHostService(context.Context, *Request) (*Response, error)
}

func RegisterTestHostServiceServer(s *grpc.Server, srv TestHostServiceServer) {
	s.RegisterService(&_TestHostService_serviceDesc, srv)
}

func _TestHostService_CallHostService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestHostServiceServer).CallHostService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestHostService/CallHostService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestHostServiceServer).CallHostService(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestHostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestHostService",
	HandlerType: (*TestHostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallHostService",
			Handler:    _TestHostService_CallHostService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
