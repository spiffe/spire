// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/helpers (interfaces: PluginCatalog)

package sriplugin

import (
	gomock "github.com/golang/mock/gomock"
	go_plugin "github.com/hashicorp/go-plugin"
	reflect "reflect"
)

// MockPluginCatalogInterface is a mock of PluginCatalog interface
type MockPluginCatalogInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPluginCatalogInterfaceMockRecorder
}

// MockPluginCatalogInterfaceMockRecorder is the mock recorder for MockPluginCatalogInterface
type MockPluginCatalogInterfaceMockRecorder struct {
	mock *MockPluginCatalogInterface
}

// NewMockPluginCatalogInterface creates a new mock instance
func NewMockPluginCatalogInterface(ctrl *gomock.Controller) *MockPluginCatalogInterface {
	mock := &MockPluginCatalogInterface{ctrl: ctrl}
	mock.recorder = &MockPluginCatalogInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPluginCatalogInterface) EXPECT() *MockPluginCatalogInterfaceMockRecorder {
	return _m.recorder
}

// ConfigureClients mocks base method
func (_m *MockPluginCatalogInterface) ConfigureClients() error {
	ret := _m.ctrl.Call(_m, "ConfigureClients")
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureClients indicates an expected call of ConfigureClients
func (_mr *MockPluginCatalogInterfaceMockRecorder) ConfigureClients() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ConfigureClients", reflect.TypeOf((*MockPluginCatalogInterface)(nil).ConfigureClients))
}

// GetAllPlugins mocks base method
func (_m *MockPluginCatalogInterface) GetAllPlugins() map[string]*PluginClients {
	ret := _m.ctrl.Call(_m, "GetAllPlugins")
	ret0, _ := ret[0].(map[string]*PluginClients)
	return ret0
}

// GetAllPlugins indicates an expected call of GetAllPlugins
func (_mr *MockPluginCatalogInterfaceMockRecorder) GetAllPlugins() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetAllPlugins", reflect.TypeOf((*MockPluginCatalogInterface)(nil).GetAllPlugins))
}

// GetPluginByName mocks base method
func (_m *MockPluginCatalogInterface) GetPluginByName(_param0 string) interface{} {
	ret := _m.ctrl.Call(_m, "GetPluginByName", _param0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetPluginByName indicates an expected call of GetPluginByName
func (_mr *MockPluginCatalogInterfaceMockRecorder) GetPluginByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPluginByName", reflect.TypeOf((*MockPluginCatalogInterface)(nil).GetPluginByName), arg0)
}

// GetPluginsByType mocks base method
func (_m *MockPluginCatalogInterface) GetPluginsByType(_param0 string) []interface{} {
	ret := _m.ctrl.Call(_m, "GetPluginsByType", _param0)
	ret0, _ := ret[0].([]interface{})
	return ret0
}

// GetPluginsByType indicates an expected call of GetPluginsByType
func (_mr *MockPluginCatalogInterfaceMockRecorder) GetPluginsByType(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPluginsByType", reflect.TypeOf((*MockPluginCatalogInterface)(nil).GetPluginsByType), arg0)
}

// Run mocks base method
func (_m *MockPluginCatalogInterface) Run() error {
	ret := _m.ctrl.Call(_m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (_mr *MockPluginCatalogInterfaceMockRecorder) Run() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Run", reflect.TypeOf((*MockPluginCatalogInterface)(nil).Run))
}

// SetMaxPluginTypeMap mocks base method
func (_m *MockPluginCatalogInterface) SetMaxPluginTypeMap(_param0 map[string]int) {
	_m.ctrl.Call(_m, "SetMaxPluginTypeMap", _param0)
}

// SetMaxPluginTypeMap indicates an expected call of SetMaxPluginTypeMap
func (_mr *MockPluginCatalogInterfaceMockRecorder) SetMaxPluginTypeMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetMaxPluginTypeMap", reflect.TypeOf((*MockPluginCatalogInterface)(nil).SetMaxPluginTypeMap), arg0)
}

// SetPluginTypeMap mocks base method
func (_m *MockPluginCatalogInterface) SetPluginTypeMap(_param0 map[string]go_plugin.Plugin) {
	_m.ctrl.Call(_m, "SetPluginTypeMap", _param0)
}

// SetPluginTypeMap indicates an expected call of SetPluginTypeMap
func (_mr *MockPluginCatalogInterfaceMockRecorder) SetPluginTypeMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetPluginTypeMap", reflect.TypeOf((*MockPluginCatalogInterface)(nil).SetPluginTypeMap), arg0)
}

// Stop mocks base method
func (_m *MockPluginCatalogInterface) Stop() {
	_m.ctrl.Call(_m, "Stop")
}

// Stop indicates an expected call of Stop
func (_mr *MockPluginCatalogInterfaceMockRecorder) Stop() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Stop", reflect.TypeOf((*MockPluginCatalogInterface)(nil).Stop))
}

// initClients mocks base method
func (_m *MockPluginCatalogInterface) initClients() error {
	ret := _m.ctrl.Call(_m, "initClients")
	ret0, _ := ret[0].(error)
	return ret0
}

// initClients indicates an expected call of initClients
func (_mr *MockPluginCatalogInterfaceMockRecorder) initClients() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "initClients", reflect.TypeOf((*MockPluginCatalogInterface)(nil).initClients))
}

// loadConfig mocks base method
func (_m *MockPluginCatalogInterface) loadConfig() error {
	ret := _m.ctrl.Call(_m, "loadConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// loadConfig indicates an expected call of loadConfig
func (_mr *MockPluginCatalogInterfaceMockRecorder) loadConfig() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "loadConfig", reflect.TypeOf((*MockPluginCatalogInterface)(nil).loadConfig))
}
