// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/plugin/upstreamca/aws/pca_client.go

// Package aws is a generated GoMock package.
package aws

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	acmpca "github.com/aws/aws-sdk-go/service/acmpca"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPCAClient is a mock of PCAClient interface
type MockPCAClient struct {
	ctrl     *gomock.Controller
	recorder *MockPCAClientMockRecorder
}

// MockPCAClientMockRecorder is the mock recorder for MockPCAClient
type MockPCAClientMockRecorder struct {
	mock *MockPCAClient
}

// NewMockPCAClient creates a new mock instance
func NewMockPCAClient(ctrl *gomock.Controller) *MockPCAClient {
	mock := &MockPCAClient{ctrl: ctrl}
	mock.recorder = &MockPCAClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPCAClient) EXPECT() *MockPCAClientMockRecorder {
	return m.recorder
}

// DescribeCertificateAuthorityWithContext mocks base method
func (m *MockPCAClient) DescribeCertificateAuthorityWithContext(arg0 aws.Context, arg1 *acmpca.DescribeCertificateAuthorityInput, arg2 ...request.Option) (*acmpca.DescribeCertificateAuthorityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeCertificateAuthorityWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.DescribeCertificateAuthorityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeCertificateAuthorityWithContext indicates an expected call of DescribeCertificateAuthorityWithContext
func (mr *MockPCAClientMockRecorder) DescribeCertificateAuthorityWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeCertificateAuthorityWithContext", reflect.TypeOf((*MockPCAClient)(nil).DescribeCertificateAuthorityWithContext), varargs...)
}

// IssueCertificateWithContext mocks base method
func (m *MockPCAClient) IssueCertificateWithContext(arg0 aws.Context, arg1 *acmpca.IssueCertificateInput, arg2 ...request.Option) (*acmpca.IssueCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.IssueCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificateWithContext indicates an expected call of IssueCertificateWithContext
func (mr *MockPCAClientMockRecorder) IssueCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificateWithContext", reflect.TypeOf((*MockPCAClient)(nil).IssueCertificateWithContext), varargs...)
}

// WaitUntilCertificateIssuedWithContext mocks base method
func (m *MockPCAClient) WaitUntilCertificateIssuedWithContext(arg0 aws.Context, arg1 *acmpca.GetCertificateInput, arg2 ...request.WaiterOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilCertificateIssuedWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilCertificateIssuedWithContext indicates an expected call of WaitUntilCertificateIssuedWithContext
func (mr *MockPCAClientMockRecorder) WaitUntilCertificateIssuedWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilCertificateIssuedWithContext", reflect.TypeOf((*MockPCAClient)(nil).WaitUntilCertificateIssuedWithContext), varargs...)
}

// GetCertificateWithContext mocks base method
func (m *MockPCAClient) GetCertificateWithContext(arg0 aws.Context, arg1 *acmpca.GetCertificateInput, arg2 ...request.Option) (*acmpca.GetCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCertificateWithContext", varargs...)
	ret0, _ := ret[0].(*acmpca.GetCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateWithContext indicates an expected call of GetCertificateWithContext
func (mr *MockPCAClientMockRecorder) GetCertificateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateWithContext", reflect.TypeOf((*MockPCAClient)(nil).GetCertificateWithContext), varargs...)
}
