/**
A workload uses this API to retrieve a list of identities that it should be allowed
to represent itself as (SPIFFE IDs) as well as, optionally, documents (in the form of
SPIFFE Verifiable Identity Documents (SVID) ) that can be used to prove those identities to other systems.

Finally, the API can also be used to retrieve trust bundles that can be used to
verify SVIDs from other SPIFFE-identified workloads.
*/
syntax = "proto3";
package workload;

service Workload {
    ///Depending on what the SPIFFEId is associated with,
    ///it requests SVID and cert bundle of the control plane corresponding to the SPIFFEId
    ///or requests trusted external CA cert bundles corresponding to the SPIFFEId.
    rpc FetchBundles(SpiffeId) returns (Bundles);
    ///Requests all SVIDs and cert bundle of the control plane and all trusted external CA cert bundles associated with the workload.
    rpc FetchAllBundles(Empty) returns (Bundles);
}

/**Depending on the context it represents a Workload's SVID and its associated information
or a cert bundle of a remote control plane for the purposes of trusting remote workloads. */
message WorkloadEntry {
    string spiffe_id = 1; /// SPIFFE Id corresponding to the SVID.
    bytes svid = 2; /// ASN.1 DER encoded SVID.
    bytes svid_private_key = 3; /// Private key corresponding to the SVID.
    bytes ca_trust_bundle = 4; /// ASN.1 DER encoded cert bundle.
    int32 ttl = 5; /// Controls how often a workload associated with this SVID or cert bundle should check back for updates.
}

/**Represents and SPIFFEId that depending on its association it could be used to
request for a SVID and the control plane's cert bundle or request for a Federated cert Bundle.*/
message SpiffeId {
    string id = 1;
}

/**Represents a list of WorkloadEntry and a Control Plane bundle.*/
message Bundles {
    repeated WorkloadEntry workload_entry = 1; /// Workload's SVID Entry /// trusted external CA cert bundles of foreign control planes
    bytes control_plane_bundle = 2; /// Control Plane's trusted cert bundle
}

/**
 * @exclude Represents a message with no fields
 */
message Empty {  }
