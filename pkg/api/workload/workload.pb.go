// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workload.proto

/*
Package workload is a generated protocol buffer package.

It is generated from these files:
	workload.proto

It has these top-level messages:
	WorkloadEntry
	SpiffeId
	Bundles
*/
package workload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/sri/pkg/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty from public import github.com/spiffe/sri/pkg/common/common.proto
type Empty common.Empty

func (m *Empty) Reset()         { (*common.Empty)(m).Reset() }
func (m *Empty) String() string { return (*common.Empty)(m).String() }
func (*Empty) ProtoMessage()    {}

// AttestedData from public import github.com/spiffe/sri/pkg/common/common.proto
type AttestedData common.AttestedData

func (m *AttestedData) Reset()          { (*common.AttestedData)(m).Reset() }
func (m *AttestedData) String() string  { return (*common.AttestedData)(m).String() }
func (*AttestedData) ProtoMessage()     {}
func (m *AttestedData) GetType() string { return (*common.AttestedData)(m).GetType() }
func (m *AttestedData) GetData() string { return (*common.AttestedData)(m).GetData() }

// Selector from public import github.com/spiffe/sri/pkg/common/common.proto
type Selector common.Selector

func (m *Selector) Reset()           { (*common.Selector)(m).Reset() }
func (m *Selector) String() string   { return (*common.Selector)(m).String() }
func (*Selector) ProtoMessage()      {}
func (m *Selector) GetType() string  { return (*common.Selector)(m).GetType() }
func (m *Selector) GetValue() string { return (*common.Selector)(m).GetValue() }

// Selectors from public import github.com/spiffe/sri/pkg/common/common.proto
type Selectors common.Selectors

func (m *Selectors) Reset()         { (*common.Selectors)(m).Reset() }
func (m *Selectors) String() string { return (*common.Selectors)(m).String() }
func (*Selectors) ProtoMessage()    {}
func (m *Selectors) GetEntries() []*Selector {
	o := (*common.Selectors)(m).GetEntries()
	if o == nil {
		return nil
	}
	s := make([]*Selector, len(o))
	for i, x := range o {
		s[i] = (*Selector)(x)
	}
	return s
}

// RegistrationEntry from public import github.com/spiffe/sri/pkg/common/common.proto
type RegistrationEntry common.RegistrationEntry

func (m *RegistrationEntry) Reset()         { (*common.RegistrationEntry)(m).Reset() }
func (m *RegistrationEntry) String() string { return (*common.RegistrationEntry)(m).String() }
func (*RegistrationEntry) ProtoMessage()    {}
func (m *RegistrationEntry) GetSelectors() []*Selector {
	o := (*common.RegistrationEntry)(m).GetSelectors()
	if o == nil {
		return nil
	}
	s := make([]*Selector, len(o))
	for i, x := range o {
		s[i] = (*Selector)(x)
	}
	return s
}
func (m *RegistrationEntry) GetParentId() string { return (*common.RegistrationEntry)(m).GetParentId() }
func (m *RegistrationEntry) GetSpiffeId() string { return (*common.RegistrationEntry)(m).GetSpiffeId() }
func (m *RegistrationEntry) GetTtl() int32       { return (*common.RegistrationEntry)(m).GetTtl() }
func (m *RegistrationEntry) GetFbSpiffeIds() []string {
	return (*common.RegistrationEntry)(m).GetFbSpiffeIds()
}

// RegistrationEntries from public import github.com/spiffe/sri/pkg/common/common.proto
type RegistrationEntries common.RegistrationEntries

func (m *RegistrationEntries) Reset()         { (*common.RegistrationEntries)(m).Reset() }
func (m *RegistrationEntries) String() string { return (*common.RegistrationEntries)(m).String() }
func (*RegistrationEntries) ProtoMessage()    {}
func (m *RegistrationEntries) GetEntries() []*RegistrationEntry {
	o := (*common.RegistrationEntries)(m).GetEntries()
	if o == nil {
		return nil
	}
	s := make([]*RegistrationEntry, len(o))
	for i, x := range o {
		s[i] = (*RegistrationEntry)(x)
	}
	return s
}

// *Depending on the context it represents a Workload's SVID and its associated information
// or a cert bundle of a remote control plane for the purposes of trusting remote workloads.
type WorkloadEntry struct {
	SpiffeId                  string            `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	Svid                      []byte            `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
	SvidPrivateKey            []byte            `protobuf:"bytes,3,opt,name=svid_private_key,json=svidPrivateKey,proto3" json:"svid_private_key,omitempty"`
	ControlPlaneBundle        []byte            `protobuf:"bytes,4,opt,name=control_plane_bundle,json=controlPlaneBundle,proto3" json:"control_plane_bundle,omitempty"`
	SpiffeIdToFederatedBundle map[string][]byte `protobuf:"bytes,5,rep,name=spiffe_id_to_federated_bundle,json=spiffeIdToFederatedBundle" json:"spiffe_id_to_federated_bundle,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *WorkloadEntry) Reset()                    { *m = WorkloadEntry{} }
func (m *WorkloadEntry) String() string            { return proto.CompactTextString(m) }
func (*WorkloadEntry) ProtoMessage()               {}
func (*WorkloadEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WorkloadEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *WorkloadEntry) GetSvid() []byte {
	if m != nil {
		return m.Svid
	}
	return nil
}

func (m *WorkloadEntry) GetSvidPrivateKey() []byte {
	if m != nil {
		return m.SvidPrivateKey
	}
	return nil
}

func (m *WorkloadEntry) GetControlPlaneBundle() []byte {
	if m != nil {
		return m.ControlPlaneBundle
	}
	return nil
}

func (m *WorkloadEntry) GetSpiffeIdToFederatedBundle() map[string][]byte {
	if m != nil {
		return m.SpiffeIdToFederatedBundle
	}
	return nil
}

// *Represents and SPIFFEId that depending on its association it could be used to
// request for a SVID and the control plane's cert bundle or request for a Federated cert Bundle.
type SpiffeId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *SpiffeId) Reset()                    { *m = SpiffeId{} }
func (m *SpiffeId) String() string            { return proto.CompactTextString(m) }
func (*SpiffeId) ProtoMessage()               {}
func (*SpiffeId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SpiffeId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *Represents a list of WorkloadEntry and a Control Plane bundle.
type Bundles struct {
	WorkloadEntry []*WorkloadEntry `protobuf:"bytes,1,rep,name=workload_entry,json=workloadEntry" json:"workload_entry,omitempty"`
	Ttl           int32            `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Bundles) Reset()                    { *m = Bundles{} }
func (m *Bundles) String() string            { return proto.CompactTextString(m) }
func (*Bundles) ProtoMessage()               {}
func (*Bundles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Bundles) GetWorkloadEntry() []*WorkloadEntry {
	if m != nil {
		return m.WorkloadEntry
	}
	return nil
}

func (m *Bundles) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func init() {
	proto.RegisterType((*WorkloadEntry)(nil), "workload.WorkloadEntry")
	proto.RegisterType((*SpiffeId)(nil), "workload.SpiffeId")
	proto.RegisterType((*Bundles)(nil), "workload.Bundles")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Workload service

type WorkloadClient interface {
	// /Depending on what the SPIFFEId is associated with,
	// /it requests SVID and cert bundle of the control plane corresponding to the SPIFFEId
	// /or requests trusted external CA cert bundles corresponding to the SPIFFEId.
	FetchBundles(ctx context.Context, in *SpiffeId, opts ...grpc.CallOption) (*Bundles, error)
	// /Requests all SVIDs and cert bundle of the control plane and all trusted external CA cert bundles associated with the workload.
	FetchAllBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundles, error)
}

type workloadClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadClient(cc *grpc.ClientConn) WorkloadClient {
	return &workloadClient{cc}
}

func (c *workloadClient) FetchBundles(ctx context.Context, in *SpiffeId, opts ...grpc.CallOption) (*Bundles, error) {
	out := new(Bundles)
	err := grpc.Invoke(ctx, "/workload.Workload/FetchBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) FetchAllBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundles, error) {
	out := new(Bundles)
	err := grpc.Invoke(ctx, "/workload.Workload/FetchAllBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Workload service

type WorkloadServer interface {
	// /Depending on what the SPIFFEId is associated with,
	// /it requests SVID and cert bundle of the control plane corresponding to the SPIFFEId
	// /or requests trusted external CA cert bundles corresponding to the SPIFFEId.
	FetchBundles(context.Context, *SpiffeId) (*Bundles, error)
	// /Requests all SVIDs and cert bundle of the control plane and all trusted external CA cert bundles associated with the workload.
	FetchAllBundles(context.Context, *common.Empty) (*Bundles, error)
}

func RegisterWorkloadServer(s *grpc.Server, srv WorkloadServer) {
	s.RegisterService(&_Workload_serviceDesc, srv)
}

func _Workload_FetchBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpiffeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).FetchBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.Workload/FetchBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).FetchBundles(ctx, req.(*SpiffeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_FetchAllBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).FetchAllBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workload.Workload/FetchAllBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).FetchAllBundles(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workload.Workload",
	HandlerType: (*WorkloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchBundles",
			Handler:    _Workload_FetchBundles_Handler,
		},
		{
			MethodName: "FetchAllBundles",
			Handler:    _Workload_FetchAllBundles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workload.proto",
}

func init() { proto.RegisterFile("workload.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x5f, 0xab, 0xda, 0x30,
	0x18, 0xc6, 0xd7, 0x56, 0xb7, 0xfa, 0x4e, 0x9d, 0x0b, 0xc2, 0xba, 0x8e, 0x0d, 0xf1, 0xaa, 0x37,
	0x6b, 0x87, 0xb2, 0x31, 0x76, 0x31, 0xd8, 0x40, 0x61, 0x6c, 0x17, 0xd2, 0x1d, 0x38, 0x17, 0xe7,
	0x22, 0xd4, 0x26, 0x6a, 0x31, 0x6d, 0x4a, 0x1b, 0xeb, 0xe9, 0xf7, 0x3d, 0x1f, 0xe4, 0xd0, 0xa4,
	0x51, 0x84, 0xe3, 0xb9, 0x4a, 0xf2, 0x3c, 0xf9, 0xbd, 0xff, 0x12, 0x18, 0x1e, 0x79, 0xb1, 0x67,
	0x3c, 0x22, 0x7e, 0x5e, 0x70, 0xc1, 0x91, 0xad, 0xcf, 0xee, 0xe7, 0x6d, 0x22, 0x76, 0x87, 0xb5,
	0x1f, 0xf3, 0x34, 0x28, 0xf3, 0x64, 0xb3, 0xa1, 0x41, 0x59, 0x24, 0x41, 0xbe, 0xdf, 0x06, 0x31,
	0x4f, 0x53, 0x9e, 0xb5, 0x8b, 0x02, 0xa7, 0x0f, 0x26, 0x0c, 0x6e, 0x5b, 0x76, 0x91, 0x89, 0xa2,
	0x46, 0x1f, 0xa0, 0xa7, 0x38, 0x9c, 0x10, 0xc7, 0x98, 0x18, 0x5e, 0x2f, 0xb4, 0x95, 0xf0, 0x87,
	0x20, 0x04, 0x9d, 0xb2, 0x4a, 0x88, 0x63, 0x4e, 0x0c, 0xaf, 0x1f, 0xca, 0x3d, 0xf2, 0x60, 0xd4,
	0xac, 0x38, 0x2f, 0x92, 0x2a, 0x12, 0x14, 0xef, 0x69, 0xed, 0x58, 0xd2, 0x1f, 0x36, 0xfa, 0x4a,
	0xc9, 0x7f, 0x69, 0x8d, 0xbe, 0xc0, 0x38, 0xe6, 0x99, 0x28, 0x38, 0xc3, 0x39, 0x8b, 0x32, 0x8a,
	0xd7, 0x87, 0x8c, 0x30, 0xea, 0x74, 0xe4, 0x6d, 0xd4, 0x7a, 0xab, 0xc6, 0xfa, 0x2d, 0x1d, 0x74,
	0x0f, 0x1f, 0x4f, 0xc5, 0x60, 0xc1, 0xf1, 0x86, 0x12, 0x5a, 0x44, 0x82, 0x12, 0x8d, 0x76, 0x27,
	0x96, 0xf7, 0x7a, 0xf6, 0xcd, 0x3f, 0xcd, 0xe3, 0xa2, 0x19, 0xff, 0x7f, 0x5b, 0xf8, 0x0d, 0x5f,
	0x6a, 0x52, 0x45, 0x96, 0x76, 0xf8, 0xbe, 0xbc, 0xe6, 0xbb, 0xff, 0xe0, 0xd3, 0xf3, 0x30, 0x1a,
	0x81, 0xd5, 0xb4, 0xaa, 0x46, 0xd4, 0x6c, 0xd1, 0x18, 0xba, 0x55, 0xc4, 0x0e, 0xb4, 0x1d, 0x8f,
	0x3a, 0xfc, 0x30, 0xbf, 0x1b, 0x53, 0x17, 0x6c, 0x1d, 0x0d, 0x0d, 0xc1, 0x3c, 0x4d, 0xd6, 0x4c,
	0xc8, 0xf4, 0x0e, 0x5e, 0xa9, 0xb0, 0x25, 0xfa, 0x79, 0x7e, 0x58, 0x4c, 0x9b, 0x24, 0x8e, 0x21,
	0xfb, 0x7b, 0x77, 0xa5, 0xbf, 0x70, 0x70, 0xbc, 0x78, 0xbb, 0x11, 0x58, 0x42, 0x30, 0x99, 0xbe,
	0x1b, 0x36, 0xdb, 0x59, 0x05, 0xb6, 0x26, 0xd0, 0x57, 0xe8, 0x2f, 0xa9, 0x88, 0x77, 0x3a, 0x1b,
	0x3a, 0x47, 0xd5, 0xc5, 0xb9, 0x6f, 0xcf, 0x9a, 0xbe, 0x36, 0x87, 0x37, 0x12, 0xfb, 0xc5, 0x98,
	0x96, 0x06, 0x7e, 0xfb, 0x89, 0x16, 0x69, 0x2e, 0xea, 0x27, 0xa0, 0xd5, 0x8b, 0xf5, 0x4b, 0xf9,
	0xc1, 0xe6, 0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xa9, 0xba, 0xa1, 0xab, 0x02, 0x00, 0x00,
}
