/**The Registration API is used to register SPIFFE IDs, and the attestation logic that should be performed on a workload before those IDs can be issued.*/
syntax = "proto3";
package registration;

import public "google/api/annotations.proto";
import public "github.com/spiffe/sri/pkg/common/common.proto";

service Registration {
    ///Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
    rpc CreateEntry(common.RegistrationEntry) returns (RegistrationEntryID) {
        option (google.api.http) = {
			post: "/entry"
			body: "*"
		};
    }
    ///Deletes an entry and returns the deleted entry.
    rpc DeleteEntry(RegistrationEntryID) returns (common.RegistrationEntry) {
        option (google.api.http).delete = "/entry";
    }
    ///Retrieve a specific registered entry.
    rpc FetchEntry(RegistrationEntryID) returns (common.RegistrationEntry) {
        option (google.api.http).get = "/entry/{id}";
    }
    ///Updates a specific registered entry.
    rpc UpdateEntry(UpdateEntryRequest) returns (common.RegistrationEntry) {
        option (google.api.http).put = "/entry";
    }
    ///Returns all the Entries associated with the ParentID value.
    rpc ListByParentID(ParentID) returns (common.RegistrationEntries);
    ///Returns all the entries associated with a selector value.
    rpc ListBySelector(common.Selector) returns (common.RegistrationEntries);
    ///Return all registration entries for which SPIFFE ID matches.
    rpc ListBySpiffeID(SpiffeID) returns (common.RegistrationEntries);

    ///Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
    rpc CreateFederatedBundle(CreateFederatedBundleRequest) returns (common.Empty);
    ///Retrieves Federated bundles for all the Federated SPIFFE IDs.
    rpc ListFederatedBundles(common.Empty) returns (ListFederatedBundlesReply);
    ///Updates a particular Federated Bundle. Useful for rotation.
    rpc UpdateFederatedBundle(FederatedBundle) returns (common.Empty);
    ///Delete a particular Federated Bundle. Used to destroy inter-domain trust.
    rpc DeleteFederatedBundle(FederatedSpiffeID) returns (common.Empty);
}

/**A type that represents the id of an entry.*/
message RegistrationEntryID {
    string id = 1; ///RegistrationEntryID.
}

/**A type that represents a parent Id.*/
message ParentID {
    string id = 1; ///ParentId.
}

/**A type that represents a SPIFFE Id.*/
message SpiffeID {
    string id = 1; ///SpiffeId.
}

/**A type with the id with want to update plus values to modify.*/
message UpdateEntryRequest {
    string id = 1; ///Id of the entry to update.
    common.RegistrationEntry entry = 2; ///Values in the RegistrationEntry to update.

}

/**A CA bundle for a different Trust Domain than the one used and managed by the Control Plane.*/
message FederatedBundle {
    string spiffe_id = 1; ///A SPIFFE ID that has a Federated Bundle
    bytes federated_bundle = 2; ///A trusted cert bundle that is not part of Control Planes trust domain but belongs to a different Trust Domain.
    int32 ttl = 3; ///Time to live.
}

/**It represents a request with a FederatedBundle to create.*/
message CreateFederatedBundleRequest {
    FederatedBundle federated_bundle = 1; ///A trusted cert bundle that is not part of Control Planes trust domain but belongs to a different Trust Domain.
}

/**It represents a reply with a list of FederatedBundle.*/
message ListFederatedBundlesReply {
    repeated FederatedBundle bundles = 1; ///A list of FederatedBundle.
}

/**A type that represents a Federated SPIFFE Id.*/
message FederatedSpiffeID {
    string id  = 1; ///FederatedSpiffeID
}
